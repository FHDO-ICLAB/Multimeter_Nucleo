
Bachelorarbeit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e4  0800c680  0800c680  0001c680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d064  0800d064  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d064  0800d064  0001d064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d06c  0800d06c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d06c  0800d06c  0001d06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d070  0800d070  0001d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001f0  0800d264  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  0800d264  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012045  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257f  00000000  00000000  00032265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  000347e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  000356a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028db7  00000000  00000000  00036470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bc5  00000000  00000000  0005f227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feed8  00000000  00000000  0006fdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ecc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005420  00000000  00000000  0016ed14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c668 	.word	0x0800c668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800c668 	.word	0x0800c668

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <HAL_UARTEx_RxEventCallback>:
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
	uint8_t Counter = 0 ;  	// Hilfsvariable zum Umkopieren von Daten aus dem RX-Puffer in den zentralen Puffer
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]

	if(huart -> Instance == USART2 )   // Überprüfung, ob der Interrupt von USART2 stammt, da wir aktuell USART 2 einsetzen
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <HAL_UARTEx_RxEventCallback+0xc0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d14e      	bne.n	80010d0 <HAL_UARTEx_RxEventCallback+0xb8>
	{

		while(Counter <= Size)  // Durchlauf zur Übertragung der Daten vom Rx-Puffer in den zentralen Puffer
 8001032:	e03b      	b.n	80010ac <HAL_UARTEx_RxEventCallback+0x94>
		{
			//Prüfen, ob der Hauptpuffer voll mit Daten ist. In diesem Fall werden die Daten von Anfang an ersetzt.
			if(MainBufCounter > 64 )
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <HAL_UARTEx_RxEventCallback+0xc4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b40      	cmp	r3, #64	; 0x40
 800103a:	d902      	bls.n	8001042 <HAL_UARTEx_RxEventCallback+0x2a>
		    {
				//Zurücksetzen des Hauptpufferzählers
		    	MainBufCounter = 0;
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_UARTEx_RxEventCallback+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	801a      	strh	r2, [r3, #0]
		    }
			MainBuf[MainBufCounter] = RxBuf[Counter++] ; // Übertragung der Daten vom Rx-Puffer in den zentralen Puffer
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	73fa      	strb	r2, [r7, #15]
 8001048:	4619      	mov	r1, r3
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_UARTEx_RxEventCallback+0xc4>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_UARTEx_RxEventCallback+0xc8>)
 8001052:	5c59      	ldrb	r1, [r3, r1]
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001056:	5499      	strb	r1, [r3, r2]


			if(MainBuf[MainBufCounter] == '\n')     // Überprüfung auf das Zeichen \n, das signalisiert, dass der vollständige Befehl eingegangen ist
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_UARTEx_RxEventCallback+0xc4>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001060:	5c9b      	ldrb	r3, [r3, r2]
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d117      	bne.n	8001096 <HAL_UARTEx_RxEventCallback+0x7e>
			{

				for(int i = 0 ; i < (MainBufCounter); i++)  // Einfügen des empfangenen Befehls in den Befehlspuffer
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	e00b      	b.n	8001084 <HAL_UARTEx_RxEventCallback+0x6c>
				{
					commandBuf[i] =MainBuf[i];
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_UARTEx_RxEventCallback+0xcc>)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4413      	add	r3, r2
 8001072:	7819      	ldrb	r1, [r3, #0]
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
				for(int i = 0 ; i < (MainBufCounter); i++)  // Einfügen des empfangenen Befehls in den Befehlspuffer
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_UARTEx_RxEventCallback+0xc4>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4293      	cmp	r3, r2
 800108e:	dbed      	blt.n	800106c <HAL_UARTEx_RxEventCallback+0x54>

				}

				newCommandReceived = true;  //Statusflag, das signalisiert, dass ein neuer Befehl eingegangen ist
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_UARTEx_RxEventCallback+0xd4>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
			}


			if(Counter - 1 != Size)    // Sicherstellen, dass nach jeder Datenkopie kein Nullzeichen hinzugefügt wird
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	1e5a      	subs	r2, r3, #1
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	429a      	cmp	r2, r3
 800109e:	d005      	beq.n	80010ac <HAL_UARTEx_RxEventCallback+0x94>
			{
				//Inkrementieren des Hauptpufferzählers
				MainBufCounter++;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_UARTEx_RxEventCallback+0xc4>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_UARTEx_RxEventCallback+0xc4>)
 80010aa:	801a      	strh	r2, [r3, #0]
		while(Counter <= Size)  // Durchlauf zur Übertragung der Daten vom Rx-Puffer in den zentralen Puffer
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	887a      	ldrh	r2, [r7, #2]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d2be      	bcs.n	8001034 <HAL_UARTEx_RxEventCallback+0x1c>


		}

		//Diese Funktion wird verwendet, um Daten von UART mit DMA zu empfangen, bis der Datenpuffer voll ist oder die IDLE Line erkannt wird.
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80010b6:	2240      	movs	r2, #64	; 0x40
 80010b8:	4909      	ldr	r1, [pc, #36]	; (80010e0 <HAL_UARTEx_RxEventCallback+0xc8>)
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <HAL_UARTEx_RxEventCallback+0xd8>)
 80010bc:	f006 fd7b 	bl	8007bb6 <HAL_UARTEx_ReceiveToIdle_DMA>
		//Deaktivieren Sie den Interrupt für die halb übertragenen Daten.
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_UARTEx_RxEventCallback+0xdc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_UARTEx_RxEventCallback+0xdc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0204 	bic.w	r2, r2, #4
 80010ce:	601a      	str	r2, [r3, #0]
	}
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40004400 	.word	0x40004400
 80010dc:	20000466 	.word	0x20000466
 80010e0:	2000020c 	.word	0x2000020c
 80010e4:	2000024c 	.word	0x2000024c
 80010e8:	20000424 	.word	0x20000424
 80010ec:	20000464 	.word	0x20000464
 80010f0:	20000358 	.word	0x20000358
 80010f4:	200003dc 	.word	0x200003dc

080010f8 <Uprintf>:

 * */


void Uprintf(char *str)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	//Funktion zur Übertragung von Daten auf UART.
	HAL_UART_Transmit(&huart2 ,(uint8_t*) str, strlen(str),HAL_MAX_DELAY);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff f86f 	bl	80001e4 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <Uprintf+0x28>)
 8001112:	f005 fae5 	bl	80066e0 <HAL_UART_Transmit>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000358 	.word	0x20000358

08001124 <lowercase>:
char* lowercase(char* s)   // Diese Funktion wandelt alle Zeichen in einem String in Kleinbuchstaben um
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  for(char *p=s; *p; p++) *p=tolower(*p);   // Durchläuft jeden Charakter im String und wandelt ihn in Kleinbuchstaben um
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e015      	b.n	800115e <lowercase+0x3a>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	72fb      	strb	r3, [r7, #11]
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	3301      	adds	r3, #1
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <lowercase+0x50>)
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <lowercase+0x2c>
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	3320      	adds	r3, #32
 800114e:	e000      	b.n	8001152 <lowercase+0x2e>
 8001150:	7afb      	ldrb	r3, [r7, #11]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3301      	adds	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1e5      	bne.n	8001132 <lowercase+0xe>
  return s;
 8001166:	687b      	ldr	r3, [r7, #4]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	0800cbbc 	.word	0x0800cbbc

08001178 <get_adc_channel_string>:

const char* get_adc_channel_string(uint32_t channel) // Diese Funktion gibt einen String zurück, der dem übergebenen ADC-Kanal entspricht
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
      switch(channel) {    // Switch-Case-Struktur zur Auswahl des korrekten Kanalstrings basierend auf dem eingegebenen channel-Wert
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a2c      	ldr	r2, [pc, #176]	; (8001234 <get_adc_channel_string+0xbc>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d04c      	beq.n	8001222 <get_adc_channel_string+0xaa>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <get_adc_channel_string+0xbc>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d84a      	bhi.n	8001226 <get_adc_channel_string+0xae>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a29      	ldr	r2, [pc, #164]	; (8001238 <get_adc_channel_string+0xc0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d042      	beq.n	800121e <get_adc_channel_string+0xa6>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a27      	ldr	r2, [pc, #156]	; (8001238 <get_adc_channel_string+0xc0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d842      	bhi.n	8001226 <get_adc_channel_string+0xae>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a26      	ldr	r2, [pc, #152]	; (800123c <get_adc_channel_string+0xc4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d038      	beq.n	800121a <get_adc_channel_string+0xa2>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a24      	ldr	r2, [pc, #144]	; (800123c <get_adc_channel_string+0xc4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d83a      	bhi.n	8001226 <get_adc_channel_string+0xae>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <get_adc_channel_string+0xc8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d02e      	beq.n	8001216 <get_adc_channel_string+0x9e>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a21      	ldr	r2, [pc, #132]	; (8001240 <get_adc_channel_string+0xc8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d832      	bhi.n	8001226 <get_adc_channel_string+0xae>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a20      	ldr	r2, [pc, #128]	; (8001244 <get_adc_channel_string+0xcc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d024      	beq.n	8001212 <get_adc_channel_string+0x9a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <get_adc_channel_string+0xcc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d82a      	bhi.n	8001226 <get_adc_channel_string+0xae>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <get_adc_channel_string+0xd0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d01a      	beq.n	800120e <get_adc_channel_string+0x96>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <get_adc_channel_string+0xd0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d822      	bhi.n	8001226 <get_adc_channel_string+0xae>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <get_adc_channel_string+0xd4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d010      	beq.n	800120a <get_adc_channel_string+0x92>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <get_adc_channel_string+0xd4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d81a      	bhi.n	8001226 <get_adc_channel_string+0xae>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <get_adc_channel_string+0xd8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d004      	beq.n	8001202 <get_adc_channel_string+0x8a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a16      	ldr	r2, [pc, #88]	; (8001254 <get_adc_channel_string+0xdc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d002      	beq.n	8001206 <get_adc_channel_string+0x8e>
 8001200:	e011      	b.n	8001226 <get_adc_channel_string+0xae>
          case ADC_CHANNEL_1:
              return "CHANNEL_1";
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <get_adc_channel_string+0xe0>)
 8001204:	e010      	b.n	8001228 <get_adc_channel_string+0xb0>
          case ADC_CHANNEL_2:
              return "CHANNEL_2";
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <get_adc_channel_string+0xe4>)
 8001208:	e00e      	b.n	8001228 <get_adc_channel_string+0xb0>
          case ADC_CHANNEL_3:
              return "CHANNEL_3";
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <get_adc_channel_string+0xe8>)
 800120c:	e00c      	b.n	8001228 <get_adc_channel_string+0xb0>
          case ADC_CHANNEL_4:
              return "CHANNEL_4";
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <get_adc_channel_string+0xec>)
 8001210:	e00a      	b.n	8001228 <get_adc_channel_string+0xb0>
          case ADC_CHANNEL_5:
              return "CHANNEL_5";
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <get_adc_channel_string+0xf0>)
 8001214:	e008      	b.n	8001228 <get_adc_channel_string+0xb0>
          case ADC_CHANNEL_11:
              return "CHANNEL_11";
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <get_adc_channel_string+0xf4>)
 8001218:	e006      	b.n	8001228 <get_adc_channel_string+0xb0>
          case ADC_CHANNEL_12:
              return "CHANNEL_12";
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <get_adc_channel_string+0xf8>)
 800121c:	e004      	b.n	8001228 <get_adc_channel_string+0xb0>
          case ADC_CHANNEL_13:
              return "CHANNEL_13";
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <get_adc_channel_string+0xfc>)
 8001220:	e002      	b.n	8001228 <get_adc_channel_string+0xb0>
          case ADC_CHANNEL_VREFINT:
              return "CHANNEL_VREFINT";
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <get_adc_channel_string+0x100>)
 8001224:	e000      	b.n	8001228 <get_adc_channel_string+0xb0>
          default:
              return "Channel not selected";
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <get_adc_channel_string+0x104>)
      }
  }
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	80000001 	.word	0x80000001
 8001238:	36902000 	.word	0x36902000
 800123c:	32601000 	.word	0x32601000
 8001240:	2e300800 	.word	0x2e300800
 8001244:	14f00020 	.word	0x14f00020
 8001248:	10c00010 	.word	0x10c00010
 800124c:	0c900008 	.word	0x0c900008
 8001250:	04300002 	.word	0x04300002
 8001254:	08600004 	.word	0x08600004
 8001258:	0800c680 	.word	0x0800c680
 800125c:	0800c68c 	.word	0x0800c68c
 8001260:	0800c698 	.word	0x0800c698
 8001264:	0800c6a4 	.word	0x0800c6a4
 8001268:	0800c6b0 	.word	0x0800c6b0
 800126c:	0800c6bc 	.word	0x0800c6bc
 8001270:	0800c6c8 	.word	0x0800c6c8
 8001274:	0800c6d4 	.word	0x0800c6d4
 8001278:	0800c6e0 	.word	0x0800c6e0
 800127c:	0800c6f0 	.word	0x0800c6f0

08001280 <convertStringToADCChannel>:

void convertStringToADCChannel( char* str)   // Diese Funktion konvertiert einen String zu einem ADC-Kanal
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

      if (strcmp(str, "ADC_CHANNEL_1") == 0) {  // Verwendet eine if-else-if-Struktur, um den String zu überprüfen und den entsprechenden ADC-Kanal zuzuweisen
 8001288:	4938      	ldr	r1, [pc, #224]	; (800136c <convertStringToADCChannel+0xec>)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7fe ffa0 	bl	80001d0 <strcmp>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <convertStringToADCChannel+0x1e>
    	  sConfig.Channel  = ADC_CHANNEL_1;
 8001296:	4b36      	ldr	r3, [pc, #216]	; (8001370 <convertStringToADCChannel+0xf0>)
 8001298:	4a36      	ldr	r2, [pc, #216]	; (8001374 <convertStringToADCChannel+0xf4>)
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e056      	b.n	800134c <convertStringToADCChannel+0xcc>
      } else if (strcmp(str, "ADC_CHANNEL_2") == 0) {
 800129e:	4936      	ldr	r1, [pc, #216]	; (8001378 <convertStringToADCChannel+0xf8>)
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7fe ff95 	bl	80001d0 <strcmp>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <convertStringToADCChannel+0x34>
    	  sConfig.Channel  = ADC_CHANNEL_2;
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <convertStringToADCChannel+0xf0>)
 80012ae:	4a33      	ldr	r2, [pc, #204]	; (800137c <convertStringToADCChannel+0xfc>)
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e04b      	b.n	800134c <convertStringToADCChannel+0xcc>
      } else if (strcmp(str, "ADC_CHANNEL_3") == 0) {
 80012b4:	4932      	ldr	r1, [pc, #200]	; (8001380 <convertStringToADCChannel+0x100>)
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7fe ff8a 	bl	80001d0 <strcmp>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <convertStringToADCChannel+0x4a>
    	  sConfig.Channel  = ADC_CHANNEL_3;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <convertStringToADCChannel+0xf0>)
 80012c4:	4a2f      	ldr	r2, [pc, #188]	; (8001384 <convertStringToADCChannel+0x104>)
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e040      	b.n	800134c <convertStringToADCChannel+0xcc>
      } else if (strcmp(str, "ADC_CHANNEL_4") == 0) {
 80012ca:	492f      	ldr	r1, [pc, #188]	; (8001388 <convertStringToADCChannel+0x108>)
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7fe ff7f 	bl	80001d0 <strcmp>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <convertStringToADCChannel+0x60>
    	  sConfig.Channel  = ADC_CHANNEL_4;
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <convertStringToADCChannel+0xf0>)
 80012da:	4a2c      	ldr	r2, [pc, #176]	; (800138c <convertStringToADCChannel+0x10c>)
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e035      	b.n	800134c <convertStringToADCChannel+0xcc>
      } else if (strcmp(str, "ADC_CHANNEL_5") == 0) {
 80012e0:	492b      	ldr	r1, [pc, #172]	; (8001390 <convertStringToADCChannel+0x110>)
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7fe ff74 	bl	80001d0 <strcmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d103      	bne.n	80012f6 <convertStringToADCChannel+0x76>
    	  sConfig.Channel  = ADC_CHANNEL_5;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <convertStringToADCChannel+0xf0>)
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <convertStringToADCChannel+0x114>)
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e02a      	b.n	800134c <convertStringToADCChannel+0xcc>
      } else if (strcmp(str, "ADC_CHANNEL_11") == 0) {
 80012f6:	4928      	ldr	r1, [pc, #160]	; (8001398 <convertStringToADCChannel+0x118>)
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7fe ff69 	bl	80001d0 <strcmp>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d103      	bne.n	800130c <convertStringToADCChannel+0x8c>
    	  sConfig.Channel  = ADC_CHANNEL_11;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <convertStringToADCChannel+0xf0>)
 8001306:	4a25      	ldr	r2, [pc, #148]	; (800139c <convertStringToADCChannel+0x11c>)
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e01f      	b.n	800134c <convertStringToADCChannel+0xcc>
      } else if (strcmp(str, "ADC_CHANNEL_12") == 0) {
 800130c:	4924      	ldr	r1, [pc, #144]	; (80013a0 <convertStringToADCChannel+0x120>)
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7fe ff5e 	bl	80001d0 <strcmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d103      	bne.n	8001322 <convertStringToADCChannel+0xa2>
    	  sConfig.Channel  = ADC_CHANNEL_12;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <convertStringToADCChannel+0xf0>)
 800131c:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <convertStringToADCChannel+0x124>)
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e014      	b.n	800134c <convertStringToADCChannel+0xcc>
      } else if (strcmp(str, "ADC_CHANNEL_13") == 0) {
 8001322:	4921      	ldr	r1, [pc, #132]	; (80013a8 <convertStringToADCChannel+0x128>)
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7fe ff53 	bl	80001d0 <strcmp>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d103      	bne.n	8001338 <convertStringToADCChannel+0xb8>
    	  sConfig.Channel  = ADC_CHANNEL_13;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <convertStringToADCChannel+0xf0>)
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <convertStringToADCChannel+0x12c>)
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e009      	b.n	800134c <convertStringToADCChannel+0xcc>
      } else if (strcmp(str, "ADC_CHANNEL_VREFINT") == 0) {
 8001338:	491d      	ldr	r1, [pc, #116]	; (80013b0 <convertStringToADCChannel+0x130>)
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7fe ff48 	bl	80001d0 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <convertStringToADCChannel+0xcc>
    	  sConfig.Channel  = ADC_CHANNEL_VREFINT;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <convertStringToADCChannel+0xf0>)
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <convertStringToADCChannel+0x134>)
 800134a:	601a      	str	r2, [r3, #0]
      }

 	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134c:	4908      	ldr	r1, [pc, #32]	; (8001370 <convertStringToADCChannel+0xf0>)
 800134e:	481a      	ldr	r0, [pc, #104]	; (80013b8 <convertStringToADCChannel+0x138>)
 8001350:	f002 fa10 	bl	8003774 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <convertStringToADCChannel+0xde>
 	  	  {
 	  	    Error_Handler();
 800135a:	f000 ff55 	bl	8002208 <Error_Handler>
 	  	  }
 	 HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f001 fa9c 	bl	800289c <HAL_Delay>
  }
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	0800c708 	.word	0x0800c708
 8001370:	20000294 	.word	0x20000294
 8001374:	04300002 	.word	0x04300002
 8001378:	0800c718 	.word	0x0800c718
 800137c:	08600004 	.word	0x08600004
 8001380:	0800c728 	.word	0x0800c728
 8001384:	0c900008 	.word	0x0c900008
 8001388:	0800c738 	.word	0x0800c738
 800138c:	10c00010 	.word	0x10c00010
 8001390:	0800c748 	.word	0x0800c748
 8001394:	14f00020 	.word	0x14f00020
 8001398:	0800c758 	.word	0x0800c758
 800139c:	2e300800 	.word	0x2e300800
 80013a0:	0800c768 	.word	0x0800c768
 80013a4:	32601000 	.word	0x32601000
 80013a8:	0800c778 	.word	0x0800c778
 80013ac:	36902000 	.word	0x36902000
 80013b0:	0800c788 	.word	0x0800c788
 80013b4:	80000001 	.word	0x80000001
 80013b8:	200002ac 	.word	0x200002ac

080013bc <extract_integer_from_command>:


uint16_t extract_integer_from_command(const char* commandBuf, const char* command) {
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b095      	sub	sp, #84	; 0x54
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
    // Extract the integer substring from the command string
	char integer_str[commandBuf_SIZE];
	strlcpy(integer_str, lowercase((char *)commandBuf) + strlen(command), commandBuf_SIZE);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff feac 	bl	8001124 <lowercase>
 80013cc:	4604      	mov	r4, r0
 80013ce:	6838      	ldr	r0, [r7, #0]
 80013d0:	f7fe ff08 	bl	80001e4 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	18e1      	adds	r1, r4, r3
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	4618      	mov	r0, r3
 80013e0:	f007 fb4e 	bl	8008a80 <strlcpy>
    // Convert the string to an integer
	uint16_t value = atoi(integer_str);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4618      	mov	r0, r3
 80013ea:	f006 fc3f 	bl	8007c6c <atoi>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    return value;
 80013f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3754      	adds	r7, #84	; 0x54
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}

08001400 <get_adc_resolution_string>:

const char* get_adc_resolution_string(uint32_t resolution)  // Diese Funktion gibt einen String zurück, der der übergebenen ADC-Auflösung entspricht
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
      switch(resolution) {   // Switch-Case-Struktur zur Auswahl des korrekten Auflösungsstrings basierend auf dem eingegebenen resolution-Wert
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b18      	cmp	r3, #24
 800140c:	d83c      	bhi.n	8001488 <get_adc_resolution_string+0x88>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <get_adc_resolution_string+0x14>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001485 	.word	0x08001485
 8001418:	08001489 	.word	0x08001489
 800141c:	08001489 	.word	0x08001489
 8001420:	08001489 	.word	0x08001489
 8001424:	08001489 	.word	0x08001489
 8001428:	08001489 	.word	0x08001489
 800142c:	08001489 	.word	0x08001489
 8001430:	08001489 	.word	0x08001489
 8001434:	08001481 	.word	0x08001481
 8001438:	08001489 	.word	0x08001489
 800143c:	08001489 	.word	0x08001489
 8001440:	08001489 	.word	0x08001489
 8001444:	08001489 	.word	0x08001489
 8001448:	08001489 	.word	0x08001489
 800144c:	08001489 	.word	0x08001489
 8001450:	08001489 	.word	0x08001489
 8001454:	0800147d 	.word	0x0800147d
 8001458:	08001489 	.word	0x08001489
 800145c:	08001489 	.word	0x08001489
 8001460:	08001489 	.word	0x08001489
 8001464:	08001489 	.word	0x08001489
 8001468:	08001489 	.word	0x08001489
 800146c:	08001489 	.word	0x08001489
 8001470:	08001489 	.word	0x08001489
 8001474:	08001479 	.word	0x08001479
          case ADC_RESOLUTION_6B:
              return "6 Bits";
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <get_adc_resolution_string+0x98>)
 800147a:	e006      	b.n	800148a <get_adc_resolution_string+0x8a>
          case ADC_RESOLUTION_8B:
              return "8 Bits";
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <get_adc_resolution_string+0x9c>)
 800147e:	e004      	b.n	800148a <get_adc_resolution_string+0x8a>
          case ADC_RESOLUTION_10B:
              return "10 Bits";
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <get_adc_resolution_string+0xa0>)
 8001482:	e002      	b.n	800148a <get_adc_resolution_string+0x8a>
          case ADC_RESOLUTION_12B:
              return "12 Bits";
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <get_adc_resolution_string+0xa4>)
 8001486:	e000      	b.n	800148a <get_adc_resolution_string+0x8a>


          default:
              return "Unbekannt";
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <get_adc_resolution_string+0xa8>)
      }
  }
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	0800c79c 	.word	0x0800c79c
 800149c:	0800c7a4 	.word	0x0800c7a4
 80014a0:	0800c7ac 	.word	0x0800c7ac
 80014a4:	0800c7b4 	.word	0x0800c7b4
 80014a8:	0800c7bc 	.word	0x0800c7bc

080014ac <setADCResoltuion>:
void setADCResoltuion( uint8_t resolution)  // Diese Funktion stellt die adc-Auflösung ein, abhängig von dem angegebenen Parameter
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]

    switch(resolution) {   // Verwendet eine Switch-Case-Struktur, um die eingegebene Auflösung zu überprüfen und die entsprechende ADC-Auflösung zuzuweisen
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	3b06      	subs	r3, #6
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d82e      	bhi.n	800151c <setADCResoltuion+0x70>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <setADCResoltuion+0x18>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014e1 	.word	0x080014e1
 80014c8:	0800151d 	.word	0x0800151d
 80014cc:	080014ef 	.word	0x080014ef
 80014d0:	0800151d 	.word	0x0800151d
 80014d4:	080014fd 	.word	0x080014fd
 80014d8:	0800151d 	.word	0x0800151d
 80014dc:	0800150d 	.word	0x0800150d
        case 6:
      	  hadc1.Init.Resolution  = ADC_RESOLUTION_6B;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <setADCResoltuion+0x90>)
 80014e2:	2218      	movs	r2, #24
 80014e4:	609a      	str	r2, [r3, #8]
       	 division=63;   //(2^6)-1 Division ist der Parameter, um den ADC-Wert als Volt in Abhängigkeit von der Auflösung zu erhalten
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <setADCResoltuion+0x94>)
 80014e8:	223f      	movs	r2, #63	; 0x3f
 80014ea:	601a      	str	r2, [r3, #0]
       	break;
 80014ec:	e016      	b.n	800151c <setADCResoltuion+0x70>

        case 8:
      	  hadc1.Init.Resolution  = ADC_RESOLUTION_8B;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <setADCResoltuion+0x90>)
 80014f0:	2210      	movs	r2, #16
 80014f2:	609a      	str	r2, [r3, #8]
       	 division=255;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <setADCResoltuion+0x94>)
 80014f6:	22ff      	movs	r2, #255	; 0xff
 80014f8:	601a      	str	r2, [r3, #0]
       	break;
 80014fa:	e00f      	b.n	800151c <setADCResoltuion+0x70>

        case 10:
      	  hadc1.Init.Resolution  = ADC_RESOLUTION_10B;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <setADCResoltuion+0x90>)
 80014fe:	2208      	movs	r2, #8
 8001500:	609a      	str	r2, [r3, #8]
       	 division=1023;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <setADCResoltuion+0x94>)
 8001504:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001508:	601a      	str	r2, [r3, #0]
       	break;
 800150a:	e007      	b.n	800151c <setADCResoltuion+0x70>

        case 12:
      	  hadc1.Init.Resolution  = ADC_RESOLUTION_12B;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <setADCResoltuion+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
       	 division=4095;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <setADCResoltuion+0x94>)
 8001514:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001518:	601a      	str	r2, [r3, #0]
       	break;
 800151a:	bf00      	nop
    }

	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <setADCResoltuion+0x90>)
 800151e:	f001 fbfd 	bl	8002d1c <HAL_ADC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <setADCResoltuion+0x80>
	   {
	     Error_Handler();
 8001528:	f000 fe6e 	bl	8002208 <Error_Handler>
	   }

	  HAL_Delay(10);
 800152c:	200a      	movs	r0, #10
 800152e:	f001 f9b5 	bl	800289c <HAL_Delay>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002ac 	.word	0x200002ac
 8001540:	2000000c 	.word	0x2000000c

08001544 <getRatio>:
int getRatio(uint32_t ratio)  // Diese Funktion gibt das Verhältnis einer gegebenen ADC-Überabtastungsrate als Zahl zurück
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
      switch(ratio) {  // Switch-Case-Struktur zur Auswahl des korrekten Verhältnisses basierend auf dem eingegebenen ratio-Wert
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b1c      	cmp	r3, #28
 8001550:	d84d      	bhi.n	80015ee <getRatio+0xaa>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <getRatio+0x14>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	080015cd 	.word	0x080015cd
 800155c:	080015ef 	.word	0x080015ef
 8001560:	080015ef 	.word	0x080015ef
 8001564:	080015ef 	.word	0x080015ef
 8001568:	080015d1 	.word	0x080015d1
 800156c:	080015ef 	.word	0x080015ef
 8001570:	080015ef 	.word	0x080015ef
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015d5 	.word	0x080015d5
 800157c:	080015ef 	.word	0x080015ef
 8001580:	080015ef 	.word	0x080015ef
 8001584:	080015ef 	.word	0x080015ef
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015ef 	.word	0x080015ef
 8001590:	080015ef 	.word	0x080015ef
 8001594:	080015ef 	.word	0x080015ef
 8001598:	080015dd 	.word	0x080015dd
 800159c:	080015ef 	.word	0x080015ef
 80015a0:	080015ef 	.word	0x080015ef
 80015a4:	080015ef 	.word	0x080015ef
 80015a8:	080015e1 	.word	0x080015e1
 80015ac:	080015ef 	.word	0x080015ef
 80015b0:	080015ef 	.word	0x080015ef
 80015b4:	080015ef 	.word	0x080015ef
 80015b8:	080015e5 	.word	0x080015e5
 80015bc:	080015ef 	.word	0x080015ef
 80015c0:	080015ef 	.word	0x080015ef
 80015c4:	080015ef 	.word	0x080015ef
 80015c8:	080015e9 	.word	0x080015e9
          case ADC_OVERSAMPLING_RATIO_2:
              return 2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	e00f      	b.n	80015f0 <getRatio+0xac>
          case ADC_OVERSAMPLING_RATIO_4:
              return 4;
 80015d0:	2304      	movs	r3, #4
 80015d2:	e00d      	b.n	80015f0 <getRatio+0xac>
          case ADC_OVERSAMPLING_RATIO_8:
              return 8;
 80015d4:	2308      	movs	r3, #8
 80015d6:	e00b      	b.n	80015f0 <getRatio+0xac>
          case ADC_OVERSAMPLING_RATIO_16:
              return 16;
 80015d8:	2310      	movs	r3, #16
 80015da:	e009      	b.n	80015f0 <getRatio+0xac>
          case ADC_OVERSAMPLING_RATIO_32:
              return 32;
 80015dc:	2320      	movs	r3, #32
 80015de:	e007      	b.n	80015f0 <getRatio+0xac>
          case ADC_OVERSAMPLING_RATIO_64:
              return 64;
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	e005      	b.n	80015f0 <getRatio+0xac>
          case ADC_OVERSAMPLING_RATIO_128:
              return 128;
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	e003      	b.n	80015f0 <getRatio+0xac>
          case ADC_OVERSAMPLING_RATIO_256:
              return 256;
 80015e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ec:	e000      	b.n	80015f0 <getRatio+0xac>

          default:
              return 0;
 80015ee:	2300      	movs	r3, #0
      }
  }
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <setADCAperture>:

void setADCAperture( uint16_t aperture)  // Diese Funktion setzt die Apertur des ADC basierend auf einer gegebenen Apertur
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]

    switch(aperture) {// Verwendet eine Switch-Case-Struktur, um die eingegebene Apertur zu überprüfen und die entsprechende ADC-Apertur zuzuweisen
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	f5b3 5fc4 	cmp.w	r3, #6272	; 0x1880
 800160c:	d054      	beq.n	80016b8 <setADCAperture+0xbc>
 800160e:	f5b3 5fc4 	cmp.w	r3, #6272	; 0x1880
 8001612:	dc59      	bgt.n	80016c8 <setADCAperture+0xcc>
 8001614:	f5b3 6f44 	cmp.w	r3, #3136	; 0xc40
 8001618:	d047      	beq.n	80016aa <setADCAperture+0xae>
 800161a:	f5b3 6f44 	cmp.w	r3, #3136	; 0xc40
 800161e:	dc53      	bgt.n	80016c8 <setADCAperture+0xcc>
 8001620:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8001624:	d03a      	beq.n	800169c <setADCAperture+0xa0>
 8001626:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800162a:	dc4d      	bgt.n	80016c8 <setADCAperture+0xcc>
 800162c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001630:	d02d      	beq.n	800168e <setADCAperture+0x92>
 8001632:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001636:	dc47      	bgt.n	80016c8 <setADCAperture+0xcc>
 8001638:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 800163c:	d020      	beq.n	8001680 <setADCAperture+0x84>
 800163e:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8001642:	dc41      	bgt.n	80016c8 <setADCAperture+0xcc>
 8001644:	2bc4      	cmp	r3, #196	; 0xc4
 8001646:	d014      	beq.n	8001672 <setADCAperture+0x76>
 8001648:	2bc4      	cmp	r3, #196	; 0xc4
 800164a:	dc3d      	bgt.n	80016c8 <setADCAperture+0xcc>
 800164c:	2b31      	cmp	r3, #49	; 0x31
 800164e:	d002      	beq.n	8001656 <setADCAperture+0x5a>
 8001650:	2b62      	cmp	r3, #98	; 0x62
 8001652:	d007      	beq.n	8001664 <setADCAperture+0x68>
 8001654:	e038      	b.n	80016c8 <setADCAperture+0xcc>
 // Aperture basierend auf Oversampling Time von 24.4 Cycles
        case 49:
      	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_2;
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <setADCAperture+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
      	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <setADCAperture+0xec>)
 800165e:	2220      	movs	r2, #32
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
       	break;
 8001662:	e031      	b.n	80016c8 <setADCAperture+0xcc>

        case 98:
      	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <setADCAperture+0xec>)
 8001666:	2204      	movs	r2, #4
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c
      	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <setADCAperture+0xec>)
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
       	break;
 8001670:	e02a      	b.n	80016c8 <setADCAperture+0xcc>

        case 196:
      	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <setADCAperture+0xec>)
 8001674:	2208      	movs	r2, #8
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c
      	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <setADCAperture+0xec>)
 800167a:	2260      	movs	r2, #96	; 0x60
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
       	break;
 800167e:	e023      	b.n	80016c8 <setADCAperture+0xcc>

        case 392:
      	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <setADCAperture+0xec>)
 8001682:	220c      	movs	r2, #12
 8001684:	63da      	str	r2, [r3, #60]	; 0x3c
      	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <setADCAperture+0xec>)
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
       	break;
 800168c:	e01c      	b.n	80016c8 <setADCAperture+0xcc>

        case 784:
      	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <setADCAperture+0xec>)
 8001690:	2210      	movs	r2, #16
 8001692:	63da      	str	r2, [r3, #60]	; 0x3c
      	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <setADCAperture+0xec>)
 8001696:	22a0      	movs	r2, #160	; 0xa0
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
       	break;
 800169a:	e015      	b.n	80016c8 <setADCAperture+0xcc>

        case 1568:
      	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <setADCAperture+0xec>)
 800169e:	2214      	movs	r2, #20
 80016a0:	63da      	str	r2, [r3, #60]	; 0x3c
      	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <setADCAperture+0xec>)
 80016a4:	22c0      	movs	r2, #192	; 0xc0
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
       	break;
 80016a8:	e00e      	b.n	80016c8 <setADCAperture+0xcc>

        case 3136:
      	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <setADCAperture+0xec>)
 80016ac:	2218      	movs	r2, #24
 80016ae:	63da      	str	r2, [r3, #60]	; 0x3c
      	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <setADCAperture+0xec>)
 80016b2:	22e0      	movs	r2, #224	; 0xe0
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
       	break;
 80016b6:	e007      	b.n	80016c8 <setADCAperture+0xcc>

        case 6272:
      	  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <setADCAperture+0xec>)
 80016ba:	221c      	movs	r2, #28
 80016bc:	63da      	str	r2, [r3, #60]	; 0x3c
      	  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <setADCAperture+0xec>)
 80016c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
       	break;
 80016c6:	bf00      	nop
    }

	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <setADCAperture+0xec>)
 80016ca:	f001 fb27 	bl	8002d1c <HAL_ADC_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <setADCAperture+0xdc>
	   {
	     Error_Handler();
 80016d4:	f000 fd98 	bl	8002208 <Error_Handler>
	   }

	  HAL_Delay(10);
 80016d8:	200a      	movs	r0, #10
 80016da:	f001 f8df 	bl	800289c <HAL_Delay>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200002ac 	.word	0x200002ac

080016ec <checkCommandType>:
int checkCommandType(char* commandBuf)  // Diese Funktion überprüft den Befehlstyp eines gegebenen Befehls
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

	// Verwendet eine Switch-Case-Struktur, um das erste Zeichen des Befehls zu prüfen und dann den einzelnen Befehl zu bestimmen.

    switch (commandBuf[0]) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3b64      	subs	r3, #100	; 0x64
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f200 8106 	bhi.w	800190c <checkCommandType+0x220>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <checkCommandType+0x1c>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	080018eb 	.word	0x080018eb
 800170c:	080018d7 	.word	0x080018d7
 8001710:	0800190d 	.word	0x0800190d
 8001714:	0800190d 	.word	0x0800190d
 8001718:	0800190d 	.word	0x0800190d
 800171c:	0800190d 	.word	0x0800190d
 8001720:	0800190d 	.word	0x0800190d
 8001724:	0800190d 	.word	0x0800190d
 8001728:	0800190d 	.word	0x0800190d
 800172c:	08001749 	.word	0x08001749
 8001730:	0800190d 	.word	0x0800190d
 8001734:	0800190d 	.word	0x0800190d
 8001738:	0800190d 	.word	0x0800190d
 800173c:	0800190d 	.word	0x0800190d
 8001740:	0800190d 	.word	0x0800190d
 8001744:	0800176f 	.word	0x0800176f
    case 'm':
        if (strncmp(commandBuf, "measure:voltage?", 16) == 0 || strncmp(commandBuf, "meas:volt?", 10) == 0) {
 8001748:	2210      	movs	r2, #16
 800174a:	4973      	ldr	r1, [pc, #460]	; (8001918 <checkCommandType+0x22c>)
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f007 f9ac 	bl	8008aaa <strncmp>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <checkCommandType+0x7e>
 8001758:	220a      	movs	r2, #10
 800175a:	4970      	ldr	r1, [pc, #448]	; (800191c <checkCommandType+0x230>)
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f007 f9a4 	bl	8008aaa <strncmp>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	f040 80ca 	bne.w	80018fe <checkCommandType+0x212>
            return 1;
 800176a:	2301      	movs	r3, #1
 800176c:	e0cf      	b.n	800190e <checkCommandType+0x222>
        }
        break;
    case 's':
        if (strncmp(commandBuf, "sense:channel?", 14) == 0 || strncmp(commandBuf, "sens:chan?", 10) == 0) {
 800176e:	220e      	movs	r2, #14
 8001770:	496b      	ldr	r1, [pc, #428]	; (8001920 <checkCommandType+0x234>)
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f007 f999 	bl	8008aaa <strncmp>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <checkCommandType+0xa2>
 800177e:	220a      	movs	r2, #10
 8001780:	4968      	ldr	r1, [pc, #416]	; (8001924 <checkCommandType+0x238>)
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f007 f991 	bl	8008aaa <strncmp>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <checkCommandType+0xa6>
            return 2;
 800178e:	2302      	movs	r3, #2
 8001790:	e0bd      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:channel ", 14) == 0|| strncmp(commandBuf, "sens:chan ", 10) == 0) {
 8001792:	220e      	movs	r2, #14
 8001794:	4964      	ldr	r1, [pc, #400]	; (8001928 <checkCommandType+0x23c>)
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f007 f987 	bl	8008aaa <strncmp>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <checkCommandType+0xc6>
 80017a2:	220a      	movs	r2, #10
 80017a4:	4961      	ldr	r1, [pc, #388]	; (800192c <checkCommandType+0x240>)
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f007 f97f 	bl	8008aaa <strncmp>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <checkCommandType+0xca>
            return 3;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0ab      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:resolution? max", 21) == 0 || strncmp(commandBuf, "sens:reso? max", 14) == 0) {
 80017b6:	2215      	movs	r2, #21
 80017b8:	495d      	ldr	r1, [pc, #372]	; (8001930 <checkCommandType+0x244>)
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f007 f975 	bl	8008aaa <strncmp>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <checkCommandType+0xea>
 80017c6:	220e      	movs	r2, #14
 80017c8:	495a      	ldr	r1, [pc, #360]	; (8001934 <checkCommandType+0x248>)
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f007 f96d 	bl	8008aaa <strncmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <checkCommandType+0xee>
            return 4;
 80017d6:	2304      	movs	r3, #4
 80017d8:	e099      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:resolution? min", 21) == 0 || strncmp(commandBuf, "sens:reso? min", 14) == 0) {
 80017da:	2215      	movs	r2, #21
 80017dc:	4956      	ldr	r1, [pc, #344]	; (8001938 <checkCommandType+0x24c>)
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f007 f963 	bl	8008aaa <strncmp>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <checkCommandType+0x10e>
 80017ea:	220e      	movs	r2, #14
 80017ec:	4953      	ldr	r1, [pc, #332]	; (800193c <checkCommandType+0x250>)
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f007 f95b 	bl	8008aaa <strncmp>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <checkCommandType+0x112>
            return 5;
 80017fa:	2305      	movs	r3, #5
 80017fc:	e087      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:resolution?", 17) == 0 || strncmp(commandBuf, "sens:reso?", 10) == 0) {
 80017fe:	2211      	movs	r2, #17
 8001800:	494f      	ldr	r1, [pc, #316]	; (8001940 <checkCommandType+0x254>)
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f007 f951 	bl	8008aaa <strncmp>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <checkCommandType+0x132>
 800180e:	220a      	movs	r2, #10
 8001810:	494c      	ldr	r1, [pc, #304]	; (8001944 <checkCommandType+0x258>)
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f007 f949 	bl	8008aaa <strncmp>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <checkCommandType+0x136>
            return 6;
 800181e:	2306      	movs	r3, #6
 8001820:	e075      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:resolution ", 17) == 0|| strncmp(commandBuf, "sens:reso ", 10) == 0) {
 8001822:	2211      	movs	r2, #17
 8001824:	4948      	ldr	r1, [pc, #288]	; (8001948 <checkCommandType+0x25c>)
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f007 f93f 	bl	8008aaa <strncmp>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <checkCommandType+0x156>
 8001832:	220a      	movs	r2, #10
 8001834:	4945      	ldr	r1, [pc, #276]	; (800194c <checkCommandType+0x260>)
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f007 f937 	bl	8008aaa <strncmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <checkCommandType+0x15a>
            return 7;
 8001842:	2307      	movs	r3, #7
 8001844:	e063      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:aperture? max", 19) == 0 || strncmp(commandBuf, "sens:aper? max", 14) == 0) {
 8001846:	2213      	movs	r2, #19
 8001848:	4941      	ldr	r1, [pc, #260]	; (8001950 <checkCommandType+0x264>)
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f007 f92d 	bl	8008aaa <strncmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <checkCommandType+0x17a>
 8001856:	220e      	movs	r2, #14
 8001858:	493e      	ldr	r1, [pc, #248]	; (8001954 <checkCommandType+0x268>)
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f007 f925 	bl	8008aaa <strncmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <checkCommandType+0x17e>
            return 8;
 8001866:	2308      	movs	r3, #8
 8001868:	e051      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:aperture? min", 19) == 0 || strncmp(commandBuf, "sens:aper? min", 14) == 0) {
 800186a:	2213      	movs	r2, #19
 800186c:	493a      	ldr	r1, [pc, #232]	; (8001958 <checkCommandType+0x26c>)
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f007 f91b 	bl	8008aaa <strncmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <checkCommandType+0x19e>
 800187a:	220e      	movs	r2, #14
 800187c:	4937      	ldr	r1, [pc, #220]	; (800195c <checkCommandType+0x270>)
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f007 f913 	bl	8008aaa <strncmp>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <checkCommandType+0x1a2>
            return 9;
 800188a:	2309      	movs	r3, #9
 800188c:	e03f      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:aperture?", 15) == 0 || strncmp(commandBuf, "sens:aper?", 10) == 0) {
 800188e:	220f      	movs	r2, #15
 8001890:	4933      	ldr	r1, [pc, #204]	; (8001960 <checkCommandType+0x274>)
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f007 f909 	bl	8008aaa <strncmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <checkCommandType+0x1c2>
 800189e:	220a      	movs	r2, #10
 80018a0:	4930      	ldr	r1, [pc, #192]	; (8001964 <checkCommandType+0x278>)
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f007 f901 	bl	8008aaa <strncmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <checkCommandType+0x1c6>
            return 10;
 80018ae:	230a      	movs	r3, #10
 80018b0:	e02d      	b.n	800190e <checkCommandType+0x222>

        } else if (strncmp(commandBuf, "sense:aperture ", 15) == 0 || strncmp(commandBuf, "sens:aper ", 10)== 0){
 80018b2:	220f      	movs	r2, #15
 80018b4:	492c      	ldr	r1, [pc, #176]	; (8001968 <checkCommandType+0x27c>)
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f007 f8f7 	bl	8008aaa <strncmp>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <checkCommandType+0x1e6>
 80018c2:	220a      	movs	r2, #10
 80018c4:	4929      	ldr	r1, [pc, #164]	; (800196c <checkCommandType+0x280>)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f007 f8ef 	bl	8008aaa <strncmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d117      	bne.n	8001902 <checkCommandType+0x216>
            return 11;
 80018d2:	230b      	movs	r3, #11
 80018d4:	e01b      	b.n	800190e <checkCommandType+0x222>
        }
        break;
        case 'e':
            if (strncmp(commandBuf, "enable_oversampling", 19) == 0) {
 80018d6:	2213      	movs	r2, #19
 80018d8:	4925      	ldr	r1, [pc, #148]	; (8001970 <checkCommandType+0x284>)
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f007 f8e5 	bl	8008aaa <strncmp>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10f      	bne.n	8001906 <checkCommandType+0x21a>
                return 12;
 80018e6:	230c      	movs	r3, #12
 80018e8:	e011      	b.n	800190e <checkCommandType+0x222>
            }
            break;
        case 'd':
            if (strncmp(commandBuf, "disable_oversampling", 20) == 0) {
 80018ea:	2214      	movs	r2, #20
 80018ec:	4921      	ldr	r1, [pc, #132]	; (8001974 <checkCommandType+0x288>)
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f007 f8db 	bl	8008aaa <strncmp>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d107      	bne.n	800190a <checkCommandType+0x21e>
                return 13;
 80018fa:	230d      	movs	r3, #13
 80018fc:	e007      	b.n	800190e <checkCommandType+0x222>
        break;
 80018fe:	bf00      	nop
 8001900:	e004      	b.n	800190c <checkCommandType+0x220>
        break;
 8001902:	bf00      	nop
 8001904:	e002      	b.n	800190c <checkCommandType+0x220>
            break;
 8001906:	bf00      	nop
 8001908:	e000      	b.n	800190c <checkCommandType+0x220>
            }
            break;
 800190a:	bf00      	nop
    }


    return 0;
 800190c:	2300      	movs	r3, #0

}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	0800c7c8 	.word	0x0800c7c8
 800191c:	0800c7dc 	.word	0x0800c7dc
 8001920:	0800c7e8 	.word	0x0800c7e8
 8001924:	0800c7f8 	.word	0x0800c7f8
 8001928:	0800c804 	.word	0x0800c804
 800192c:	0800c814 	.word	0x0800c814
 8001930:	0800c820 	.word	0x0800c820
 8001934:	0800c838 	.word	0x0800c838
 8001938:	0800c848 	.word	0x0800c848
 800193c:	0800c860 	.word	0x0800c860
 8001940:	0800c870 	.word	0x0800c870
 8001944:	0800c884 	.word	0x0800c884
 8001948:	0800c890 	.word	0x0800c890
 800194c:	0800c8a4 	.word	0x0800c8a4
 8001950:	0800c8b0 	.word	0x0800c8b0
 8001954:	0800c8c4 	.word	0x0800c8c4
 8001958:	0800c8d4 	.word	0x0800c8d4
 800195c:	0800c8e8 	.word	0x0800c8e8
 8001960:	0800c8f8 	.word	0x0800c8f8
 8001964:	0800c908 	.word	0x0800c908
 8001968:	0800c914 	.word	0x0800c914
 800196c:	0800c924 	.word	0x0800c924
 8001970:	0800c930 	.word	0x0800c930
 8001974:	0800c944 	.word	0x0800c944

08001978 <main>:
int main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b09c      	sub	sp, #112	; 0x70
 800197c:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197e:	f000 ff11 	bl	80027a4 <HAL_Init>



  /* Configure the system clock */
  SystemClock_Config();
 8001982:	f000 fac5 	bl	8001f10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;    //HAL-Funktion zur Initialisierung der ADC-Auflösung,
 8001986:	4bc2      	ldr	r3, [pc, #776]	; (8001c90 <main+0x318>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hadc1.Init.OversamplingMode = DISABLE;          // Oversampling deaktiviert als Startpunkt
 800198c:	4bc0      	ldr	r3, [pc, #768]	; (8001c90 <main+0x318>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;   // Oversampling Ratio
 8001994:	4bbe      	ldr	r3, [pc, #760]	; (8001c90 <main+0x318>)
 8001996:	221c      	movs	r2, #28
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;   //Oversampling RightBitshift, abhängig von Ratio
 800199a:	4bbd      	ldr	r3, [pc, #756]	; (8001c90 <main+0x318>)
 800199c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a2:	f000 fbcb 	bl	800213c <MX_GPIO_Init>
  MX_DMA_Init();
 80019a6:	f000 fba3 	bl	80020f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019aa:	f000 fb71 	bl	8002090 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80019ae:	f000 fb01 	bl	8001fb4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);//Diese Funktion wird zum Empfangen von Daten vom UART mit DMA verwendet, bis der Datenpuffer voll ist oder eine Leerzeile erkannt wird.
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	49b7      	ldr	r1, [pc, #732]	; (8001c94 <main+0x31c>)
 80019b6:	48b8      	ldr	r0, [pc, #736]	; (8001c98 <main+0x320>)
 80019b8:	f006 f8fd 	bl	8007bb6 <HAL_UARTEx_ReceiveToIdle_DMA>

  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//Deaktivieren des Interrupts
 80019bc:	4bb7      	ldr	r3, [pc, #732]	; (8001c9c <main+0x324>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4bb6      	ldr	r3, [pc, #728]	; (8001c9c <main+0x324>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0204 	bic.w	r2, r2, #4
 80019ca:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(newCommandReceived == true)                   //Prüfen, ob der neue Befehl empfangen wurde.
 80019cc:	4bb4      	ldr	r3, [pc, #720]	; (8001ca0 <main+0x328>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0fb      	beq.n	80019cc <main+0x54>
	 	  		   	    {

		  char uart_buffer[50]; // Puffer für UART-Übertragung

		  switch (checkCommandType(lowercase((char *)commandBuf))) // Befehlstyp prüfen
 80019d4:	48b3      	ldr	r0, [pc, #716]	; (8001ca4 <main+0x32c>)
 80019d6:	f7ff fba5 	bl	8001124 <lowercase>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fe85 	bl	80016ec <checkCommandType>
 80019e2:	4603      	mov	r3, r0
 80019e4:	3b01      	subs	r3, #1
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	f200 8251 	bhi.w	8001e8e <main+0x516>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <main+0x7c>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a29 	.word	0x08001a29
 80019f8:	08001a87 	.word	0x08001a87
 80019fc:	08001a9f 	.word	0x08001a9f
 8001a00:	08001b55 	.word	0x08001b55
 8001a04:	08001b67 	.word	0x08001b67
 8001a08:	08001b79 	.word	0x08001b79
 8001a0c:	08001b91 	.word	0x08001b91
 8001a10:	08001c6f 	.word	0x08001c6f
 8001a14:	08001c7f 	.word	0x08001c7f
 8001a18:	08001d1d 	.word	0x08001d1d
 8001a1c:	08001d5b 	.word	0x08001d5b
 8001a20:	08001e5b 	.word	0x08001e5b
 8001a24:	08001e75 	.word	0x08001e75


		      case 1: // measure:voltage?


		    	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);  // ADC-Kalibrierung starten
 8001a28:	217f      	movs	r1, #127	; 0x7f
 8001a2a:	4899      	ldr	r0, [pc, #612]	; (8001c90 <main+0x318>)
 8001a2c:	f002 fc5e 	bl	80042ec <HAL_ADCEx_Calibration_Start>
		    	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_value, 1);  //Startet den ADC-DMA-Modus für den ADC "hadc1"
 8001a30:	2201      	movs	r2, #1
 8001a32:	499d      	ldr	r1, [pc, #628]	; (8001ca8 <main+0x330>)
 8001a34:	4896      	ldr	r0, [pc, #600]	; (8001c90 <main+0x318>)
 8001a36:	f001 fb9f 	bl	8003178 <HAL_ADC_Start_DMA>
		    	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);   //Wartet, bis die ADC-Konvertierung abgeschlossen ist.
 8001a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3e:	4894      	ldr	r0, [pc, #592]	; (8001c90 <main+0x318>)
 8001a40:	f001 fac2 	bl	8002fc8 <HAL_ADC_PollForConversion>
		    	  HAL_Delay(100);  //Eine Pause von 100 Millisekunden, um sicherzustellen, dass der ADC-Wert stabil ist.
 8001a44:	2064      	movs	r0, #100	; 0x64
 8001a46:	f000 ff29 	bl	800289c <HAL_Delay>

	  			    float voltage = (3.3f * adc_value) / (division) ; // ADC-Wert in Spannung umrechnen
 8001a4a:	4b97      	ldr	r3, [pc, #604]	; (8001ca8 <main+0x330>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001cac <main+0x334>
 8001a5a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a5e:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <main+0x338>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c


	  			    sprintf(uart_buffer, "Voltage: %.3f V", voltage); //Schreibt den Spannungswert formatiert in den uart_buffer, um ihn später über UART zu übertragen.
 8001a72:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001a74:	f7fe fd78 	bl	8000568 <__aeabi_f2d>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	498d      	ldr	r1, [pc, #564]	; (8001cb4 <main+0x33c>)
 8001a80:	f006 ffde 	bl	8008a40 <siprintf>



		          break;
 8001a84:	e203      	b.n	8001e8e <main+0x516>
		      case 2:
		 	  		sprintf(uart_buffer, "Current Channel: %s", get_adc_channel_string(sConfig.Channel));
 8001a86:	4b8c      	ldr	r3, [pc, #560]	; (8001cb8 <main+0x340>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fb74 	bl	8001178 <get_adc_channel_string>
 8001a90:	4602      	mov	r2, r0
 8001a92:	463b      	mov	r3, r7
 8001a94:	4989      	ldr	r1, [pc, #548]	; (8001cbc <main+0x344>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f006 ffd2 	bl	8008a40 <siprintf>

		 	  		//Schreibt den formatierten Kanalnamen in den uart_buffer zur späteren Übertragung über UART.
		          break;
 8001a9c:	e1f7      	b.n	8001e8e <main+0x516>
		      case 3:



		    	  	 	  		if(strcmp(lowercase((char *)commandBuf), "sense:channel vrefint")==0||strcmp(lowercase((char *)commandBuf), "sens:chan vrefint")==0)
 8001a9e:	4881      	ldr	r0, [pc, #516]	; (8001ca4 <main+0x32c>)
 8001aa0:	f7ff fb40 	bl	8001124 <lowercase>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4986      	ldr	r1, [pc, #536]	; (8001cc0 <main+0x348>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fb91 	bl	80001d0 <strcmp>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00a      	beq.n	8001aca <main+0x152>
 8001ab4:	487b      	ldr	r0, [pc, #492]	; (8001ca4 <main+0x32c>)
 8001ab6:	f7ff fb35 	bl	8001124 <lowercase>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4981      	ldr	r1, [pc, #516]	; (8001cc4 <main+0x34c>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fb86 	bl	80001d0 <strcmp>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <main+0x15a>
		    	  	 	  		{
		    	  	 	  			//Überprüft, ob der empfangene Befehl "sense:channel vrefint" oder "sens:chan vrefint" ist.

		    	  	 	  		convertStringToADCChannel("ADC_CHANNEL_VREFINT"); //ADC-Kanal auf "ADC_CHANNEL_VREFINT" setzen.
 8001aca:	487f      	ldr	r0, [pc, #508]	; (8001cc8 <main+0x350>)
 8001acc:	f7ff fbd8 	bl	8001280 <convertStringToADCChannel>
 8001ad0:	e034      	b.n	8001b3c <main+0x1c4>

		    	  	 	  		}

		    	  	 	  		else if(strncmp(lowercase((char *)commandBuf), "sens:chan ", 10) == 0)
 8001ad2:	4874      	ldr	r0, [pc, #464]	; (8001ca4 <main+0x32c>)
 8001ad4:	f7ff fb26 	bl	8001124 <lowercase>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220a      	movs	r2, #10
 8001adc:	497b      	ldr	r1, [pc, #492]	; (8001ccc <main+0x354>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f006 ffe3 	bl	8008aaa <strncmp>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d114      	bne.n	8001b14 <main+0x19c>
		    	  	 	  		{
		    	  	 	  		uint16_t channel= extract_integer_from_command(((char *)commandBuf),"sens:chan ");// Extrahiert die Kanalnummer aus dem Befehl "sense:channel x" und speichert sie in der Variable channel.
 8001aea:	4978      	ldr	r1, [pc, #480]	; (8001ccc <main+0x354>)
 8001aec:	486d      	ldr	r0, [pc, #436]	; (8001ca4 <main+0x32c>)
 8001aee:	f7ff fc65 	bl	80013bc <extract_integer_from_command>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		    			    	char adc_channel_temp[20];
		    	  	 	  	    snprintf(adc_channel_temp, sizeof(adc_channel_temp), "ADC_CHANNEL_%u", channel);//Erstellt einen temporären Puffer adc_channel_temp und formatiert den Kanalwert darin.
 8001af8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001afc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001b00:	4a73      	ldr	r2, [pc, #460]	; (8001cd0 <main+0x358>)
 8001b02:	2114      	movs	r1, #20
 8001b04:	f006 ff68 	bl	80089d8 <sniprintf>
		    	  	 	  	    convertStringToADCChannel(adc_channel_temp); //ADC-Kanal entsprechend adc_channel_temp  setzen.
 8001b08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fbb7 	bl	8001280 <convertStringToADCChannel>
 8001b12:	e013      	b.n	8001b3c <main+0x1c4>
		    	  	 	  		}
		    	  	 	  		else {

		    	  	 	  		uint16_t channel= extract_integer_from_command(((char *)commandBuf),"sense:channel ");
 8001b14:	496f      	ldr	r1, [pc, #444]	; (8001cd4 <main+0x35c>)
 8001b16:	4863      	ldr	r0, [pc, #396]	; (8001ca4 <main+0x32c>)
 8001b18:	f7ff fc50 	bl	80013bc <extract_integer_from_command>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                                // Extrahiert die Kanalnummer aus dem Befehl "sense:channel x" und speichert sie in der Variable channel.
		    			    	char adc_channel_temp[20];
		    	  	 	  	    snprintf(adc_channel_temp, sizeof(adc_channel_temp), "ADC_CHANNEL_%u", channel);//Erstellt einen temporären Puffer adc_channel_temp und formatiert den Kanalwert darin.
 8001b22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001b26:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001b2a:	4a69      	ldr	r2, [pc, #420]	; (8001cd0 <main+0x358>)
 8001b2c:	2114      	movs	r1, #20
 8001b2e:	f006 ff53 	bl	80089d8 <sniprintf>
		    	  	 	  	    convertStringToADCChannel(adc_channel_temp); //ADC-Kanal entsprechend adc_channel_temp  setzen.
 8001b32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fba2 	bl	8001280 <convertStringToADCChannel>



		    	  	 	  		}

		    	  	 	  		sprintf(uart_buffer, "Selected Channel: %s", get_adc_channel_string(sConfig.Channel)); // Schreibt den ausgewählten ADC-Kanal in den uart_buffer für die spätere Übertragung über UART.
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <main+0x340>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fb19 	bl	8001178 <get_adc_channel_string>
 8001b46:	4602      	mov	r2, r0
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4963      	ldr	r1, [pc, #396]	; (8001cd8 <main+0x360>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f006 ff77 	bl	8008a40 <siprintf>


		    	  	 	  	break;
 8001b52:	e19c      	b.n	8001e8e <main+0x516>

		      case 4: // Maximale Auflösung erhalten
		              sprintf(uart_buffer, "Max ADC resolution: %d bits", maxRes); //Schreibt die maximale Auflösung des ADCs in den uart_buffer.
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <main+0x364>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4960      	ldr	r1, [pc, #384]	; (8001ce0 <main+0x368>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f006 ff6e 	bl	8008a40 <siprintf>


		          break;
 8001b64:	e193      	b.n	8001e8e <main+0x516>
		      case 5: // Mindestauflösung erhalten

		              sprintf(uart_buffer, "Min ADC resolution: %d bits", minRes); //Schreibt die minimale Auflösung des ADCs in den uart_buffer.
 8001b66:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <main+0x36c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	495e      	ldr	r1, [pc, #376]	; (8001ce8 <main+0x370>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f006 ff65 	bl	8008a40 <siprintf>

		          break;
 8001b76:	e18a      	b.n	8001e8e <main+0x516>


		      case 6: // aktuelle Auflösung erhalten
		      {

		          sprintf(uart_buffer, "Current resolution: %s ", get_adc_resolution_string(hadc1.Init.Resolution));
 8001b78:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <main+0x318>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fc3f 	bl	8001400 <get_adc_resolution_string>
 8001b82:	4602      	mov	r2, r0
 8001b84:	463b      	mov	r3, r7
 8001b86:	4959      	ldr	r1, [pc, #356]	; (8001cec <main+0x374>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f006 ff59 	bl	8008a40 <siprintf>
		          //Schreibt die aktuelle Auflösung des ADCs in den uart_buffer unter Verwendung der Funktion get_adc_resolution_string.


		          break;
 8001b8e:	e17e      	b.n	8001e8e <main+0x516>
		      }

		      case 7:  //Set Resolution
		      {
		    	  if(strncmp(lowercase((char *)commandBuf), "sense:resolution min",20)==0 || strncmp(lowercase((char *)commandBuf), "sens:reso min",13)==0 ) // Befeh Überprüfung
 8001b90:	4844      	ldr	r0, [pc, #272]	; (8001ca4 <main+0x32c>)
 8001b92:	f7ff fac7 	bl	8001124 <lowercase>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2214      	movs	r2, #20
 8001b9a:	4955      	ldr	r1, [pc, #340]	; (8001cf0 <main+0x378>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 ff84 	bl	8008aaa <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <main+0x248>
 8001ba8:	483e      	ldr	r0, [pc, #248]	; (8001ca4 <main+0x32c>)
 8001baa:	f7ff fabb 	bl	8001124 <lowercase>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	220d      	movs	r2, #13
 8001bb2:	4950      	ldr	r1, [pc, #320]	; (8001cf4 <main+0x37c>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f006 ff78 	bl	8008aaa <strncmp>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <main+0x254>
		    	  {
	 	  	          setADCResoltuion(minRes);  //ADC-Auflösung entsprechend der angegebenen Auflösung setzen, hier Min Res
 8001bc0:	4b48      	ldr	r3, [pc, #288]	; (8001ce4 <main+0x36c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fc71 	bl	80014ac <setADCResoltuion>
 8001bca:	e044      	b.n	8001c56 <main+0x2de>

		    	  }
		    	  else if(strncmp(lowercase((char *)commandBuf), "sense:resolution max",20)==0 || strncmp(lowercase((char *)commandBuf), "sens:reso max",13)==0)
 8001bcc:	4835      	ldr	r0, [pc, #212]	; (8001ca4 <main+0x32c>)
 8001bce:	f7ff faa9 	bl	8001124 <lowercase>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2214      	movs	r2, #20
 8001bd6:	4948      	ldr	r1, [pc, #288]	; (8001cf8 <main+0x380>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f006 ff66 	bl	8008aaa <strncmp>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00b      	beq.n	8001bfc <main+0x284>
 8001be4:	482f      	ldr	r0, [pc, #188]	; (8001ca4 <main+0x32c>)
 8001be6:	f7ff fa9d 	bl	8001124 <lowercase>
 8001bea:	4603      	mov	r3, r0
 8001bec:	220d      	movs	r2, #13
 8001bee:	4943      	ldr	r1, [pc, #268]	; (8001cfc <main+0x384>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f006 ff5a 	bl	8008aaa <strncmp>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <main+0x290>
				  {
	 	  	          setADCResoltuion(maxRes); // ADC-Auflösung entsprechend der angegebenen Auflösung setzen, hier Max Res
 8001bfc:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <main+0x364>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fc53 	bl	80014ac <setADCResoltuion>
 8001c06:	e026      	b.n	8001c56 <main+0x2de>

				 		    	  }
		    	  else if (strncmp(lowercase((char *)commandBuf), "sens:reso ",10)==0){
 8001c08:	4826      	ldr	r0, [pc, #152]	; (8001ca4 <main+0x32c>)
 8001c0a:	f7ff fa8b 	bl	8001124 <lowercase>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	220a      	movs	r2, #10
 8001c12:	493b      	ldr	r1, [pc, #236]	; (8001d00 <main+0x388>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f006 ff48 	bl	8008aaa <strncmp>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10d      	bne.n	8001c3c <main+0x2c4>

		    		  uint16_t resolution = extract_integer_from_command(((char *)commandBuf),"sens:reso ");
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <main+0x388>)
 8001c22:	4820      	ldr	r0, [pc, #128]	; (8001ca4 <main+0x32c>)
 8001c24:	f7ff fbca 	bl	80013bc <extract_integer_from_command>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		    		  //Extrahiert die Auflösungszahl aus dem Befehl "sens:reso x" und speichert sie in der Variable resolution.
	 	  	          setADCResoltuion(resolution);
 8001c2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fc39 	bl	80014ac <setADCResoltuion>
 8001c3a:	e00c      	b.n	8001c56 <main+0x2de>
		    	  }
		    	  else{

		    		  uint16_t resolution = extract_integer_from_command(((char *)commandBuf),"sense:resolution ");
 8001c3c:	4931      	ldr	r1, [pc, #196]	; (8001d04 <main+0x38c>)
 8001c3e:	4819      	ldr	r0, [pc, #100]	; (8001ca4 <main+0x32c>)
 8001c40:	f7ff fbbc 	bl	80013bc <extract_integer_from_command>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	 	  	          setADCResoltuion(resolution);
 8001c4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fc2b 	bl	80014ac <setADCResoltuion>
		    	  }


		          sprintf(uart_buffer, "Selected resolution: %s ", get_adc_resolution_string(hadc1.Init.Resolution));
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <main+0x318>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fbd0 	bl	8001400 <get_adc_resolution_string>
 8001c60:	4602      	mov	r2, r0
 8001c62:	463b      	mov	r3, r7
 8001c64:	4928      	ldr	r1, [pc, #160]	; (8001d08 <main+0x390>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f006 feea 	bl	8008a40 <siprintf>
		          break;
 8001c6c:	e10f      	b.n	8001e8e <main+0x516>
		      }

		      case 8: // maximale Apertur erhalten

		              sprintf(uart_buffer, "Max Aperture: %d Cycles", maxAp);
 8001c6e:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <main+0x394>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	463b      	mov	r3, r7
 8001c74:	4926      	ldr	r1, [pc, #152]	; (8001d10 <main+0x398>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 fee2 	bl	8008a40 <siprintf>

		          break;
 8001c7c:	e107      	b.n	8001e8e <main+0x516>
		      case 9: // minimale Apertur erhalten

		              sprintf(uart_buffer, "Min Aperture: %d Cycles", minAp);
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <main+0x39c>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	463b      	mov	r3, r7
 8001c84:	4924      	ldr	r1, [pc, #144]	; (8001d18 <main+0x3a0>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f006 feda 	bl	8008a40 <siprintf>
		          break;
 8001c8c:	e0ff      	b.n	8001e8e <main+0x516>
 8001c8e:	bf00      	nop
 8001c90:	200002ac 	.word	0x200002ac
 8001c94:	2000020c 	.word	0x2000020c
 8001c98:	20000358 	.word	0x20000358
 8001c9c:	200003dc 	.word	0x200003dc
 8001ca0:	20000464 	.word	0x20000464
 8001ca4:	20000424 	.word	0x20000424
 8001ca8:	2000028c 	.word	0x2000028c
 8001cac:	40533333 	.word	0x40533333
 8001cb0:	2000000c 	.word	0x2000000c
 8001cb4:	0800c95c 	.word	0x0800c95c
 8001cb8:	20000294 	.word	0x20000294
 8001cbc:	0800c96c 	.word	0x0800c96c
 8001cc0:	0800c980 	.word	0x0800c980
 8001cc4:	0800c998 	.word	0x0800c998
 8001cc8:	0800c788 	.word	0x0800c788
 8001ccc:	0800c814 	.word	0x0800c814
 8001cd0:	0800c9ac 	.word	0x0800c9ac
 8001cd4:	0800c804 	.word	0x0800c804
 8001cd8:	0800c9bc 	.word	0x0800c9bc
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	0800c9d4 	.word	0x0800c9d4
 8001ce4:	20000001 	.word	0x20000001
 8001ce8:	0800c9f0 	.word	0x0800c9f0
 8001cec:	0800ca0c 	.word	0x0800ca0c
 8001cf0:	0800ca24 	.word	0x0800ca24
 8001cf4:	0800ca3c 	.word	0x0800ca3c
 8001cf8:	0800ca4c 	.word	0x0800ca4c
 8001cfc:	0800ca64 	.word	0x0800ca64
 8001d00:	0800c8a4 	.word	0x0800c8a4
 8001d04:	0800c890 	.word	0x0800c890
 8001d08:	0800ca74 	.word	0x0800ca74
 8001d0c:	20000004 	.word	0x20000004
 8001d10:	0800ca90 	.word	0x0800ca90
 8001d14:	20000008 	.word	0x20000008
 8001d18:	0800caa8 	.word	0x0800caa8

		      case 10: // aktuelle Apertur ermitteln

		    	      currentAp=24.5*getRatio(hadc1.Init.Oversampling.Ratio); // Berechnet die aktuelle Apertur des ADCs basierend auf dem Oversampling-Verhältnis
 8001d1c:	4b69      	ldr	r3, [pc, #420]	; (8001ec4 <main+0x54c>)
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fc0f 	bl	8001544 <getRatio>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc0b 	bl	8000544 <__aeabi_i2d>
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <main+0x550>)
 8001d34:	f7fe fc70 	bl	8000618 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff1a 	bl	8000b78 <__aeabi_d2iz>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a61      	ldr	r2, [pc, #388]	; (8001ecc <main+0x554>)
 8001d48:	6013      	str	r3, [r2, #0]
		              sprintf(uart_buffer, "Current Aperture: %d Cycles", currentAp);
 8001d4a:	4b60      	ldr	r3, [pc, #384]	; (8001ecc <main+0x554>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	463b      	mov	r3, r7
 8001d50:	495f      	ldr	r1, [pc, #380]	; (8001ed0 <main+0x558>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f006 fe74 	bl	8008a40 <siprintf>
		          break;
 8001d58:	e099      	b.n	8001e8e <main+0x516>

		      case 11: // Apertur einstellen


		    	  if(strncmp(lowercase((char *)commandBuf), "sense:aperture min",18)==0 || strncmp(lowercase((char *)commandBuf), "sens:aper min",13)==0)
 8001d5a:	485e      	ldr	r0, [pc, #376]	; (8001ed4 <main+0x55c>)
 8001d5c:	f7ff f9e2 	bl	8001124 <lowercase>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2212      	movs	r2, #18
 8001d64:	495c      	ldr	r1, [pc, #368]	; (8001ed8 <main+0x560>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f006 fe9f 	bl	8008aaa <strncmp>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <main+0x412>
 8001d72:	4858      	ldr	r0, [pc, #352]	; (8001ed4 <main+0x55c>)
 8001d74:	f7ff f9d6 	bl	8001124 <lowercase>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220d      	movs	r2, #13
 8001d7c:	4957      	ldr	r1, [pc, #348]	; (8001edc <main+0x564>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f006 fe93 	bl	8008aaa <strncmp>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <main+0x420>
		    	  {
		    		  setADCAperture(minAp);
 8001d8a:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <main+0x568>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fc33 	bl	80015fc <setADCAperture>
 8001d96:	e043      	b.n	8001e20 <main+0x4a8>

		    	  }
		    	  else if(strncmp(lowercase((char *)commandBuf), "sense:aperture max",18)==0 || strncmp(lowercase((char *)commandBuf), "sens:aper max",13)==0)
 8001d98:	484e      	ldr	r0, [pc, #312]	; (8001ed4 <main+0x55c>)
 8001d9a:	f7ff f9c3 	bl	8001124 <lowercase>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2212      	movs	r2, #18
 8001da2:	4950      	ldr	r1, [pc, #320]	; (8001ee4 <main+0x56c>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f006 fe80 	bl	8008aaa <strncmp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <main+0x450>
 8001db0:	4848      	ldr	r0, [pc, #288]	; (8001ed4 <main+0x55c>)
 8001db2:	f7ff f9b7 	bl	8001124 <lowercase>
 8001db6:	4603      	mov	r3, r0
 8001db8:	220d      	movs	r2, #13
 8001dba:	494b      	ldr	r1, [pc, #300]	; (8001ee8 <main+0x570>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 fe74 	bl	8008aaa <strncmp>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <main+0x45e>
				  {
		    		  setADCAperture(maxAp);
 8001dc8:	4b48      	ldr	r3, [pc, #288]	; (8001eec <main+0x574>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fc14 	bl	80015fc <setADCAperture>
 8001dd4:	e024      	b.n	8001e20 <main+0x4a8>


				  }else if(strncmp(lowercase((char *)commandBuf), "sens:aper ",10)==0) {
 8001dd6:	483f      	ldr	r0, [pc, #252]	; (8001ed4 <main+0x55c>)
 8001dd8:	f7ff f9a4 	bl	8001124 <lowercase>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220a      	movs	r2, #10
 8001de0:	4943      	ldr	r1, [pc, #268]	; (8001ef0 <main+0x578>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f006 fe61 	bl	8008aaa <strncmp>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <main+0x490>

					  uint16_t aperture = extract_integer_from_command(((char *)commandBuf),"sens:aper ");
 8001dee:	4940      	ldr	r1, [pc, #256]	; (8001ef0 <main+0x578>)
 8001df0:	4838      	ldr	r0, [pc, #224]	; (8001ed4 <main+0x55c>)
 8001df2:	f7ff fae3 	bl	80013bc <extract_integer_from_command>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
					  //Extrahiert den Aperturwert aus dem Befehl "sens:aper x" und speichert ihn in der Variable aperture.
		    		  setADCAperture(aperture);
 8001dfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fbfb 	bl	80015fc <setADCAperture>
 8001e06:	e00b      	b.n	8001e20 <main+0x4a8>
		    		  //die Apertur des ADCs entsprechend dem angegebenen Wert setzen
	 	  	                                            }
		    	  else{

		    		  uint16_t aperture = extract_integer_from_command(((char *)commandBuf),"sense:aperture ");
 8001e08:	493a      	ldr	r1, [pc, #232]	; (8001ef4 <main+0x57c>)
 8001e0a:	4832      	ldr	r0, [pc, #200]	; (8001ed4 <main+0x55c>)
 8001e0c:	f7ff fad6 	bl	80013bc <extract_integer_from_command>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		    		  setADCAperture(aperture);
 8001e16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fbee 	bl	80015fc <setADCAperture>

	 	  	                                            }

		    	  int aperture=24.5*getRatio(hadc1.Init.Oversampling.Ratio);
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <main+0x54c>)
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fb8d 	bl	8001544 <getRatio>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb89 	bl	8000544 <__aeabi_i2d>
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <main+0x550>)
 8001e38:	f7fe fbee 	bl	8000618 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7fe fe98 	bl	8000b78 <__aeabi_d2iz>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	66bb      	str	r3, [r7, #104]	; 0x68

		    	  sprintf(uart_buffer, "Selected aperture: %d Cycles",aperture);
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e50:	4929      	ldr	r1, [pc, #164]	; (8001ef8 <main+0x580>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f006 fdf4 	bl	8008a40 <siprintf>


		          break;
 8001e58:	e019      	b.n	8001e8e <main+0x516>


		      case 12: // Enable Oversampling


		              hadc1.Init.OversamplingMode = ENABLE; //Aktiviert das Oversampling für den ADC.
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <main+0x54c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		              HAL_ADC_Init(&hadc1);  //nitialisiert den ADC nach der Aktivierung des Oversamplings.
 8001e62:	4818      	ldr	r0, [pc, #96]	; (8001ec4 <main+0x54c>)
 8001e64:	f000 ff5a 	bl	8002d1c <HAL_ADC_Init>
		              sprintf(uart_buffer, "Oversampling enabled");
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4924      	ldr	r1, [pc, #144]	; (8001efc <main+0x584>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f006 fde7 	bl	8008a40 <siprintf>

		          break;
 8001e72:	e00c      	b.n	8001e8e <main+0x516>

		      case 13: // Disable Oversampling

		    	      hadc1.Init.OversamplingMode = DISABLE; ////Deaktiviert das Oversampling für den ADC.
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <main+0x54c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		    	      HAL_ADC_Init(&hadc1);
 8001e7c:	4811      	ldr	r0, [pc, #68]	; (8001ec4 <main+0x54c>)
 8001e7e:	f000 ff4d 	bl	8002d1c <HAL_ADC_Init>
		    	  	  sprintf(uart_buffer, "Oversampling disabled");
 8001e82:	463b      	mov	r3, r7
 8001e84:	491e      	ldr	r1, [pc, #120]	; (8001f00 <main+0x588>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f006 fdda 	bl	8008a40 <siprintf>
		          break;
 8001e8c:	bf00      	nop

		  }//switch end



	  	  Uprintf(uart_buffer);  // Überträgt den Inhalt von uart_buffer über UART.
 8001e8e:	463b      	mov	r3, r7
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff f931 	bl	80010f8 <Uprintf>
		  memset(uart_buffer, 0, sizeof(uart_buffer)); //Löscht den Inhalt von uart_buffer, indem alle Bytes auf den Wert 0 gesetzt werden.
 8001e96:	463b      	mov	r3, r7
 8001e98:	2232      	movs	r2, #50	; 0x32
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 ff13 	bl	8007cc8 <memset>
          newCommandReceived = false;            //Setzt das Flag newCommandReceived zurück, um anzuzeigen, dass kein neuer Befehl empfangen wurde.
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <main+0x58c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
          memset(commandBuf , 0 ,commandBuf_SIZE*(sizeof(commandBuf[0]))); //Löscht den Inhalt von commandBuf, indem alle Bytes auf den Wert 0 gesetzt werden. Dadurch wird der Befehlspuffer zurückgesetzt.
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <main+0x55c>)
 8001eae:	f005 ff0b 	bl	8007cc8 <memset>
          MainBufCounter = 0 ; // Setzt den Zähler MainBufCounter auf 0, um den Hauptspeicherzähler zurückzusetzen.
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <main+0x590>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	801a      	strh	r2, [r3, #0]
          memset(MainBuf , 0 ,MainBuf_SIZE*(sizeof(MainBuf[0]))); //Löscht den Inhalt von MainBuf, indem alle Bytes auf den Wert 0 gesetzt werden.
 8001eb8:	2240      	movs	r2, #64	; 0x40
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4813      	ldr	r0, [pc, #76]	; (8001f0c <main+0x594>)
 8001ebe:	f005 ff03 	bl	8007cc8 <memset>
	  if(newCommandReceived == true)                   //Prüfen, ob der neue Befehl empfangen wurde.
 8001ec2:	e583      	b.n	80019cc <main+0x54>
 8001ec4:	200002ac 	.word	0x200002ac
 8001ec8:	40388000 	.word	0x40388000
 8001ecc:	20000290 	.word	0x20000290
 8001ed0:	0800cac0 	.word	0x0800cac0
 8001ed4:	20000424 	.word	0x20000424
 8001ed8:	0800cadc 	.word	0x0800cadc
 8001edc:	0800caf0 	.word	0x0800caf0
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	0800cb00 	.word	0x0800cb00
 8001ee8:	0800cb14 	.word	0x0800cb14
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	0800c924 	.word	0x0800c924
 8001ef4:	0800c914 	.word	0x0800c914
 8001ef8:	0800cb24 	.word	0x0800cb24
 8001efc:	0800cb44 	.word	0x0800cb44
 8001f00:	0800cb5c 	.word	0x0800cb5c
 8001f04:	20000464 	.word	0x20000464
 8001f08:	20000466 	.word	0x20000466
 8001f0c:	2000024c 	.word	0x2000024c

08001f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b096      	sub	sp, #88	; 0x58
 8001f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	2244      	movs	r2, #68	; 0x44
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f005 fed2 	bl	8007cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f36:	f003 f873 	bl	8005020 <HAL_PWREx_ControlVoltageScaling>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f40:	f000 f962 	bl	8002208 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f44:	2302      	movs	r3, #2
 8001f46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f4e:	2310      	movs	r3, #16
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f56:	2302      	movs	r3, #2
 8001f58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f5e:	230a      	movs	r3, #10
 8001f60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f62:	2307      	movs	r3, #7
 8001f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 f8aa 	bl	80050cc <HAL_RCC_OscConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001f7e:	f000 f943 	bl	8002208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f82:	230f      	movs	r3, #15
 8001f84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f86:	2303      	movs	r3, #3
 8001f88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f96:	463b      	mov	r3, r7
 8001f98:	2104      	movs	r1, #4
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 fc72 	bl	8005884 <HAL_RCC_ClockConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001fa6:	f000 f92f 	bl	8002208 <Error_Handler>
  }
}
 8001faa:	bf00      	nop
 8001fac:	3758      	adds	r7, #88	; 0x58
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fc6:	4a30      	ldr	r2, [pc, #192]	; (8002088 <MX_ADC1_Init+0xd4>)
 8001fc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fca:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]

  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fde:	2204      	movs	r2, #4
 8001fe0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MX_ADC1_Init+0xd0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002004:	2200      	movs	r2, #0
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <MX_ADC1_Init+0xd0>)
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002012:	2200      	movs	r2, #0
 8002014:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MX_ADC1_Init+0xd0>)
 800201e:	f240 4201 	movw	r2, #1025	; 0x401
 8002022:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002024:	4817      	ldr	r0, [pc, #92]	; (8002084 <MX_ADC1_Init+0xd0>)
 8002026:	f000 fe79 	bl	8002d1c <HAL_ADC_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8002030:	f000 f8ea 	bl	8002208 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4619      	mov	r1, r3
 800203c:	4811      	ldr	r0, [pc, #68]	; (8002084 <MX_ADC1_Init+0xd0>)
 800203e:	f002 f9e7 	bl	8004410 <HAL_ADCEx_MultiModeConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002048:	f000 f8de 	bl	8002208 <Error_Handler>
  }

  /* Configure Regular Channel*/

  sConfig.Rank = ADC_REGULAR_RANK_1;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_ADC1_Init+0xd8>)
 800204e:	2206      	movs	r2, #6
 8002050:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_ADC1_Init+0xd8>)
 8002054:	2203      	movs	r2, #3
 8002056:	609a      	str	r2, [r3, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_ADC1_Init+0xd8>)
 800205a:	227f      	movs	r2, #127	; 0x7f
 800205c:	60da      	str	r2, [r3, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_ADC1_Init+0xd8>)
 8002060:	2204      	movs	r2, #4
 8002062:	611a      	str	r2, [r3, #16]
  sConfig.Offset = 0;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_ADC1_Init+0xd8>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <MX_ADC1_Init+0xd8>)
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_ADC1_Init+0xd0>)
 800206e:	f001 fb81 	bl	8003774 <HAL_ADC_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002078:	f000 f8c6 	bl	8002208 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200002ac 	.word	0x200002ac
 8002088:	50040000 	.word	0x50040000
 800208c:	20000294 	.word	0x20000294

08002090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 8002096:	4a15      	ldr	r2, [pc, #84]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 8002098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 800209c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020b6:	220c      	movs	r2, #12
 80020b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020d4:	f004 fab6 	bl	8006644 <HAL_UART_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020de:	f000 f893 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000358 	.word	0x20000358
 80020ec:	40004400 	.word	0x40004400

080020f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <MX_DMA_Init+0x48>)
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <MX_DMA_Init+0x48>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6493      	str	r3, [r2, #72]	; 0x48
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <MX_DMA_Init+0x48>)
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	200b      	movs	r0, #11
 8002114:	f002 fb07 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002118:	200b      	movs	r0, #11
 800211a:	f002 fb20 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2010      	movs	r0, #16
 8002124:	f002 faff 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002128:	2010      	movs	r0, #16
 800212a:	f002 fb18 	bl	800475e <HAL_NVIC_EnableIRQ>

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <MX_GPIO_Init+0xc4>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <MX_GPIO_Init+0xc4>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <MX_GPIO_Init+0xc4>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <MX_GPIO_Init+0xc4>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a24      	ldr	r2, [pc, #144]	; (8002200 <MX_GPIO_Init+0xc4>)
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <MX_GPIO_Init+0xc4>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <MX_GPIO_Init+0xc4>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <MX_GPIO_Init+0xc4>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <MX_GPIO_Init+0xc4>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <MX_GPIO_Init+0xc4>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <MX_GPIO_Init+0xc4>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_GPIO_Init+0xc4>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2120      	movs	r1, #32
 80021b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ba:	f002 ff0b 	bl	8004fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <MX_GPIO_Init+0xc8>)
 80021d6:	f002 fd53 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021da:	2320      	movs	r3, #32
 80021dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021de:	2301      	movs	r3, #1
 80021e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f002 fd44 	bl	8004c80 <HAL_GPIO_Init>

}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	48000800 	.word	0x48000800

08002208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800220c:	b672      	cpsid	i
}
 800220e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002210:	e7fe      	b.n	8002210 <Error_Handler+0x8>
	...

08002214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <HAL_MspInit+0x44>)
 800221c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_MspInit+0x44>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6613      	str	r3, [r2, #96]	; 0x60
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <HAL_MspInit+0x44>)
 8002228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_MspInit+0x44>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_MspInit+0x44>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_MspInit+0x44>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0ac      	sub	sp, #176	; 0xb0
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2288      	movs	r2, #136	; 0x88
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f005 fd23 	bl	8007cc8 <memset>
  if(hadc->Instance==ADC1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a4f      	ldr	r2, [pc, #316]	; (80023c4 <HAL_ADC_MspInit+0x168>)
 8002288:	4293      	cmp	r3, r2
 800228a:	f040 8096 	bne.w	80023ba <HAL_ADC_MspInit+0x15e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800228e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002292:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002294:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800229c:	2302      	movs	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80022a4:	2308      	movs	r3, #8
 80022a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80022a8:	2307      	movs	r3, #7
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022ac:	2302      	movs	r3, #2
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022b0:	2302      	movs	r3, #2
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80022b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 fd04 	bl	8005ccc <HAL_RCCEx_PeriphCLKConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 80022ca:	f7ff ff9d 	bl	8002208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022ce:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4a3d      	ldr	r2, [pc, #244]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 80022d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	4a37      	ldr	r2, [pc, #220]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f2:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230a:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <HAL_ADC_MspInit+0x16c>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002316:	231f      	movs	r3, #31
 8002318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800231c:	230b      	movs	r3, #11
 800231e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800232c:	4619      	mov	r1, r3
 800232e:	4827      	ldr	r0, [pc, #156]	; (80023cc <HAL_ADC_MspInit+0x170>)
 8002330:	f002 fca6 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8002334:	23c1      	movs	r3, #193	; 0xc1
 8002336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800233a:	230b      	movs	r3, #11
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002350:	f002 fc96 	bl	8004c80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 8002356:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <HAL_ADC_MspInit+0x178>)
 8002358:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 8002374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002378:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 800237c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002380:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 8002384:	2200      	movs	r2, #0
 8002386:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 800238a:	2200      	movs	r2, #0
 800238c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800238e:	4810      	ldr	r0, [pc, #64]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 8002390:	f002 fa00 	bl	8004794 <HAL_DMA_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_ADC_MspInit+0x142>
    {
      Error_Handler();
 800239a:	f7ff ff35 	bl	8002208 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 80023a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_ADC_MspInit+0x174>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2012      	movs	r0, #18
 80023b0:	f002 f9b9 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80023b4:	2012      	movs	r0, #18
 80023b6:	f002 f9d2 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	37b0      	adds	r7, #176	; 0xb0
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	50040000 	.word	0x50040000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	48000800 	.word	0x48000800
 80023d0:	20000310 	.word	0x20000310
 80023d4:	40020008 	.word	0x40020008

080023d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b0ac      	sub	sp, #176	; 0xb0
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2288      	movs	r2, #136	; 0x88
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f005 fc65 	bl	8007cc8 <memset>
  if(huart->Instance==USART2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a3a      	ldr	r2, [pc, #232]	; (80024ec <HAL_UART_MspInit+0x114>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d16c      	bne.n	80024e2 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002408:	2302      	movs	r3, #2
 800240a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800240c:	2300      	movs	r3, #0
 800240e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4618      	mov	r0, r3
 8002416:	f003 fc59 	bl	8005ccc <HAL_RCCEx_PeriphCLKConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002420:	f7ff fef2 	bl	8002208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002424:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <HAL_UART_MspInit+0x118>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	4a31      	ldr	r2, [pc, #196]	; (80024f0 <HAL_UART_MspInit+0x118>)
 800242a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242e:	6593      	str	r3, [r2, #88]	; 0x58
 8002430:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_UART_MspInit+0x118>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <HAL_UART_MspInit+0x118>)
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	4a2b      	ldr	r2, [pc, #172]	; (80024f0 <HAL_UART_MspInit+0x118>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_UART_MspInit+0x118>)
 800244a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002454:	230c      	movs	r3, #12
 8002456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800246c:	2307      	movs	r3, #7
 800246e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002476:	4619      	mov	r1, r3
 8002478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247c:	f002 fc00 	bl	8004c80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 8002482:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <HAL_UART_MspInit+0x120>)
 8002484:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002486:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 8002488:	2202      	movs	r2, #2
 800248a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024b6:	480f      	ldr	r0, [pc, #60]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 80024b8:	f002 f96c 	bl	8004794 <HAL_DMA_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80024c2:	f7ff fea1 	bl	8002208 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 80024ca:	671a      	str	r2, [r3, #112]	; 0x70
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_UART_MspInit+0x11c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	2026      	movs	r0, #38	; 0x26
 80024d8:	f002 f925 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024dc:	2026      	movs	r0, #38	; 0x26
 80024de:	f002 f93e 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	37b0      	adds	r7, #176	; 0xb0
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40004400 	.word	0x40004400
 80024f0:	40021000 	.word	0x40021000
 80024f4:	200003dc 	.word	0x200003dc
 80024f8:	4002006c 	.word	0x4002006c

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <NMI_Handler+0x4>

08002502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <HardFault_Handler+0x4>

08002508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <MemManage_Handler+0x4>

0800250e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <BusFault_Handler+0x4>

08002514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <UsageFault_Handler+0x4>

0800251a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002548:	f000 f988 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DMA1_Channel1_IRQHandler+0x10>)
 8002556:	f002 fab4 	bl	8004ac2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000310 	.word	0x20000310

08002564 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <DMA1_Channel6_IRQHandler+0x10>)
 800256a:	f002 faaa 	bl	8004ac2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200003dc 	.word	0x200003dc

08002578 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <ADC1_2_IRQHandler+0x10>)
 800257e:	f000 feb7 	bl	80032f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200002ac 	.word	0x200002ac

0800258c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <USART2_IRQHandler+0x10>)
 8002592:	f004 f939 	bl	8006808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000358 	.word	0x20000358

080025a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	return 1;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_kill>:

int _kill(int pid, int sig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025ba:	f005 fb5b 	bl	8007c74 <__errno>
 80025be:	4603      	mov	r3, r0
 80025c0:	2216      	movs	r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
	return -1;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_exit>:

void _exit (int status)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ffe7 	bl	80025b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025e2:	e7fe      	b.n	80025e2 <_exit+0x12>

080025e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e00a      	b.n	800260c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025f6:	f3af 8000 	nop.w
 80025fa:	4601      	mov	r1, r0
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	60ba      	str	r2, [r7, #8]
 8002602:	b2ca      	uxtb	r2, r1
 8002604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	dbf0      	blt.n	80025f6 <_read+0x12>
	}

return len;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e009      	b.n	8002644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60ba      	str	r2, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	dbf1      	blt.n	8002630 <_write+0x12>
	}
	return len;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_close>:

int _close(int file)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
	return -1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267e:	605a      	str	r2, [r3, #4]
	return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_isatty>:

int _isatty(int file)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	return 1;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
	return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <_sbrk+0x5c>)
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <_sbrk+0x60>)
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <_sbrk+0x64>)
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <_sbrk+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d207      	bcs.n	8002700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f0:	f005 fac0 	bl	8007c74 <__errno>
 80026f4:	4603      	mov	r3, r0
 80026f6:	220c      	movs	r2, #12
 80026f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	e009      	b.n	8002714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <_sbrk+0x64>)
 8002710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20018000 	.word	0x20018000
 8002720:	00000400 	.word	0x00000400
 8002724:	20000468 	.word	0x20000468
 8002728:	20000480 	.word	0x20000480

0800272c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <SystemInit+0x20>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <SystemInit+0x20>)
 8002738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002788 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002754:	f7ff ffea 	bl	800272c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002758:	480c      	ldr	r0, [pc, #48]	; (800278c <LoopForever+0x6>)
  ldr r1, =_edata
 800275a:	490d      	ldr	r1, [pc, #52]	; (8002790 <LoopForever+0xa>)
  ldr r2, =_sidata
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <LoopForever+0xe>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002770:	4c0a      	ldr	r4, [pc, #40]	; (800279c <LoopForever+0x16>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800277e:	f005 fa7f 	bl	8007c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002782:	f7ff f8f9 	bl	8001978 <main>

08002786 <LoopForever>:

LoopForever:
    b LoopForever
 8002786:	e7fe      	b.n	8002786 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002788:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800278c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002790:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002794:	0800d074 	.word	0x0800d074
  ldr r2, =_sbss
 8002798:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800279c:	20000480 	.word	0x20000480

080027a0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027a0:	e7fe      	b.n	80027a0 <ADC3_IRQHandler>
	...

080027a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_Init+0x3c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <HAL_Init+0x3c>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ba:	2003      	movs	r0, #3
 80027bc:	f001 ffa8 	bl	8004710 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c0:	2000      	movs	r0, #0
 80027c2:	f000 f80f 	bl	80027e4 <HAL_InitTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	71fb      	strb	r3, [r7, #7]
 80027d0:	e001      	b.n	80027d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027d2:	f7ff fd1f 	bl	8002214 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027d6:	79fb      	ldrb	r3, [r7, #7]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40022000 	.word	0x40022000

080027e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027f0:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_InitTick+0x6c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_InitTick+0x70>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_InitTick+0x6c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f001 ffb3 	bl	800477a <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d809      	bhi.n	8002834 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f001 ff7d 	bl	8004726 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_InitTick+0x74>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e007      	b.n	8002844 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e004      	b.n	8002844 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e001      	b.n	8002844 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000018 	.word	0x20000018
 8002854:	20000010 	.word	0x20000010
 8002858:	20000014 	.word	0x20000014

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000018 	.word	0x20000018
 8002880:	2000046c 	.word	0x2000046c

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2000046c 	.word	0x2000046c

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000018 	.word	0x20000018

080028e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3360      	adds	r3, #96	; 0x60
 800295e:	461a      	mov	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <LL_ADC_SetOffset+0x44>)
 800296e:	4013      	ands	r3, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	4313      	orrs	r3, r2
 800297c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002984:	bf00      	nop
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	03fff000 	.word	0x03fff000

08002994 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3360      	adds	r3, #96	; 0x60
 80029a2:	461a      	mov	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3360      	adds	r3, #96	; 0x60
 80029d0:	461a      	mov	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3330      	adds	r3, #48	; 0x30
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	4413      	add	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	211f      	movs	r1, #31
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	401a      	ands	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	f003 011f 	and.w	r1, r3, #31
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	431a      	orrs	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b087      	sub	sp, #28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	0e5b      	lsrs	r3, r3, #25
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	4413      	add	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	0d1b      	lsrs	r3, r3, #20
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2107      	movs	r1, #7
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	0d1b      	lsrs	r3, r3, #20
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0318 	and.w	r3, r3, #24
 8002b12:	4908      	ldr	r1, [pc, #32]	; (8002b34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b14:	40d9      	lsrs	r1, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	400b      	ands	r3, r1
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	0007ffff 	.word	0x0007ffff

08002b38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 031f 	and.w	r3, r3, #31
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6093      	str	r3, [r2, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba8:	d101      	bne.n	8002bae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf8:	d101      	bne.n	8002bfe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c48:	f043 0202 	orr.w	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <LL_ADC_IsEnabled+0x18>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <LL_ADC_IsEnabled+0x1a>
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d101      	bne.n	8002c9a <LL_ADC_IsDisableOngoing+0x18>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <LL_ADC_IsDisableOngoing+0x1a>
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cbc:	f043 0204 	orr.w	r2, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d101      	bne.n	8002ce8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d101      	bne.n	8002d0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e136      	b.n	8002fa4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fa89 	bl	800225c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff19 	bl	8002b94 <LL_ADC_IsDeepPowerDownEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff feff 	bl	8002b70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff34 	bl	8002be4 <LL_ADC_IsInternalRegulatorEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d115      	bne.n	8002dae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff18 	bl	8002bbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d8c:	4b87      	ldr	r3, [pc, #540]	; (8002fac <HAL_ADC_Init+0x290>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	4a87      	ldr	r2, [pc, #540]	; (8002fb0 <HAL_ADC_Init+0x294>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002da0:	e002      	b.n	8002da8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f9      	bne.n	8002da2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff16 	bl	8002be4 <LL_ADC_IsInternalRegulatorEnabled>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10d      	bne.n	8002dda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff76 	bl	8002cd0 <LL_ADC_REG_IsConversionOngoing>
 8002de4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 80cf 	bne.w	8002f92 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 80cb 	bne.w	8002f92 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e04:	f043 0202 	orr.w	r2, r3, #2
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff23 	bl	8002c5c <LL_ADC_IsEnabled>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d115      	bne.n	8002e48 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e1c:	4865      	ldr	r0, [pc, #404]	; (8002fb4 <HAL_ADC_Init+0x298>)
 8002e1e:	f7ff ff1d 	bl	8002c5c <LL_ADC_IsEnabled>
 8002e22:	4604      	mov	r4, r0
 8002e24:	4864      	ldr	r0, [pc, #400]	; (8002fb8 <HAL_ADC_Init+0x29c>)
 8002e26:	f7ff ff19 	bl	8002c5c <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	431c      	orrs	r4, r3
 8002e2e:	4863      	ldr	r0, [pc, #396]	; (8002fbc <HAL_ADC_Init+0x2a0>)
 8002e30:	f7ff ff14 	bl	8002c5c <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4323      	orrs	r3, r4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4619      	mov	r1, r3
 8002e42:	485f      	ldr	r0, [pc, #380]	; (8002fc0 <HAL_ADC_Init+0x2a4>)
 8002e44:	f7ff fd4e 	bl	80028e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7e5b      	ldrb	r3, [r3, #25]
 8002e4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d106      	bne.n	8002e84 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	045b      	lsls	r3, r3, #17
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_ADC_Init+0x2a8>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff09 	bl	8002cd0 <LL_ADC_REG_IsConversionOngoing>
 8002ebe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff16 	bl	8002cf6 <LL_ADC_INJ_IsConversionOngoing>
 8002eca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d13d      	bne.n	8002f4e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d13a      	bne.n	8002f4e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002edc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ef4:	f023 0302 	bic.w	r3, r3, #2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d118      	bne.n	8002f3e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	e007      	b.n	8002f4e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10c      	bne.n	8002f70 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f023 010f 	bic.w	r1, r3, #15
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	1e5a      	subs	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f6e:	e007      	b.n	8002f80 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 020f 	bic.w	r2, r2, #15
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f023 0303 	bic.w	r3, r3, #3
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
 8002f90:	e007      	b.n	8002fa2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3724      	adds	r7, #36	; 0x24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd90      	pop	{r4, r7, pc}
 8002fac:	20000010 	.word	0x20000010
 8002fb0:	053e2d63 	.word	0x053e2d63
 8002fb4:	50040000 	.word	0x50040000
 8002fb8:	50040100 	.word	0x50040100
 8002fbc:	50040200 	.word	0x50040200
 8002fc0:	50040300 	.word	0x50040300
 8002fc4:	fff0c007 	.word	0xfff0c007

08002fc8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd2:	4866      	ldr	r0, [pc, #408]	; (800316c <HAL_ADC_PollForConversion+0x1a4>)
 8002fd4:	f7ff fdb0 	bl	8002b38 <LL_ADC_GetMultimode>
 8002fd8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d102      	bne.n	8002fe8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	e02a      	b.n	800303e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d002      	beq.n	8002ffa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b09      	cmp	r3, #9
 8002ff8:	d111      	bne.n	800301e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0a4      	b.n	8003162 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003018:	2304      	movs	r3, #4
 800301a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800301c:	e00f      	b.n	800303e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800301e:	4853      	ldr	r0, [pc, #332]	; (800316c <HAL_ADC_PollForConversion+0x1a4>)
 8003020:	f7ff fd98 	bl	8002b54 <LL_ADC_GetMultiDMATransfer>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	f043 0220 	orr.w	r2, r3, #32
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e093      	b.n	8003162 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800303a:	2304      	movs	r3, #4
 800303c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800303e:	f7ff fc21 	bl	8002884 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003044:	e021      	b.n	800308a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d01d      	beq.n	800308a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800304e:	f7ff fc19 	bl	8002884 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <HAL_ADC_PollForConversion+0x9c>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d112      	bne.n	800308a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e06b      	b.n	8003162 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0d6      	beq.n	8003046 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fca4 	bl	80029f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01c      	beq.n	80030ee <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7e5b      	ldrb	r3, [r3, #25]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d118      	bne.n	80030ee <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d111      	bne.n	80030ee <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <HAL_ADC_PollForConversion+0x1a8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d002      	beq.n	80030fe <HAL_ADC_PollForConversion+0x136>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	e000      	b.n	8003100 <HAL_ADC_PollForConversion+0x138>
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_ADC_PollForConversion+0x1ac>)
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	4293      	cmp	r3, r2
 8003106:	d008      	beq.n	800311a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d002      	beq.n	800311a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b09      	cmp	r3, #9
 8003118:	d104      	bne.n	8003124 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e00c      	b.n	800313e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a11      	ldr	r2, [pc, #68]	; (8003170 <HAL_ADC_PollForConversion+0x1a8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d002      	beq.n	8003134 <HAL_ADC_PollForConversion+0x16c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	e000      	b.n	8003136 <HAL_ADC_PollForConversion+0x16e>
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_ADC_PollForConversion+0x1ac>)
 8003136:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d104      	bne.n	800314e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2208      	movs	r2, #8
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e008      	b.n	8003160 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	220c      	movs	r2, #12
 800315e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	50040300 	.word	0x50040300
 8003170:	50040100 	.word	0x50040100
 8003174:	50040000 	.word	0x50040000

08003178 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003184:	4853      	ldr	r0, [pc, #332]	; (80032d4 <HAL_ADC_Start_DMA+0x15c>)
 8003186:	f7ff fcd7 	bl	8002b38 <LL_ADC_GetMultimode>
 800318a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fd9d 	bl	8002cd0 <LL_ADC_REG_IsConversionOngoing>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	f040 8093 	bne.w	80032c4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_Start_DMA+0x34>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e08e      	b.n	80032ca <HAL_ADC_Start_DMA+0x152>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a47      	ldr	r2, [pc, #284]	; (80032d8 <HAL_ADC_Start_DMA+0x160>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d008      	beq.n	80031d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d002      	beq.n	80031d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d172      	bne.n	80032b6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 febf 	bl	8003f54 <ADC_Enable>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d165      	bne.n	80032ac <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a38      	ldr	r2, [pc, #224]	; (80032dc <HAL_ADC_Start_DMA+0x164>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d002      	beq.n	8003204 <HAL_ADC_Start_DMA+0x8c>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	e000      	b.n	8003206 <HAL_ADC_Start_DMA+0x8e>
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_ADC_Start_DMA+0x168>)
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	4293      	cmp	r3, r2
 800320c:	d002      	beq.n	8003214 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	f023 0206 	bic.w	r2, r3, #6
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	659a      	str	r2, [r3, #88]	; 0x58
 8003238:	e002      	b.n	8003240 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003244:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_ADC_Start_DMA+0x16c>)
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324c:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <HAL_ADC_Start_DMA+0x170>)
 800324e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	4a25      	ldr	r2, [pc, #148]	; (80032ec <HAL_ADC_Start_DMA+0x174>)
 8003256:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	221c      	movs	r2, #28
 800325e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0210 	orr.w	r2, r2, #16
 8003276:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3340      	adds	r3, #64	; 0x40
 8003292:	4619      	mov	r1, r3
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f001 fb34 	bl	8004904 <HAL_DMA_Start_IT>
 800329c:	4603      	mov	r3, r0
 800329e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fcff 	bl	8002ca8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032aa:	e00d      	b.n	80032c8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80032b4:	e008      	b.n	80032c8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032c2:	e001      	b.n	80032c8 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
 80032c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	50040300 	.word	0x50040300
 80032d8:	50040200 	.word	0x50040200
 80032dc:	50040100 	.word	0x50040100
 80032e0:	50040000 	.word	0x50040000
 80032e4:	0800411f 	.word	0x0800411f
 80032e8:	080041f7 	.word	0x080041f7
 80032ec:	08004213 	.word	0x08004213

080032f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80032f8:	2300      	movs	r3, #0
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800330c:	4882      	ldr	r0, [pc, #520]	; (8003518 <HAL_ADC_IRQHandler+0x228>)
 800330e:	f7ff fc13 	bl	8002b38 <LL_ADC_GetMultimode>
 8003312:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d017      	beq.n	800334e <HAL_ADC_IRQHandler+0x5e>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d012      	beq.n	800334e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f001 f85b 	bl	80043fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_ADC_IRQHandler+0x72>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8083 	beq.w	8003474 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d07d      	beq.n	8003474 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fb2e 	bl	80029f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d062      	beq.n	8003466 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a5d      	ldr	r2, [pc, #372]	; (800351c <HAL_ADC_IRQHandler+0x22c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d002      	beq.n	80033b0 <HAL_ADC_IRQHandler+0xc0>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	e000      	b.n	80033b2 <HAL_ADC_IRQHandler+0xc2>
 80033b0:	4b5b      	ldr	r3, [pc, #364]	; (8003520 <HAL_ADC_IRQHandler+0x230>)
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d008      	beq.n	80033cc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d002      	beq.n	80033cc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b09      	cmp	r3, #9
 80033ca:	d104      	bne.n	80033d6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	e00c      	b.n	80033f0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a50      	ldr	r2, [pc, #320]	; (800351c <HAL_ADC_IRQHandler+0x22c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d002      	beq.n	80033e6 <HAL_ADC_IRQHandler+0xf6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	e000      	b.n	80033e8 <HAL_ADC_IRQHandler+0xf8>
 80033e6:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <HAL_ADC_IRQHandler+0x230>)
 80033e8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d135      	bne.n	8003466 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b08      	cmp	r3, #8
 8003406:	d12e      	bne.n	8003466 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fc5f 	bl	8002cd0 <LL_ADC_REG_IsConversionOngoing>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d11a      	bne.n	800344e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 020c 	bic.w	r2, r2, #12
 8003426:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d112      	bne.n	8003466 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
 800344c:	e00b      	b.n	8003466 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f95c 	bl	8003724 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	220c      	movs	r2, #12
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d004      	beq.n	8003488 <HAL_ADC_IRQHandler+0x198>
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 809f 	beq.w	80035d2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8099 	beq.w	80035d2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fad9 	bl	8002a74 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034c2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fa94 	bl	80029f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034ce:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <HAL_ADC_IRQHandler+0x22c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d002      	beq.n	80034e0 <HAL_ADC_IRQHandler+0x1f0>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e000      	b.n	80034e2 <HAL_ADC_IRQHandler+0x1f2>
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_ADC_IRQHandler+0x230>)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d008      	beq.n	80034fc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d002      	beq.n	80034fc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b07      	cmp	r3, #7
 80034fa:	d104      	bne.n	8003506 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	623b      	str	r3, [r7, #32]
 8003504:	e013      	b.n	800352e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_ADC_IRQHandler+0x22c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_ADC_IRQHandler+0x234>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	e007      	b.n	8003526 <HAL_ADC_IRQHandler+0x236>
 8003516:	bf00      	nop
 8003518:	50040300 	.word	0x50040300
 800351c:	50040100 	.word	0x50040100
 8003520:	50040000 	.word	0x50040000
 8003524:	4b7d      	ldr	r3, [pc, #500]	; (800371c <HAL_ADC_IRQHandler+0x42c>)
 8003526:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d047      	beq.n	80035c4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_ADC_IRQHandler+0x25e>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03f      	beq.n	80035c4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800354a:	2b00      	cmp	r3, #0
 800354c:	d13a      	bne.n	80035c4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d133      	bne.n	80035c4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d12e      	bne.n	80035c4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fbc3 	bl	8002cf6 <LL_ADC_INJ_IsConversionOngoing>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d11a      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003584:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d112      	bne.n	80035c4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	f043 0201 	orr.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
 80035aa:	e00b      	b.n	80035c4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f043 0210 	orr.w	r2, r3, #16
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fef1 	bl	80043ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2260      	movs	r2, #96	; 0x60
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d011      	beq.n	8003600 <HAL_ADC_IRQHandler+0x310>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00c      	beq.n	8003600 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8aa 	bl	800374c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_ADC_IRQHandler+0x340>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fed7 	bl	80043d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d012      	beq.n	8003660 <HAL_ADC_IRQHandler+0x370>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fec9 	bl	80043e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d036      	beq.n	80036d8 <HAL_ADC_IRQHandler+0x3e8>
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d031      	beq.n	80036d8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800367c:	2301      	movs	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
 8003680:	e014      	b.n	80036ac <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003688:	4825      	ldr	r0, [pc, #148]	; (8003720 <HAL_ADC_IRQHandler+0x430>)
 800368a:	f7ff fa63 	bl	8002b54 <LL_ADC_GetMultiDMATransfer>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003694:	2301      	movs	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	e008      	b.n	80036ac <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036a8:	2301      	movs	r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10e      	bne.n	80036d0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f848 	bl	8003760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2210      	movs	r2, #16
 80036d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <HAL_ADC_IRQHandler+0x424>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f043 0208 	orr.w	r2, r3, #8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800370c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fe56 	bl	80043c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003714:	bf00      	nop
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	50040000 	.word	0x50040000
 8003720:	50040300 	.word	0x50040300

08003724 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b0b6      	sub	sp, #216	; 0xd8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x22>
 8003792:	2302      	movs	r3, #2
 8003794:	e3c7      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x7b2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fa94 	bl	8002cd0 <LL_ADC_REG_IsConversionOngoing>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 83a8 	bne.w	8003f00 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d824      	bhi.n	8003802 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	3b02      	subs	r3, #2
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d81b      	bhi.n	80037fa <HAL_ADC_ConfigChannel+0x86>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_ADC_ConfigChannel+0x54>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e1 	.word	0x080037e1
 80037d0:	080037e9 	.word	0x080037e9
 80037d4:	080037f1 	.word	0x080037f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	220c      	movs	r2, #12
 80037dc:	605a      	str	r2, [r3, #4]
          break;
 80037de:	e011      	b.n	8003804 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2212      	movs	r2, #18
 80037e4:	605a      	str	r2, [r3, #4]
          break;
 80037e6:	e00d      	b.n	8003804 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2218      	movs	r2, #24
 80037ec:	605a      	str	r2, [r3, #4]
          break;
 80037ee:	e009      	b.n	8003804 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f6:	605a      	str	r2, [r3, #4]
          break;
 80037f8:	e004      	b.n	8003804 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2206      	movs	r2, #6
 80037fe:	605a      	str	r2, [r3, #4]
          break;
 8003800:	e000      	b.n	8003804 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003802:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	f7ff f903 	bl	8002a1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fa58 	bl	8002cd0 <LL_ADC_REG_IsConversionOngoing>
 8003820:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fa64 	bl	8002cf6 <LL_ADC_INJ_IsConversionOngoing>
 800382e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003832:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 81a6 	bne.w	8003b88 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800383c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 81a1 	bne.w	8003b88 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	461a      	mov	r2, r3
 8003854:	f7ff f921 	bl	8002a9a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	08db      	lsrs	r3, r3, #3
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d00a      	beq.n	8003890 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6919      	ldr	r1, [r3, #16]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800388a:	f7ff f85f 	bl	800294c <LL_ADC_SetOffset>
 800388e:	e17b      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f87c 	bl	8002994 <LL_ADC_GetOffsetChannel>
 800389c:	4603      	mov	r3, r0
 800389e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x148>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff f871 	bl	8002994 <LL_ADC_GetOffsetChannel>
 80038b2:	4603      	mov	r3, r0
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	f003 021f 	and.w	r2, r3, #31
 80038ba:	e01e      	b.n	80038fa <HAL_ADC_ConfigChannel+0x186>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f866 	bl	8002994 <LL_ADC_GetOffsetChannel>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80038ea:	2320      	movs	r3, #32
 80038ec:	e004      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80038ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x19e>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	0e9b      	lsrs	r3, r3, #26
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	e018      	b.n	8003944 <HAL_ADC_ConfigChannel+0x1d0>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800392a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800392e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003936:	2320      	movs	r3, #32
 8003938:	e004      	b.n	8003944 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800393a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003944:	429a      	cmp	r2, r3
 8003946:	d106      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f835 	bl	80029c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f819 	bl	8002994 <LL_ADC_GetOffsetChannel>
 8003962:	4603      	mov	r3, r0
 8003964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x20e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff f80e 	bl	8002994 <LL_ADC_GetOffsetChannel>
 8003978:	4603      	mov	r3, r0
 800397a:	0e9b      	lsrs	r3, r3, #26
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	e01e      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x24c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f803 	bl	8002994 <LL_ADC_GetOffsetChannel>
 800398e:	4603      	mov	r3, r0
 8003990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80039b0:	2320      	movs	r3, #32
 80039b2:	e004      	b.n	80039be <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80039b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x264>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0e9b      	lsrs	r3, r3, #26
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	e018      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x296>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e004      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d106      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2101      	movs	r1, #1
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe ffd2 	bl	80029c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe ffb6 	bl	8002994 <LL_ADC_GetOffsetChannel>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x2d4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe ffab 	bl	8002994 <LL_ADC_GetOffsetChannel>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	0e9b      	lsrs	r3, r3, #26
 8003a42:	f003 021f 	and.w	r2, r3, #31
 8003a46:	e01e      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x312>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe ffa0 	bl	8002994 <LL_ADC_GetOffsetChannel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a76:	2320      	movs	r3, #32
 8003a78:	e004      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x32a>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0e9b      	lsrs	r3, r3, #26
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	e016      	b.n	8003acc <HAL_ADC_ConfigChannel+0x358>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003abe:	2320      	movs	r3, #32
 8003ac0:	e004      	b.n	8003acc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d106      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe ff71 	bl	80029c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe ff55 	bl	8002994 <LL_ADC_GetOffsetChannel>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x396>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2103      	movs	r1, #3
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe ff4a 	bl	8002994 <LL_ADC_GetOffsetChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	0e9b      	lsrs	r3, r3, #26
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	e017      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x3c6>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2103      	movs	r1, #3
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe ff3f 	bl	8002994 <LL_ADC_GetOffsetChannel>
 8003b16:	4603      	mov	r3, r0
 8003b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e003      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x3de>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	0e9b      	lsrs	r3, r3, #26
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	e011      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x402>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	e003      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d106      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2103      	movs	r1, #3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe ff1c 	bl	80029c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f865 	bl	8002c5c <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 813f 	bne.w	8003e18 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f7fe ffa2 	bl	8002af0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a8e      	ldr	r2, [pc, #568]	; (8003dec <HAL_ADC_ConfigChannel+0x678>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	f040 8130 	bne.w	8003e18 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x46c>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0e9b      	lsrs	r3, r3, #26
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	bf94      	ite	ls
 8003bd8:	2301      	movls	r3, #1
 8003bda:	2300      	movhi	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e019      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x4a0>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e003      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2b09      	cmp	r3, #9
 8003c0c:	bf94      	ite	ls
 8003c0e:	2301      	movls	r3, #1
 8003c10:	2300      	movhi	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d079      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x4c0>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	069b      	lsls	r3, r3, #26
 8003c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c32:	e015      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x4ec>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	e003      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	069b      	lsls	r3, r3, #26
 8003c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x50c>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	3301      	adds	r3, #1
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	e017      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x53c>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003c98:	2320      	movs	r3, #32
 8003c9a:	e003      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	2101      	movs	r1, #1
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	ea42 0103 	orr.w	r1, r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x562>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0e9b      	lsrs	r3, r3, #26
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	051b      	lsls	r3, r3, #20
 8003cd4:	e018      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x594>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	fa93 f3a3 	rbit	r3, r3
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	e003      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	e080      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d107      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x5b4>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0e9b      	lsrs	r3, r3, #26
 8003d1e:	3301      	adds	r3, #1
 8003d20:	069b      	lsls	r3, r3, #26
 8003d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d26:	e015      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x5e0>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e003      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	069b      	lsls	r3, r3, #26
 8003d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x600>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	3301      	adds	r3, #1
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	e017      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x630>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	61fb      	str	r3, [r7, #28]
  return result;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e003      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	ea42 0103 	orr.w	r1, r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x65c>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0e9b      	lsrs	r3, r3, #26
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3b1e      	subs	r3, #30
 8003dc8:	051b      	lsls	r3, r3, #20
 8003dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dce:	e01d      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x698>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	613b      	str	r3, [r7, #16]
  return result;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003de8:	2320      	movs	r3, #32
 8003dea:	e005      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x684>
 8003dec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f003 021f 	and.w	r2, r3, #31
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	3b1e      	subs	r3, #30
 8003e06:	051b      	lsls	r3, r3, #20
 8003e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	6892      	ldr	r2, [r2, #8]
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7fe fe41 	bl	8002a9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b44      	ldr	r3, [pc, #272]	; (8003f30 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d07a      	beq.n	8003f1a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e24:	4843      	ldr	r0, [pc, #268]	; (8003f34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e26:	f7fe fd83 	bl	8002930 <LL_ADC_GetCommonPathInternalCh>
 8003e2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a41      	ldr	r2, [pc, #260]	; (8003f38 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d12c      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d126      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3c      	ldr	r2, [pc, #240]	; (8003f3c <HAL_ADC_ConfigChannel+0x7c8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x6e4>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d15d      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e60:	4619      	mov	r1, r3
 8003e62:	4834      	ldr	r0, [pc, #208]	; (8003f34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e64:	f7fe fd51 	bl	800290a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_ADC_ConfigChannel+0x7d0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	4a36      	ldr	r2, [pc, #216]	; (8003f48 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e82:	e002      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f9      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e90:	e040      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <HAL_ADC_ConfigChannel+0x7d8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d118      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x75a>
 8003e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d112      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <HAL_ADC_ConfigChannel+0x7c8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x748>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <HAL_ADC_ConfigChannel+0x7cc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d12d      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	481b      	ldr	r0, [pc, #108]	; (8003f34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ec8:	f7fe fd1f 	bl	800290a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ecc:	e024      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d120      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11a      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <HAL_ADC_ConfigChannel+0x7c8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d115      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	480e      	ldr	r0, [pc, #56]	; (8003f34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003efa:	f7fe fd06 	bl	800290a <LL_ADC_SetCommonPathInternalCh>
 8003efe:	e00c      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f12:	e002      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f14:	bf00      	nop
 8003f16:	e000      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	37d8      	adds	r7, #216	; 0xd8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	80080000 	.word	0x80080000
 8003f34:	50040300 	.word	0x50040300
 8003f38:	c7520000 	.word	0xc7520000
 8003f3c:	50040000 	.word	0x50040000
 8003f40:	50040200 	.word	0x50040200
 8003f44:	20000010 	.word	0x20000010
 8003f48:	053e2d63 	.word	0x053e2d63
 8003f4c:	cb840000 	.word	0xcb840000
 8003f50:	80000001 	.word	0x80000001

08003f54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe fe79 	bl	8002c5c <LL_ADC_IsEnabled>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d169      	bne.n	8004044 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <ADC_Enable+0xfc>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f043 0210 	orr.w	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	f043 0201 	orr.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e055      	b.n	8004046 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fe34 	bl	8002c0c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003fa4:	482b      	ldr	r0, [pc, #172]	; (8004054 <ADC_Enable+0x100>)
 8003fa6:	f7fe fcc3 	bl	8002930 <LL_ADC_GetCommonPathInternalCh>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fb4:	4b28      	ldr	r3, [pc, #160]	; (8004058 <ADC_Enable+0x104>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	4a28      	ldr	r2, [pc, #160]	; (800405c <ADC_Enable+0x108>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	099b      	lsrs	r3, r3, #6
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003fce:	e002      	b.n	8003fd6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f9      	bne.n	8003fd0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fdc:	f7fe fc52 	bl	8002884 <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fe2:	e028      	b.n	8004036 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fe37 	bl	8002c5c <LL_ADC_IsEnabled>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe fe07 	bl	8002c0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ffe:	f7fe fc41 	bl	8002884 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d914      	bls.n	8004036 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d00d      	beq.n	8004036 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f043 0210 	orr.w	r2, r3, #16
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	f043 0201 	orr.w	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e007      	b.n	8004046 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d1cf      	bne.n	8003fe4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	8000003f 	.word	0x8000003f
 8004054:	50040300 	.word	0x50040300
 8004058:	20000010 	.word	0x20000010
 800405c:	053e2d63 	.word	0x053e2d63

08004060 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fe08 	bl	8002c82 <LL_ADC_IsDisableOngoing>
 8004072:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fdef 	bl	8002c5c <LL_ADC_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d047      	beq.n	8004114 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d144      	bne.n	8004114 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030d 	and.w	r3, r3, #13
 8004094:	2b01      	cmp	r3, #1
 8004096:	d10c      	bne.n	80040b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fdc9 	bl	8002c34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2203      	movs	r2, #3
 80040a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040aa:	f7fe fbeb 	bl	8002884 <HAL_GetTick>
 80040ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040b0:	e029      	b.n	8004106 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0210 	orr.w	r2, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e023      	b.n	8004116 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040ce:	f7fe fbd9 	bl	8002884 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d914      	bls.n	8004106 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f043 0210 	orr.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	f043 0201 	orr.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e007      	b.n	8004116 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1dc      	bne.n	80040ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004134:	2b00      	cmp	r3, #0
 8004136:	d14b      	bne.n	80041d0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d021      	beq.n	8004196 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fc4d 	bl	80029f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d032      	beq.n	80041c8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d12b      	bne.n	80041c8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d11f      	bne.n	80041c8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
 8004194:	e018      	b.n	80041c8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d111      	bne.n	80041c8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff faab 	bl	8003724 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041ce:	e00e      	b.n	80041ee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff fabf 	bl	8003760 <HAL_ADC_ErrorCallback>
}
 80041e2:	e004      	b.n	80041ee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff fa97 	bl	8003738 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	f043 0204 	orr.w	r2, r3, #4
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff fa91 	bl	8003760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <LL_ADC_IsEnabled>:
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <LL_ADC_IsEnabled+0x18>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <LL_ADC_IsEnabled+0x1a>
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_ADC_StartCalibration>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800427e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004288:	4313      	orrs	r3, r2
 800428a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_ADC_IsCalibrationOnGoing>:
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b2:	d101      	bne.n	80042b8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d101      	bne.n	80042de <LL_ADC_REG_IsConversionOngoing+0x18>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_ADCEx_Calibration_Start+0x1c>
 8004304:	2302      	movs	r3, #2
 8004306:	e04d      	b.n	80043a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff fea5 	bl	8004060 <ADC_Disable>
 8004316:	4603      	mov	r3, r0
 8004318:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d136      	bne.n	800438e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004328:	f023 0302 	bic.w	r3, r3, #2
 800432c:	f043 0202 	orr.w	r2, r3, #2
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff96 	bl	800426c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004340:	e014      	b.n	800436c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3301      	adds	r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800434e:	d30d      	bcc.n	800436c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	f023 0312 	bic.w	r3, r3, #18
 8004358:	f043 0210 	orr.w	r2, r3, #16
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e01b      	b.n	80043a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ff94 	bl	800429e <LL_ADC_IsCalibrationOnGoing>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e2      	bne.n	8004342 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f023 0303 	bic.w	r3, r3, #3
 8004384:	f043 0201 	orr.w	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
 800438c:	e005      	b.n	800439a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f043 0210 	orr.w	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b09f      	sub	sp, #124	; 0x7c
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800442a:	2302      	movs	r3, #2
 800442c:	e093      	b.n	8004556 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004436:	2300      	movs	r3, #0
 8004438:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800443a:	2300      	movs	r3, #0
 800443c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a47      	ldr	r2, [pc, #284]	; (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d102      	bne.n	800444e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004448:	4b46      	ldr	r3, [pc, #280]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	e001      	b.n	8004452 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e072      	b.n	8004556 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff27 	bl	80042c6 <LL_ADC_REG_IsConversionOngoing>
 8004478:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ff21 	bl	80042c6 <LL_ADC_REG_IsConversionOngoing>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d154      	bne.n	8004534 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800448a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800448c:	2b00      	cmp	r3, #0
 800448e:	d151      	bne.n	8004534 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004490:	4b35      	ldr	r3, [pc, #212]	; (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004492:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02c      	beq.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800449c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044ae:	035b      	lsls	r3, r3, #13
 80044b0:	430b      	orrs	r3, r1
 80044b2:	431a      	orrs	r2, r3
 80044b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044b8:	4829      	ldr	r0, [pc, #164]	; (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80044ba:	f7ff fec4 	bl	8004246 <LL_ADC_IsEnabled>
 80044be:	4604      	mov	r4, r0
 80044c0:	4828      	ldr	r0, [pc, #160]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80044c2:	f7ff fec0 	bl	8004246 <LL_ADC_IsEnabled>
 80044c6:	4603      	mov	r3, r0
 80044c8:	431c      	orrs	r4, r3
 80044ca:	4828      	ldr	r0, [pc, #160]	; (800456c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80044cc:	f7ff febb 	bl	8004246 <LL_ADC_IsEnabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4323      	orrs	r3, r4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d137      	bne.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044e0:	f023 030f 	bic.w	r3, r3, #15
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	6811      	ldr	r1, [r2, #0]
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	6892      	ldr	r2, [r2, #8]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044f4:	e028      	b.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004500:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004502:	4817      	ldr	r0, [pc, #92]	; (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004504:	f7ff fe9f 	bl	8004246 <LL_ADC_IsEnabled>
 8004508:	4604      	mov	r4, r0
 800450a:	4816      	ldr	r0, [pc, #88]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800450c:	f7ff fe9b 	bl	8004246 <LL_ADC_IsEnabled>
 8004510:	4603      	mov	r3, r0
 8004512:	431c      	orrs	r4, r3
 8004514:	4815      	ldr	r0, [pc, #84]	; (800456c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004516:	f7ff fe96 	bl	8004246 <LL_ADC_IsEnabled>
 800451a:	4603      	mov	r3, r0
 800451c:	4323      	orrs	r3, r4
 800451e:	2b00      	cmp	r3, #0
 8004520:	d112      	bne.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800452a:	f023 030f 	bic.w	r3, r3, #15
 800452e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004530:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004532:	e009      	b.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004546:	e000      	b.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004548:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004552:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004556:	4618      	mov	r0, r3
 8004558:	377c      	adds	r7, #124	; 0x7c
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	bf00      	nop
 8004560:	50040000 	.word	0x50040000
 8004564:	50040100 	.word	0x50040100
 8004568:	50040300 	.word	0x50040300
 800456c:	50040200 	.word	0x50040200

08004570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800459c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045a2:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <__NVIC_SetPriorityGrouping+0x44>)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	60d3      	str	r3, [r2, #12]
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <__NVIC_GetPriorityGrouping+0x18>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	f003 0307 	and.w	r3, r3, #7
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db0b      	blt.n	80045fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	f003 021f 	and.w	r2, r3, #31
 80045ec:	4907      	ldr	r1, [pc, #28]	; (800460c <__NVIC_EnableIRQ+0x38>)
 80045ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2001      	movs	r0, #1
 80045f6:	fa00 f202 	lsl.w	r2, r0, r2
 80045fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000e100 	.word	0xe000e100

08004610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	6039      	str	r1, [r7, #0]
 800461a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db0a      	blt.n	800463a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	490c      	ldr	r1, [pc, #48]	; (800465c <__NVIC_SetPriority+0x4c>)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	0112      	lsls	r2, r2, #4
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	440b      	add	r3, r1
 8004634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004638:	e00a      	b.n	8004650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4908      	ldr	r1, [pc, #32]	; (8004660 <__NVIC_SetPriority+0x50>)
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	3b04      	subs	r3, #4
 8004648:	0112      	lsls	r2, r2, #4
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	440b      	add	r3, r1
 800464e:	761a      	strb	r2, [r3, #24]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000e100 	.word	0xe000e100
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	; 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f1c3 0307 	rsb	r3, r3, #7
 800467e:	2b04      	cmp	r3, #4
 8004680:	bf28      	it	cs
 8004682:	2304      	movcs	r3, #4
 8004684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3304      	adds	r3, #4
 800468a:	2b06      	cmp	r3, #6
 800468c:	d902      	bls.n	8004694 <NVIC_EncodePriority+0x30>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3b03      	subs	r3, #3
 8004692:	e000      	b.n	8004696 <NVIC_EncodePriority+0x32>
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004698:	f04f 32ff 	mov.w	r2, #4294967295
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43da      	mvns	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	401a      	ands	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046ac:	f04f 31ff 	mov.w	r1, #4294967295
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	43d9      	mvns	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046bc:	4313      	orrs	r3, r2
         );
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3724      	adds	r7, #36	; 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046dc:	d301      	bcc.n	80046e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046de:	2301      	movs	r3, #1
 80046e0:	e00f      	b.n	8004702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <SysTick_Config+0x40>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ea:	210f      	movs	r1, #15
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	f7ff ff8e 	bl	8004610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <SysTick_Config+0x40>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046fa:	4b04      	ldr	r3, [pc, #16]	; (800470c <SysTick_Config+0x40>)
 80046fc:	2207      	movs	r2, #7
 80046fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	e000e010 	.word	0xe000e010

08004710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff29 	bl	8004570 <__NVIC_SetPriorityGrouping>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	4603      	mov	r3, r0
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004738:	f7ff ff3e 	bl	80045b8 <__NVIC_GetPriorityGrouping>
 800473c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	6978      	ldr	r0, [r7, #20]
 8004744:	f7ff ff8e 	bl	8004664 <NVIC_EncodePriority>
 8004748:	4602      	mov	r2, r0
 800474a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ff5d 	bl	8004610 <__NVIC_SetPriority>
}
 8004756:	bf00      	nop
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	4603      	mov	r3, r0
 8004766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff31 	bl	80045d4 <__NVIC_EnableIRQ>
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff ffa2 	bl	80046cc <SysTick_Config>
 8004788:	4603      	mov	r3, r0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e098      	b.n	80048d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b4d      	ldr	r3, [pc, #308]	; (80048e4 <HAL_DMA_Init+0x150>)
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d80f      	bhi.n	80047d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <HAL_DMA_Init+0x154>)
 80047ba:	4413      	add	r3, r2
 80047bc:	4a4b      	ldr	r2, [pc, #300]	; (80048ec <HAL_DMA_Init+0x158>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	091b      	lsrs	r3, r3, #4
 80047c4:	009a      	lsls	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a48      	ldr	r2, [pc, #288]	; (80048f0 <HAL_DMA_Init+0x15c>)
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40
 80047d0:	e00e      	b.n	80047f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <HAL_DMA_Init+0x160>)
 80047da:	4413      	add	r3, r2
 80047dc:	4a43      	ldr	r2, [pc, #268]	; (80048ec <HAL_DMA_Init+0x158>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	009a      	lsls	r2, r3, #2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a42      	ldr	r2, [pc, #264]	; (80048f8 <HAL_DMA_Init+0x164>)
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484a:	d039      	beq.n	80048c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <HAL_DMA_Init+0x15c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d11a      	bne.n	800488c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004856:	4b29      	ldr	r3, [pc, #164]	; (80048fc <HAL_DMA_Init+0x168>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f003 031c 	and.w	r3, r3, #28
 8004862:	210f      	movs	r1, #15
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	4924      	ldr	r1, [pc, #144]	; (80048fc <HAL_DMA_Init+0x168>)
 800486c:	4013      	ands	r3, r2
 800486e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004870:	4b22      	ldr	r3, [pc, #136]	; (80048fc <HAL_DMA_Init+0x168>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	f003 031c 	and.w	r3, r3, #28
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	491d      	ldr	r1, [pc, #116]	; (80048fc <HAL_DMA_Init+0x168>)
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]
 800488a:	e019      	b.n	80048c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800488c:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <HAL_DMA_Init+0x16c>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	f003 031c 	and.w	r3, r3, #28
 8004898:	210f      	movs	r1, #15
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	4917      	ldr	r1, [pc, #92]	; (8004900 <HAL_DMA_Init+0x16c>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <HAL_DMA_Init+0x16c>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6859      	ldr	r1, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	f003 031c 	and.w	r3, r3, #28
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	4911      	ldr	r1, [pc, #68]	; (8004900 <HAL_DMA_Init+0x16c>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40020407 	.word	0x40020407
 80048e8:	bffdfff8 	.word	0xbffdfff8
 80048ec:	cccccccd 	.word	0xcccccccd
 80048f0:	40020000 	.word	0x40020000
 80048f4:	bffdfbf8 	.word	0xbffdfbf8
 80048f8:	40020400 	.word	0x40020400
 80048fc:	400200a8 	.word	0x400200a8
 8004900:	400204a8 	.word	0x400204a8

08004904 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_DMA_Start_IT+0x20>
 8004920:	2302      	movs	r3, #2
 8004922:	e04b      	b.n	80049bc <HAL_DMA_Start_IT+0xb8>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d13a      	bne.n	80049ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f95f 	bl	8004c20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 020e 	orr.w	r2, r2, #14
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e00f      	b.n	800499c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0204 	bic.w	r2, r2, #4
 800498a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 020a 	orr.w	r2, r2, #10
 800499a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e005      	b.n	80049ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
 80049b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d008      	beq.n	80049ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2204      	movs	r2, #4
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e022      	b.n	8004a34 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 020e 	bic.w	r2, r2, #14
 80049fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f003 021c 	and.w	r2, r3, #28
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a20:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d005      	beq.n	8004a64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
 8004a62:	e029      	b.n	8004ab8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 020e 	bic.w	r2, r2, #14
 8004a72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	f003 021c 	and.w	r2, r3, #28
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f202 	lsl.w	r2, r1, r2
 8004a96:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
    }
  }
  return status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f003 031c 	and.w	r3, r3, #28
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d026      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7a>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d021      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d107      	bne.n	8004b16 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0204 	bic.w	r2, r2, #4
 8004b14:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f003 021c 	and.w	r2, r3, #28
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2104      	movs	r1, #4
 8004b24:	fa01 f202 	lsl.w	r2, r1, r2
 8004b28:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d071      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004b3a:	e06c      	b.n	8004c16 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	f003 031c 	and.w	r3, r3, #28
 8004b44:	2202      	movs	r2, #2
 8004b46:	409a      	lsls	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02e      	beq.n	8004bae <HAL_DMA_IRQHandler+0xec>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d029      	beq.n	8004bae <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 020a 	bic.w	r2, r2, #10
 8004b76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	f003 021c 	and.w	r2, r3, #28
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d038      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004bac:	e033      	b.n	8004c16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f003 031c 	and.w	r3, r3, #28
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d02a      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x156>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d025      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 020e 	bic.w	r2, r2, #14
 8004bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be0:	f003 021c 	and.w	r2, r3, #28
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2101      	movs	r1, #1
 8004bea:	fa01 f202 	lsl.w	r2, r1, r2
 8004bee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d004      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
}
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f003 021c 	and.w	r2, r3, #28
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d108      	bne.n	8004c64 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c62:	e007      	b.n	8004c74 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c8e:	e17f      	b.n	8004f90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8171 	beq.w	8004f8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d005      	beq.n	8004cc0 <HAL_GPIO_Init+0x40>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d130      	bne.n	8004d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	2203      	movs	r2, #3
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4013      	ands	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 0201 	and.w	r2, r3, #1
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d118      	bne.n	8004d60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004d34:	2201      	movs	r2, #1
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	f003 0201 	and.w	r2, r3, #1
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d017      	beq.n	8004d9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	2203      	movs	r2, #3
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4013      	ands	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d123      	bne.n	8004df0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	08da      	lsrs	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3208      	adds	r2, #8
 8004db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	220f      	movs	r2, #15
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	08da      	lsrs	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3208      	adds	r2, #8
 8004dea:	6939      	ldr	r1, [r7, #16]
 8004dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 0203 	and.w	r2, r3, #3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80ac 	beq.w	8004f8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e32:	4b5f      	ldr	r3, [pc, #380]	; (8004fb0 <HAL_GPIO_Init+0x330>)
 8004e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e36:	4a5e      	ldr	r2, [pc, #376]	; (8004fb0 <HAL_GPIO_Init+0x330>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8004e3e:	4b5c      	ldr	r3, [pc, #368]	; (8004fb0 <HAL_GPIO_Init+0x330>)
 8004e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e4a:	4a5a      	ldr	r2, [pc, #360]	; (8004fb4 <HAL_GPIO_Init+0x334>)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	220f      	movs	r2, #15
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e74:	d025      	beq.n	8004ec2 <HAL_GPIO_Init+0x242>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a4f      	ldr	r2, [pc, #316]	; (8004fb8 <HAL_GPIO_Init+0x338>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01f      	beq.n	8004ebe <HAL_GPIO_Init+0x23e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a4e      	ldr	r2, [pc, #312]	; (8004fbc <HAL_GPIO_Init+0x33c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d019      	beq.n	8004eba <HAL_GPIO_Init+0x23a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a4d      	ldr	r2, [pc, #308]	; (8004fc0 <HAL_GPIO_Init+0x340>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <HAL_GPIO_Init+0x236>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a4c      	ldr	r2, [pc, #304]	; (8004fc4 <HAL_GPIO_Init+0x344>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00d      	beq.n	8004eb2 <HAL_GPIO_Init+0x232>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <HAL_GPIO_Init+0x348>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <HAL_GPIO_Init+0x22e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a4a      	ldr	r2, [pc, #296]	; (8004fcc <HAL_GPIO_Init+0x34c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <HAL_GPIO_Init+0x22a>
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	e00c      	b.n	8004ec4 <HAL_GPIO_Init+0x244>
 8004eaa:	2307      	movs	r3, #7
 8004eac:	e00a      	b.n	8004ec4 <HAL_GPIO_Init+0x244>
 8004eae:	2305      	movs	r3, #5
 8004eb0:	e008      	b.n	8004ec4 <HAL_GPIO_Init+0x244>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e006      	b.n	8004ec4 <HAL_GPIO_Init+0x244>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e004      	b.n	8004ec4 <HAL_GPIO_Init+0x244>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e002      	b.n	8004ec4 <HAL_GPIO_Init+0x244>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_GPIO_Init+0x244>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	f002 0203 	and.w	r2, r2, #3
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	4093      	lsls	r3, r2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ed4:	4937      	ldr	r1, [pc, #220]	; (8004fb4 <HAL_GPIO_Init+0x334>)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	3302      	adds	r3, #2
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <HAL_GPIO_Init+0x350>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f06:	4a32      	ldr	r2, [pc, #200]	; (8004fd0 <HAL_GPIO_Init+0x350>)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f0c:	4b30      	ldr	r3, [pc, #192]	; (8004fd0 <HAL_GPIO_Init+0x350>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <HAL_GPIO_Init+0x350>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f36:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <HAL_GPIO_Init+0x350>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4013      	ands	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <HAL_GPIO_Init+0x350>)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f60:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_GPIO_Init+0x350>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f84:	4a12      	ldr	r2, [pc, #72]	; (8004fd0 <HAL_GPIO_Init+0x350>)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f47f ae78 	bne.w	8004c90 <HAL_GPIO_Init+0x10>
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	48000400 	.word	0x48000400
 8004fbc:	48000800 	.word	0x48000800
 8004fc0:	48000c00 	.word	0x48000c00
 8004fc4:	48001000 	.word	0x48001000
 8004fc8:	48001400 	.word	0x48001400
 8004fcc:	48001800 	.word	0x48001800
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	807b      	strh	r3, [r7, #2]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fe4:	787b      	ldrb	r3, [r7, #1]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ff0:	e002      	b.n	8004ff8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <HAL_PWREx_GetVoltageRange+0x18>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40007000 	.word	0x40007000

08005020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502e:	d130      	bne.n	8005092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005030:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503c:	d038      	beq.n	80050b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005046:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800504c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800504e:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2232      	movs	r2, #50	; 0x32
 8005054:	fb02 f303 	mul.w	r3, r2, r3
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	0c9b      	lsrs	r3, r3, #18
 8005060:	3301      	adds	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005064:	e002      	b.n	800506c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b01      	subs	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d102      	bne.n	8005080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f2      	bne.n	8005066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508c:	d110      	bne.n	80050b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e00f      	b.n	80050b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509e:	d007      	beq.n	80050b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050a0:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050a8:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40007000 	.word	0x40007000
 80050c4:	20000010 	.word	0x20000010
 80050c8:	431bde83 	.word	0x431bde83

080050cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e3ca      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050de:	4b97      	ldr	r3, [pc, #604]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050e8:	4b94      	ldr	r3, [pc, #592]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80e4 	beq.w	80052c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <HAL_RCC_OscConfig+0x4a>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	f040 808b 	bne.w	8005224 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 8087 	bne.w	8005224 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005116:	4b89      	ldr	r3, [pc, #548]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_RCC_OscConfig+0x62>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e3a2      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	4b82      	ldr	r3, [pc, #520]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <HAL_RCC_OscConfig+0x7c>
 800513e:	4b7f      	ldr	r3, [pc, #508]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005146:	e005      	b.n	8005154 <HAL_RCC_OscConfig+0x88>
 8005148:	4b7c      	ldr	r3, [pc, #496]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800514a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514e:	091b      	lsrs	r3, r3, #4
 8005150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005154:	4293      	cmp	r3, r2
 8005156:	d223      	bcs.n	80051a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fd55 	bl	8005c0c <RCC_SetFlashLatencyFromMSIRange>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e383      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800516c:	4b73      	ldr	r3, [pc, #460]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a72      	ldr	r2, [pc, #456]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005172:	f043 0308 	orr.w	r3, r3, #8
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	4b70      	ldr	r3, [pc, #448]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	496d      	ldr	r1, [pc, #436]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800518a:	4b6c      	ldr	r3, [pc, #432]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	4968      	ldr	r1, [pc, #416]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800519a:	4313      	orrs	r3, r2
 800519c:	604b      	str	r3, [r1, #4]
 800519e:	e025      	b.n	80051ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051a0:	4b66      	ldr	r3, [pc, #408]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a65      	ldr	r2, [pc, #404]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80051a6:	f043 0308 	orr.w	r3, r3, #8
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	4960      	ldr	r1, [pc, #384]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051be:	4b5f      	ldr	r3, [pc, #380]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	495b      	ldr	r1, [pc, #364]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fd15 	bl	8005c0c <RCC_SetFlashLatencyFromMSIRange>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e343      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051ec:	f000 fc4a 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b52      	ldr	r3, [pc, #328]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	4950      	ldr	r1, [pc, #320]	; (8005340 <HAL_RCC_OscConfig+0x274>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
 8005208:	4a4e      	ldr	r2, [pc, #312]	; (8005344 <HAL_RCC_OscConfig+0x278>)
 800520a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800520c:	4b4e      	ldr	r3, [pc, #312]	; (8005348 <HAL_RCC_OscConfig+0x27c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f7fd fae7 	bl	80027e4 <HAL_InitTick>
 8005216:	4603      	mov	r3, r0
 8005218:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d052      	beq.n	80052c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	e327      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d032      	beq.n	8005292 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800522c:	4b43      	ldr	r3, [pc, #268]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a42      	ldr	r2, [pc, #264]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005238:	f7fd fb24 	bl	8002884 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005240:	f7fd fb20 	bl	8002884 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e310      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005252:	4b3a      	ldr	r3, [pc, #232]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800525e:	4b37      	ldr	r3, [pc, #220]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a36      	ldr	r2, [pc, #216]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005264:	f043 0308 	orr.w	r3, r3, #8
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	4b34      	ldr	r3, [pc, #208]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4931      	ldr	r1, [pc, #196]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005278:	4313      	orrs	r3, r2
 800527a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800527c:	4b2f      	ldr	r3, [pc, #188]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	492c      	ldr	r1, [pc, #176]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]
 8005290:	e01a      	b.n	80052c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005292:	4b2a      	ldr	r3, [pc, #168]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a29      	ldr	r2, [pc, #164]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800529e:	f7fd faf1 	bl	8002884 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052a6:	f7fd faed 	bl	8002884 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e2dd      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052b8:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <HAL_RCC_OscConfig+0x1da>
 80052c4:	e000      	b.n	80052c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d074      	beq.n	80053be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d005      	beq.n	80052e6 <HAL_RCC_OscConfig+0x21a>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d10e      	bne.n	80052fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d10b      	bne.n	80052fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d064      	beq.n	80053bc <HAL_RCC_OscConfig+0x2f0>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d160      	bne.n	80053bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e2ba      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005306:	d106      	bne.n	8005316 <HAL_RCC_OscConfig+0x24a>
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0b      	ldr	r2, [pc, #44]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800530e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	e026      	b.n	8005364 <HAL_RCC_OscConfig+0x298>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800531e:	d115      	bne.n	800534c <HAL_RCC_OscConfig+0x280>
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a05      	ldr	r2, [pc, #20]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005326:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_RCC_OscConfig+0x270>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a02      	ldr	r2, [pc, #8]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e014      	b.n	8005364 <HAL_RCC_OscConfig+0x298>
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
 8005340:	0800cb74 	.word	0x0800cb74
 8005344:	20000010 	.word	0x20000010
 8005348:	20000014 	.word	0x20000014
 800534c:	4ba0      	ldr	r3, [pc, #640]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a9f      	ldr	r2, [pc, #636]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b9d      	ldr	r3, [pc, #628]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a9c      	ldr	r2, [pc, #624]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 800535e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd fa8a 	bl	8002884 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005374:	f7fd fa86 	bl	8002884 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e276      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005386:	4b92      	ldr	r3, [pc, #584]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0x2a8>
 8005392:	e014      	b.n	80053be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fd fa76 	bl	8002884 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800539c:	f7fd fa72 	bl	8002884 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	; 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e262      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ae:	4b88      	ldr	r3, [pc, #544]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x2d0>
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d060      	beq.n	800548c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_OscConfig+0x310>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b0c      	cmp	r3, #12
 80053d4:	d119      	bne.n	800540a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d116      	bne.n	800540a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053dc:	4b7c      	ldr	r3, [pc, #496]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_OscConfig+0x328>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e23f      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f4:	4b76      	ldr	r3, [pc, #472]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	4973      	ldr	r1, [pc, #460]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005408:	e040      	b.n	800548c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d023      	beq.n	800545a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005412:	4b6f      	ldr	r3, [pc, #444]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6e      	ldr	r2, [pc, #440]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541e:	f7fd fa31 	bl	8002884 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005426:	f7fd fa2d 	bl	8002884 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e21d      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005438:	4b65      	ldr	r3, [pc, #404]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005444:	4b62      	ldr	r3, [pc, #392]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	495f      	ldr	r1, [pc, #380]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
 8005458:	e018      	b.n	800548c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800545a:	4b5d      	ldr	r3, [pc, #372]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a5c      	ldr	r2, [pc, #368]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fd fa0d 	bl	8002884 <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546e:	f7fd fa09 	bl	8002884 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e1f9      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005480:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d03c      	beq.n	8005512 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01c      	beq.n	80054da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a0:	4b4b      	ldr	r3, [pc, #300]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a6:	4a4a      	ldr	r2, [pc, #296]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fd f9e8 	bl	8002884 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b8:	f7fd f9e4 	bl	8002884 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e1d4      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80054cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0ef      	beq.n	80054b8 <HAL_RCC_OscConfig+0x3ec>
 80054d8:	e01b      	b.n	8005512 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054da:	4b3d      	ldr	r3, [pc, #244]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80054dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e0:	4a3b      	ldr	r2, [pc, #236]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ea:	f7fd f9cb 	bl	8002884 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f2:	f7fd f9c7 	bl	8002884 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e1b7      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005504:	4b32      	ldr	r3, [pc, #200]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1ef      	bne.n	80054f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80a6 	beq.w	800566c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005520:	2300      	movs	r3, #0
 8005522:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005524:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10d      	bne.n	800554c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005530:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005534:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553a:	6593      	str	r3, [r2, #88]	; 0x58
 800553c:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 800553e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005548:	2301      	movs	r3, #1
 800554a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800554c:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <HAL_RCC_OscConfig+0x508>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d118      	bne.n	800558a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005558:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <HAL_RCC_OscConfig+0x508>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_RCC_OscConfig+0x508>)
 800555e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005564:	f7fd f98e 	bl	8002884 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556c:	f7fd f98a 	bl	8002884 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e17a      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <HAL_RCC_OscConfig+0x508>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d108      	bne.n	80055a4 <HAL_RCC_OscConfig+0x4d8>
 8005592:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005598:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055a2:	e029      	b.n	80055f8 <HAL_RCC_OscConfig+0x52c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	d115      	bne.n	80055d8 <HAL_RCC_OscConfig+0x50c>
 80055ac:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	4a03      	ldr	r2, [pc, #12]	; (80055d0 <HAL_RCC_OscConfig+0x504>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055cc:	e014      	b.n	80055f8 <HAL_RCC_OscConfig+0x52c>
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000
 80055d4:	40007000 	.word	0x40007000
 80055d8:	4b9c      	ldr	r3, [pc, #624]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	4a9b      	ldr	r2, [pc, #620]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055e8:	4b98      	ldr	r3, [pc, #608]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ee:	4a97      	ldr	r2, [pc, #604]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d016      	beq.n	800562e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fd f940 	bl	8002884 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005606:	e00a      	b.n	800561e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005608:	f7fd f93c 	bl	8002884 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f241 3288 	movw	r2, #5000	; 0x1388
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e12a      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561e:	4b8b      	ldr	r3, [pc, #556]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ed      	beq.n	8005608 <HAL_RCC_OscConfig+0x53c>
 800562c:	e015      	b.n	800565a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562e:	f7fd f929 	bl	8002884 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005634:	e00a      	b.n	800564c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fd f925 	bl	8002884 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e113      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800564c:	4b7f      	ldr	r3, [pc, #508]	; (800584c <HAL_RCC_OscConfig+0x780>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ed      	bne.n	8005636 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800565a:	7ffb      	ldrb	r3, [r7, #31]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d105      	bne.n	800566c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005660:	4b7a      	ldr	r3, [pc, #488]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	4a79      	ldr	r2, [pc, #484]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80fe 	beq.w	8005872 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	2b02      	cmp	r3, #2
 800567c:	f040 80d0 	bne.w	8005820 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005680:	4b72      	ldr	r3, [pc, #456]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 0203 	and.w	r2, r3, #3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	429a      	cmp	r2, r3
 8005692:	d130      	bne.n	80056f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	3b01      	subs	r3, #1
 80056a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d127      	bne.n	80056f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d11f      	bne.n	80056f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056c0:	2a07      	cmp	r2, #7
 80056c2:	bf14      	ite	ne
 80056c4:	2201      	movne	r2, #1
 80056c6:	2200      	moveq	r2, #0
 80056c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d113      	bne.n	80056f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	3b01      	subs	r3, #1
 80056dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d109      	bne.n	80056f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	3b01      	subs	r3, #1
 80056f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d06e      	beq.n	80057d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b0c      	cmp	r3, #12
 80056fa:	d069      	beq.n	80057d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056fc:	4b53      	ldr	r3, [pc, #332]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005708:	4b50      	ldr	r3, [pc, #320]	; (800584c <HAL_RCC_OscConfig+0x780>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0ad      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005718:	4b4c      	ldr	r3, [pc, #304]	; (800584c <HAL_RCC_OscConfig+0x780>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a4b      	ldr	r2, [pc, #300]	; (800584c <HAL_RCC_OscConfig+0x780>)
 800571e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005722:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005724:	f7fd f8ae 	bl	8002884 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572c:	f7fd f8aa 	bl	8002884 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e09a      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800573e:	4b43      	ldr	r3, [pc, #268]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800574a:	4b40      	ldr	r3, [pc, #256]	; (800584c <HAL_RCC_OscConfig+0x780>)
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	4b40      	ldr	r3, [pc, #256]	; (8005850 <HAL_RCC_OscConfig+0x784>)
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800575a:	3a01      	subs	r2, #1
 800575c:	0112      	lsls	r2, r2, #4
 800575e:	4311      	orrs	r1, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005764:	0212      	lsls	r2, r2, #8
 8005766:	4311      	orrs	r1, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800576c:	0852      	lsrs	r2, r2, #1
 800576e:	3a01      	subs	r2, #1
 8005770:	0552      	lsls	r2, r2, #21
 8005772:	4311      	orrs	r1, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005778:	0852      	lsrs	r2, r2, #1
 800577a:	3a01      	subs	r2, #1
 800577c:	0652      	lsls	r2, r2, #25
 800577e:	4311      	orrs	r1, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005784:	0912      	lsrs	r2, r2, #4
 8005786:	0452      	lsls	r2, r2, #17
 8005788:	430a      	orrs	r2, r1
 800578a:	4930      	ldr	r1, [pc, #192]	; (800584c <HAL_RCC_OscConfig+0x780>)
 800578c:	4313      	orrs	r3, r2
 800578e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005790:	4b2e      	ldr	r3, [pc, #184]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2d      	ldr	r2, [pc, #180]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800579a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800579c:	4b2b      	ldr	r3, [pc, #172]	; (800584c <HAL_RCC_OscConfig+0x780>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a2a      	ldr	r2, [pc, #168]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80057a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057a8:	f7fd f86c 	bl	8002884 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fd f868 	bl	8002884 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e058      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057c2:	4b22      	ldr	r3, [pc, #136]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057ce:	e050      	b.n	8005872 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e04f      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d148      	bne.n	8005872 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057e0:	4b1a      	ldr	r3, [pc, #104]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a19      	ldr	r2, [pc, #100]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80057e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057ec:	4b17      	ldr	r3, [pc, #92]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4a16      	ldr	r2, [pc, #88]	; (800584c <HAL_RCC_OscConfig+0x780>)
 80057f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057f8:	f7fd f844 	bl	8002884 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005800:	f7fd f840 	bl	8002884 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e030      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005812:	4b0e      	ldr	r3, [pc, #56]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0x734>
 800581e:	e028      	b.n	8005872 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d023      	beq.n	800586e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <HAL_RCC_OscConfig+0x780>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a08      	ldr	r2, [pc, #32]	; (800584c <HAL_RCC_OscConfig+0x780>)
 800582c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005832:	f7fd f827 	bl	8002884 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005838:	e00c      	b.n	8005854 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583a:	f7fd f823 	bl	8002884 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d905      	bls.n	8005854 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e013      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
 800584c:	40021000 	.word	0x40021000
 8005850:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005854:	4b09      	ldr	r3, [pc, #36]	; (800587c <HAL_RCC_OscConfig+0x7b0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ec      	bne.n	800583a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <HAL_RCC_OscConfig+0x7b0>)
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	4905      	ldr	r1, [pc, #20]	; (800587c <HAL_RCC_OscConfig+0x7b0>)
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_OscConfig+0x7b4>)
 8005868:	4013      	ands	r3, r2
 800586a:	60cb      	str	r3, [r1, #12]
 800586c:	e001      	b.n	8005872 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3720      	adds	r7, #32
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40021000 	.word	0x40021000
 8005880:	feeefffc 	.word	0xfeeefffc

08005884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0e7      	b.n	8005a68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005898:	4b75      	ldr	r3, [pc, #468]	; (8005a70 <HAL_RCC_ClockConfig+0x1ec>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d910      	bls.n	80058c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a6:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <HAL_RCC_ClockConfig+0x1ec>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f023 0207 	bic.w	r2, r3, #7
 80058ae:	4970      	ldr	r1, [pc, #448]	; (8005a70 <HAL_RCC_ClockConfig+0x1ec>)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b6:	4b6e      	ldr	r3, [pc, #440]	; (8005a70 <HAL_RCC_ClockConfig+0x1ec>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d001      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0cf      	b.n	8005a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d010      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	4b66      	ldr	r3, [pc, #408]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d908      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e4:	4b63      	ldr	r3, [pc, #396]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4960      	ldr	r1, [pc, #384]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d04c      	beq.n	800599c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d107      	bne.n	800591a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590a:	4b5a      	ldr	r3, [pc, #360]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d121      	bne.n	800595a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0a6      	b.n	8005a68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005922:	4b54      	ldr	r3, [pc, #336]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d115      	bne.n	800595a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e09a      	b.n	8005a68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d107      	bne.n	800594a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800593a:	4b4e      	ldr	r3, [pc, #312]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e08e      	b.n	8005a68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800594a:	4b4a      	ldr	r3, [pc, #296]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e086      	b.n	8005a68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800595a:	4b46      	ldr	r3, [pc, #280]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f023 0203 	bic.w	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4943      	ldr	r1, [pc, #268]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 8005968:	4313      	orrs	r3, r2
 800596a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596c:	f7fc ff8a 	bl	8002884 <HAL_GetTick>
 8005970:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	e00a      	b.n	800598a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005974:	f7fc ff86 	bl	8002884 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e06e      	b.n	8005a68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598a:	4b3a      	ldr	r3, [pc, #232]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 020c 	and.w	r2, r3, #12
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	429a      	cmp	r2, r3
 800599a:	d1eb      	bne.n	8005974 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	4b31      	ldr	r3, [pc, #196]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d208      	bcs.n	80059ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b8:	4b2e      	ldr	r3, [pc, #184]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	492b      	ldr	r1, [pc, #172]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ca:	4b29      	ldr	r3, [pc, #164]	; (8005a70 <HAL_RCC_ClockConfig+0x1ec>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d210      	bcs.n	80059fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d8:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <HAL_RCC_ClockConfig+0x1ec>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f023 0207 	bic.w	r2, r3, #7
 80059e0:	4923      	ldr	r1, [pc, #140]	; (8005a70 <HAL_RCC_ClockConfig+0x1ec>)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e8:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <HAL_RCC_ClockConfig+0x1ec>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d001      	beq.n	80059fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e036      	b.n	8005a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a06:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	4918      	ldr	r1, [pc, #96]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d009      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a24:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4910      	ldr	r1, [pc, #64]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a38:	f000 f824 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <HAL_RCC_ClockConfig+0x1f0>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	091b      	lsrs	r3, r3, #4
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	490b      	ldr	r1, [pc, #44]	; (8005a78 <HAL_RCC_ClockConfig+0x1f4>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <HAL_RCC_ClockConfig+0x1f8>)
 8005a56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_RCC_ClockConfig+0x1fc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fc fec1 	bl	80027e4 <HAL_InitTick>
 8005a62:	4603      	mov	r3, r0
 8005a64:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a66:	7afb      	ldrb	r3, [r7, #11]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40022000 	.word	0x40022000
 8005a74:	40021000 	.word	0x40021000
 8005a78:	0800cb74 	.word	0x0800cb74
 8005a7c:	20000010 	.word	0x20000010
 8005a80:	20000014 	.word	0x20000014

08005a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a92:	4b3e      	ldr	r3, [pc, #248]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a9c:	4b3b      	ldr	r3, [pc, #236]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b0c      	cmp	r3, #12
 8005ab0:	d121      	bne.n	8005af6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d11e      	bne.n	8005af6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ab8:	4b34      	ldr	r3, [pc, #208]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ac4:	4b31      	ldr	r3, [pc, #196]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e005      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ad4:	4b2d      	ldr	r3, [pc, #180]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10d      	bne.n	8005b0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005af4:	e00a      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d102      	bne.n	8005b02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e004      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d134      	bne.n	8005b7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b12:	4b1e      	ldr	r3, [pc, #120]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d003      	beq.n	8005b2a <HAL_RCC_GetSysClockFreq+0xa6>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d003      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0xac>
 8005b28:	e005      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b2a:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b2c:	617b      	str	r3, [r7, #20]
      break;
 8005b2e:	e005      	b.n	8005b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b32:	617b      	str	r3, [r7, #20]
      break;
 8005b34:	e002      	b.n	8005b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	617b      	str	r3, [r7, #20]
      break;
 8005b3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b3c:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	091b      	lsrs	r3, r3, #4
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	3301      	adds	r3, #1
 8005b48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b4a:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	fb03 f202 	mul.w	r2, r3, r2
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	0e5b      	lsrs	r3, r3, #25
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3724      	adds	r7, #36	; 0x24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	0800cb8c 	.word	0x0800cb8c
 8005b94:	00f42400 	.word	0x00f42400
 8005b98:	007a1200 	.word	0x007a1200

08005b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000010 	.word	0x20000010

08005bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bb8:	f7ff fff0 	bl	8005b9c <HAL_RCC_GetHCLKFreq>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	4904      	ldr	r1, [pc, #16]	; (8005bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bca:	5ccb      	ldrb	r3, [r1, r3]
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	0800cb84 	.word	0x0800cb84

08005be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005be4:	f7ff ffda 	bl	8005b9c <HAL_RCC_GetHCLKFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	0adb      	lsrs	r3, r3, #11
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	4904      	ldr	r1, [pc, #16]	; (8005c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	0800cb84 	.word	0x0800cb84

08005c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c18:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c24:	f7ff f9ee 	bl	8005004 <HAL_PWREx_GetVoltageRange>
 8005c28:	6178      	str	r0, [r7, #20]
 8005c2a:	e014      	b.n	8005c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c2c:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c30:	4a24      	ldr	r2, [pc, #144]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c36:	6593      	str	r3, [r2, #88]	; 0x58
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c44:	f7ff f9de 	bl	8005004 <HAL_PWREx_GetVoltageRange>
 8005c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4e:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5c:	d10b      	bne.n	8005c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d919      	bls.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2ba0      	cmp	r3, #160	; 0xa0
 8005c68:	d902      	bls.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	e013      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c70:	2301      	movs	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	e010      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d902      	bls.n	8005c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	e00a      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b80      	cmp	r3, #128	; 0x80
 8005c86:	d102      	bne.n	8005c8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c88:	2302      	movs	r3, #2
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	e004      	b.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b70      	cmp	r3, #112	; 0x70
 8005c92:	d101      	bne.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c94:	2301      	movs	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f023 0207 	bic.w	r2, r3, #7
 8005ca0:	4909      	ldr	r1, [pc, #36]	; (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ca8:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d001      	beq.n	8005cba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40022000 	.word	0x40022000

08005ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cd8:	2300      	movs	r3, #0
 8005cda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d041      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cf0:	d02a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005cf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cf6:	d824      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cfc:	d008      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d02:	d81e      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0c:	d010      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d0e:	e018      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d10:	4b86      	ldr	r3, [pc, #536]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4a85      	ldr	r2, [pc, #532]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d1c:	e015      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fabb 	bl	80062a0 <RCCEx_PLLSAI1_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d2e:	e00c      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3320      	adds	r3, #32
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fba6 	bl	8006488 <RCCEx_PLLSAI2_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d40:	e003      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	74fb      	strb	r3, [r7, #19]
      break;
 8005d46:	e000      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4a:	7cfb      	ldrb	r3, [r7, #19]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d50:	4b76      	ldr	r3, [pc, #472]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d5e:	4973      	ldr	r1, [pc, #460]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d66:	e001      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	7cfb      	ldrb	r3, [r7, #19]
 8005d6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d041      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d80:	d02a      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d86:	d824      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d8c:	d008      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d92:	d81e      	bhi.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d9c:	d010      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d9e:	e018      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005da0:	4b62      	ldr	r3, [pc, #392]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	4a61      	ldr	r2, [pc, #388]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005daa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005dac:	e015      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3304      	adds	r3, #4
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fa73 	bl	80062a0 <RCCEx_PLLSAI1_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005dbe:	e00c      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3320      	adds	r3, #32
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fb5e 	bl	8006488 <RCCEx_PLLSAI2_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005dd0:	e003      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8005dd6:	e000      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005de0:	4b52      	ldr	r3, [pc, #328]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dee:	494f      	ldr	r1, [pc, #316]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005df6:	e001      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df8:	7cfb      	ldrb	r3, [r7, #19]
 8005dfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80a0 	beq.w	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e0e:	4b47      	ldr	r3, [pc, #284]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00d      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e24:	4b41      	ldr	r3, [pc, #260]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	4a40      	ldr	r2, [pc, #256]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e30:	4b3e      	ldr	r3, [pc, #248]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e40:	4b3b      	ldr	r3, [pc, #236]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3a      	ldr	r2, [pc, #232]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e4c:	f7fc fd1a 	bl	8002884 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e52:	e009      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e54:	f7fc fd16 	bl	8002884 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d902      	bls.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	74fb      	strb	r3, [r7, #19]
        break;
 8005e66:	e005      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e68:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0ef      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e74:	7cfb      	ldrb	r3, [r7, #19]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d15c      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e7a:	4b2c      	ldr	r3, [pc, #176]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01f      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d019      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e98:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ea4:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eaa:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb4:	4b1d      	ldr	r3, [pc, #116]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eba:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ec4:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d016      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed6:	f7fc fcd5 	bl	8002884 <HAL_GetTick>
 8005eda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005edc:	e00b      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fc fcd1 	bl	8002884 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d902      	bls.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	74fb      	strb	r3, [r7, #19]
            break;
 8005ef4:	e006      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0ec      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005f04:	7cfb      	ldrb	r3, [r7, #19]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10c      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f0a:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1a:	4904      	ldr	r1, [pc, #16]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f22:	e009      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f24:	7cfb      	ldrb	r3, [r7, #19]
 8005f26:	74bb      	strb	r3, [r7, #18]
 8005f28:	e006      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005f2a:	bf00      	nop
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f38:	7c7b      	ldrb	r3, [r7, #17]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d105      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f3e:	4b9e      	ldr	r3, [pc, #632]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f42:	4a9d      	ldr	r2, [pc, #628]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f56:	4b98      	ldr	r3, [pc, #608]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f023 0203 	bic.w	r2, r3, #3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	4994      	ldr	r1, [pc, #592]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f78:	4b8f      	ldr	r3, [pc, #572]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	f023 020c 	bic.w	r2, r3, #12
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	498c      	ldr	r1, [pc, #560]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f9a:	4b87      	ldr	r3, [pc, #540]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	4983      	ldr	r1, [pc, #524]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fbc:	4b7e      	ldr	r3, [pc, #504]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	497b      	ldr	r1, [pc, #492]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fde:	4b76      	ldr	r3, [pc, #472]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fec:	4972      	ldr	r1, [pc, #456]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006000:	4b6d      	ldr	r3, [pc, #436]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600e:	496a      	ldr	r1, [pc, #424]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006022:	4b65      	ldr	r3, [pc, #404]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006030:	4961      	ldr	r1, [pc, #388]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006044:	4b5c      	ldr	r3, [pc, #368]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006052:	4959      	ldr	r1, [pc, #356]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006066:	4b54      	ldr	r3, [pc, #336]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006074:	4950      	ldr	r1, [pc, #320]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006088:	4b4b      	ldr	r3, [pc, #300]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	4948      	ldr	r1, [pc, #288]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060aa:	4b43      	ldr	r3, [pc, #268]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b8:	493f      	ldr	r1, [pc, #252]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d028      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060cc:	4b3a      	ldr	r3, [pc, #232]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060da:	4937      	ldr	r1, [pc, #220]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ea:	d106      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ec:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4a31      	ldr	r2, [pc, #196]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f6:	60d3      	str	r3, [r2, #12]
 80060f8:	e011      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006102:	d10c      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3304      	adds	r3, #4
 8006108:	2101      	movs	r1, #1
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f8c8 	bl	80062a0 <RCCEx_PLLSAI1_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006114:	7cfb      	ldrb	r3, [r7, #19]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800611a:	7cfb      	ldrb	r3, [r7, #19]
 800611c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d028      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800612a:	4b23      	ldr	r3, [pc, #140]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006130:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	491f      	ldr	r1, [pc, #124]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006148:	d106      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614a:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	4a1a      	ldr	r2, [pc, #104]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006154:	60d3      	str	r3, [r2, #12]
 8006156:	e011      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006160:	d10c      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	2101      	movs	r1, #1
 8006168:	4618      	mov	r0, r3
 800616a:	f000 f899 	bl	80062a0 <RCCEx_PLLSAI1_Config>
 800616e:	4603      	mov	r3, r0
 8006170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006172:	7cfb      	ldrb	r3, [r7, #19]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d02b      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006196:	4908      	ldr	r1, [pc, #32]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061a6:	d109      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061a8:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4a02      	ldr	r2, [pc, #8]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061b2:	60d3      	str	r3, [r2, #12]
 80061b4:	e014      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80061b6:	bf00      	nop
 80061b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061c4:	d10c      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3304      	adds	r3, #4
 80061ca:	2101      	movs	r1, #1
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 f867 	bl	80062a0 <RCCEx_PLLSAI1_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80061dc:	7cfb      	ldrb	r3, [r7, #19]
 80061de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d02f      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061ec:	4b2b      	ldr	r3, [pc, #172]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061fa:	4928      	ldr	r1, [pc, #160]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800620a:	d10d      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	2102      	movs	r1, #2
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f844 	bl	80062a0 <RCCEx_PLLSAI1_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800621c:	7cfb      	ldrb	r3, [r7, #19]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d014      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006222:	7cfb      	ldrb	r3, [r7, #19]
 8006224:	74bb      	strb	r3, [r7, #18]
 8006226:	e011      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800622c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006230:	d10c      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3320      	adds	r3, #32
 8006236:	2102      	movs	r1, #2
 8006238:	4618      	mov	r0, r3
 800623a:	f000 f925 	bl	8006488 <RCCEx_PLLSAI2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006242:	7cfb      	ldrb	r3, [r7, #19]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006258:	4b10      	ldr	r3, [pc, #64]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006266:	490d      	ldr	r1, [pc, #52]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800628a:	4904      	ldr	r1, [pc, #16]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006292:	7cbb      	ldrb	r3, [r7, #18]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000

080062a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062ae:	4b75      	ldr	r3, [pc, #468]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d018      	beq.n	80062ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062ba:	4b72      	ldr	r3, [pc, #456]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0203 	and.w	r2, r3, #3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d10d      	bne.n	80062e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
       ||
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80062d2:	4b6c      	ldr	r3, [pc, #432]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
       ||
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d047      	beq.n	8006376 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
 80062ea:	e044      	b.n	8006376 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d018      	beq.n	8006326 <RCCEx_PLLSAI1_Config+0x86>
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d825      	bhi.n	8006344 <RCCEx_PLLSAI1_Config+0xa4>
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d002      	beq.n	8006302 <RCCEx_PLLSAI1_Config+0x62>
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d009      	beq.n	8006314 <RCCEx_PLLSAI1_Config+0x74>
 8006300:	e020      	b.n	8006344 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006302:	4b60      	ldr	r3, [pc, #384]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d11d      	bne.n	800634a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006312:	e01a      	b.n	800634a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006314:	4b5b      	ldr	r3, [pc, #364]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800631c:	2b00      	cmp	r3, #0
 800631e:	d116      	bne.n	800634e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006324:	e013      	b.n	800634e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006326:	4b57      	ldr	r3, [pc, #348]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10f      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006332:	4b54      	ldr	r3, [pc, #336]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006342:	e006      	b.n	8006352 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
      break;
 8006348:	e004      	b.n	8006354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800634a:	bf00      	nop
 800634c:	e002      	b.n	8006354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006352:	bf00      	nop
    }

    if(status == HAL_OK)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10d      	bne.n	8006376 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800635a:	4b4a      	ldr	r3, [pc, #296]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6819      	ldr	r1, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	3b01      	subs	r3, #1
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	430b      	orrs	r3, r1
 8006370:	4944      	ldr	r1, [pc, #272]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006372:	4313      	orrs	r3, r2
 8006374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d17d      	bne.n	8006478 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800637c:	4b41      	ldr	r3, [pc, #260]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a40      	ldr	r2, [pc, #256]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006388:	f7fc fa7c 	bl	8002884 <HAL_GetTick>
 800638c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800638e:	e009      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006390:	f7fc fa78 	bl	8002884 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d902      	bls.n	80063a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	73fb      	strb	r3, [r7, #15]
        break;
 80063a2:	e005      	b.n	80063b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063a4:	4b37      	ldr	r3, [pc, #220]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ef      	bne.n	8006390 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d160      	bne.n	8006478 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d111      	bne.n	80063e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063bc:	4b31      	ldr	r3, [pc, #196]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80063c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6892      	ldr	r2, [r2, #8]
 80063cc:	0211      	lsls	r1, r2, #8
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68d2      	ldr	r2, [r2, #12]
 80063d2:	0912      	lsrs	r2, r2, #4
 80063d4:	0452      	lsls	r2, r2, #17
 80063d6:	430a      	orrs	r2, r1
 80063d8:	492a      	ldr	r1, [pc, #168]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	610b      	str	r3, [r1, #16]
 80063de:	e027      	b.n	8006430 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d112      	bne.n	800640c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80063ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6892      	ldr	r2, [r2, #8]
 80063f6:	0211      	lsls	r1, r2, #8
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6912      	ldr	r2, [r2, #16]
 80063fc:	0852      	lsrs	r2, r2, #1
 80063fe:	3a01      	subs	r2, #1
 8006400:	0552      	lsls	r2, r2, #21
 8006402:	430a      	orrs	r2, r1
 8006404:	491f      	ldr	r1, [pc, #124]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	610b      	str	r3, [r1, #16]
 800640a:	e011      	b.n	8006430 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800640c:	4b1d      	ldr	r3, [pc, #116]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6892      	ldr	r2, [r2, #8]
 800641c:	0211      	lsls	r1, r2, #8
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6952      	ldr	r2, [r2, #20]
 8006422:	0852      	lsrs	r2, r2, #1
 8006424:	3a01      	subs	r2, #1
 8006426:	0652      	lsls	r2, r2, #25
 8006428:	430a      	orrs	r2, r1
 800642a:	4916      	ldr	r1, [pc, #88]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800642c:	4313      	orrs	r3, r2
 800642e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006430:	4b14      	ldr	r3, [pc, #80]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a13      	ldr	r2, [pc, #76]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800643a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800643c:	f7fc fa22 	bl	8002884 <HAL_GetTick>
 8006440:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006442:	e009      	b.n	8006458 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006444:	f7fc fa1e 	bl	8002884 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d902      	bls.n	8006458 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	73fb      	strb	r3, [r7, #15]
          break;
 8006456:	e005      	b.n	8006464 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0ef      	beq.n	8006444 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800646a:	4b06      	ldr	r3, [pc, #24]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	4904      	ldr	r1, [pc, #16]	; (8006484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006474:	4313      	orrs	r3, r2
 8006476:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40021000 	.word	0x40021000

08006488 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006496:	4b6a      	ldr	r3, [pc, #424]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d018      	beq.n	80064d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064a2:	4b67      	ldr	r3, [pc, #412]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 0203 	and.w	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d10d      	bne.n	80064ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
       ||
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80064ba:	4b61      	ldr	r3, [pc, #388]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
       ||
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d047      	beq.n	800655e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	73fb      	strb	r3, [r7, #15]
 80064d2:	e044      	b.n	800655e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d018      	beq.n	800650e <RCCEx_PLLSAI2_Config+0x86>
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d825      	bhi.n	800652c <RCCEx_PLLSAI2_Config+0xa4>
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d002      	beq.n	80064ea <RCCEx_PLLSAI2_Config+0x62>
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d009      	beq.n	80064fc <RCCEx_PLLSAI2_Config+0x74>
 80064e8:	e020      	b.n	800652c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064ea:	4b55      	ldr	r3, [pc, #340]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d11d      	bne.n	8006532 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064fa:	e01a      	b.n	8006532 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064fc:	4b50      	ldr	r3, [pc, #320]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006504:	2b00      	cmp	r3, #0
 8006506:	d116      	bne.n	8006536 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800650c:	e013      	b.n	8006536 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800650e:	4b4c      	ldr	r3, [pc, #304]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10f      	bne.n	800653a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800651a:	4b49      	ldr	r3, [pc, #292]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800652a:	e006      	b.n	800653a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
      break;
 8006530:	e004      	b.n	800653c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800653a:	bf00      	nop
    }

    if(status == HAL_OK)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006542:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6819      	ldr	r1, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	3b01      	subs	r3, #1
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	430b      	orrs	r3, r1
 8006558:	4939      	ldr	r1, [pc, #228]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800655a:	4313      	orrs	r3, r2
 800655c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d167      	bne.n	8006634 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006564:	4b36      	ldr	r3, [pc, #216]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a35      	ldr	r2, [pc, #212]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800656a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800656e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006570:	f7fc f988 	bl	8002884 <HAL_GetTick>
 8006574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006576:	e009      	b.n	800658c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006578:	f7fc f984 	bl	8002884 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d902      	bls.n	800658c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	73fb      	strb	r3, [r7, #15]
        break;
 800658a:	e005      	b.n	8006598 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800658c:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ef      	bne.n	8006578 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d14a      	bne.n	8006634 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d111      	bne.n	80065c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065a4:	4b26      	ldr	r3, [pc, #152]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80065ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6892      	ldr	r2, [r2, #8]
 80065b4:	0211      	lsls	r1, r2, #8
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68d2      	ldr	r2, [r2, #12]
 80065ba:	0912      	lsrs	r2, r2, #4
 80065bc:	0452      	lsls	r2, r2, #17
 80065be:	430a      	orrs	r2, r1
 80065c0:	491f      	ldr	r1, [pc, #124]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	614b      	str	r3, [r1, #20]
 80065c6:	e011      	b.n	80065ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065c8:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80065d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6892      	ldr	r2, [r2, #8]
 80065d8:	0211      	lsls	r1, r2, #8
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6912      	ldr	r2, [r2, #16]
 80065de:	0852      	lsrs	r2, r2, #1
 80065e0:	3a01      	subs	r2, #1
 80065e2:	0652      	lsls	r2, r2, #25
 80065e4:	430a      	orrs	r2, r1
 80065e6:	4916      	ldr	r1, [pc, #88]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065ec:	4b14      	ldr	r3, [pc, #80]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fc f944 	bl	8002884 <HAL_GetTick>
 80065fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065fe:	e009      	b.n	8006614 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006600:	f7fc f940 	bl	8002884 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d902      	bls.n	8006614 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	73fb      	strb	r3, [r7, #15]
          break;
 8006612:	e005      	b.n	8006620 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0ef      	beq.n	8006600 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	4904      	ldr	r1, [pc, #16]	; (8006640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006630:	4313      	orrs	r3, r2
 8006632:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000

08006644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e040      	b.n	80066d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fb feb6 	bl	80023d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2224      	movs	r2, #36	; 0x24
 8006670:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fbca 	bl	8006e1c <UART_SetConfig>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e022      	b.n	80066d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fe76 	bl	800738c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fefd 	bl	80074d0 <UART_CheckIdleState>
 80066d6:	4603      	mov	r3, r0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08a      	sub	sp, #40	; 0x28
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	f040 8082 	bne.w	80067fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_UART_Transmit+0x26>
 8006700:	88fb      	ldrh	r3, [r7, #6]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e07a      	b.n	8006800 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_UART_Transmit+0x38>
 8006714:	2302      	movs	r3, #2
 8006716:	e073      	b.n	8006800 <HAL_UART_Transmit+0x120>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2221      	movs	r2, #33	; 0x21
 800672c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800672e:	f7fc f8a9 	bl	8002884 <HAL_GetTick>
 8006732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674c:	d108      	bne.n	8006760 <HAL_UART_Transmit+0x80>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	e003      	b.n	8006768 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006770:	e02d      	b.n	80067ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2200      	movs	r2, #0
 800677a:	2180      	movs	r1, #128	; 0x80
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fef0 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e039      	b.n	8006800 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10b      	bne.n	80067aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	881a      	ldrh	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800679e:	b292      	uxth	r2, r2
 80067a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	3302      	adds	r3, #2
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e008      	b.n	80067bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	b292      	uxth	r2, r2
 80067b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	3301      	adds	r3, #1
 80067ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1cb      	bne.n	8006772 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	2140      	movs	r1, #64	; 0x40
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 febc 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e005      	b.n	8006800 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3720      	adds	r7, #32
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b0ba      	sub	sp, #232	; 0xe8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800682e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006832:	f640 030f 	movw	r3, #2063	; 0x80f
 8006836:	4013      	ands	r3, r2
 8006838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800683c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d115      	bne.n	8006870 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00f      	beq.n	8006870 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006854:	f003 0320 	and.w	r3, r3, #32
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 82a6 	beq.w	8006db2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
      }
      return;
 800686e:	e2a0      	b.n	8006db2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8117 	beq.w	8006aa8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800687a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006886:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800688a:	4b85      	ldr	r3, [pc, #532]	; (8006aa0 <HAL_UART_IRQHandler+0x298>)
 800688c:	4013      	ands	r3, r2
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 810a 	beq.w	8006aa8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d011      	beq.n	80068c4 <HAL_UART_IRQHandler+0xbc>
 80068a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2201      	movs	r2, #1
 80068b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ba:	f043 0201 	orr.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d011      	beq.n	80068f4 <HAL_UART_IRQHandler+0xec>
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2202      	movs	r2, #2
 80068e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ea:	f043 0204 	orr.w	r2, r3, #4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d011      	beq.n	8006924 <HAL_UART_IRQHandler+0x11c>
 8006900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2204      	movs	r2, #4
 8006912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691a:	f043 0202 	orr.w	r2, r3, #2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800693c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006940:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2208      	movs	r2, #8
 800694e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006956:	f043 0208 	orr.w	r2, r3, #8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006968:	2b00      	cmp	r3, #0
 800696a:	d012      	beq.n	8006992 <HAL_UART_IRQHandler+0x18a>
 800696c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00c      	beq.n	8006992 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 820c 	beq.w	8006db6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d005      	beq.n	80069ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d04f      	beq.n	8006a8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 ff4a 	bl	8007884 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d141      	bne.n	8006a82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3308      	adds	r3, #8
 8006a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1d9      	bne.n	80069fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d013      	beq.n	8006a7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <HAL_UART_IRQHandler+0x29c>)
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fd ffee 	bl	8004a40 <HAL_DMA_Abort_IT>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d017      	beq.n	8006a9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a78:	e00f      	b.n	8006a9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f9c4 	bl	8006e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a80:	e00b      	b.n	8006a9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9c0 	bl	8006e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	e007      	b.n	8006a9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9bc 	bl	8006e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006a98:	e18d      	b.n	8006db6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9a:	bf00      	nop
    return;
 8006a9c:	e18b      	b.n	8006db6 <HAL_UART_IRQHandler+0x5ae>
 8006a9e:	bf00      	nop
 8006aa0:	04000120 	.word	0x04000120
 8006aa4:	08007b23 	.word	0x08007b23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	f040 8146 	bne.w	8006d3e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 813f 	beq.w	8006d3e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8138 	beq.w	8006d3e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	f040 80b4 	bne.w	8006c4e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006af2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 815f 	beq.w	8006dba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b06:	429a      	cmp	r2, r3
 8006b08:	f080 8157 	bcs.w	8006dba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 8085 	bne.w	8006c32 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1da      	bne.n	8006b28 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3308      	adds	r3, #8
 8006b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e1      	bne.n	8006b72 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3308      	adds	r3, #8
 8006bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e3      	bne.n	8006bae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c02:	f023 0310 	bic.w	r3, r3, #16
 8006c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c14:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e4      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fd fec9 	bl	80049c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fa f9e6 	bl	8001018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c4c:	e0b5      	b.n	8006dba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80a7 	beq.w	8006dbe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80a2 	beq.w	8006dbe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e4      	bne.n	8006c7a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cd4:	633a      	str	r2, [r7, #48]	; 0x30
 8006cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e3      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0310 	bic.w	r3, r3, #16
 8006d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e4      	bne.n	8006cfa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fa f96e 	bl	8001018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d3c:	e03f      	b.n	8006dbe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <HAL_UART_IRQHandler+0x560>
 8006d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 ff1e 	bl	8007ba2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d66:	e02d      	b.n	8006dc4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00e      	beq.n	8006d92 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01c      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
    }
    return;
 8006d90:	e017      	b.n	8006dc2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d012      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x5bc>
 8006d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00c      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fecf 	bl	8007b4e <UART_EndTransmit_IT>
    return;
 8006db0:	e008      	b.n	8006dc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006db2:	bf00      	nop
 8006db4:	e006      	b.n	8006dc4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006db6:	bf00      	nop
 8006db8:	e004      	b.n	8006dc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006dba:	bf00      	nop
 8006dbc:	e002      	b.n	8006dc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006dbe:	bf00      	nop
 8006dc0:	e000      	b.n	8006dc4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006dc2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006dc4:	37e8      	adds	r7, #232	; 0xe8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop

08006dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e20:	b08a      	sub	sp, #40	; 0x28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4ba4      	ldr	r3, [pc, #656]	; (80070dc <UART_SetConfig+0x2c0>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a99      	ldr	r2, [pc, #612]	; (80070e0 <UART_SetConfig+0x2c4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d004      	beq.n	8006e88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e84:	4313      	orrs	r3, r2
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a90      	ldr	r2, [pc, #576]	; (80070e4 <UART_SetConfig+0x2c8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d126      	bne.n	8006ef4 <UART_SetConfig+0xd8>
 8006ea6:	4b90      	ldr	r3, [pc, #576]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d81b      	bhi.n	8006eec <UART_SetConfig+0xd0>
 8006eb4:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0xa0>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ecd 	.word	0x08006ecd
 8006ec0:	08006edd 	.word	0x08006edd
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed2:	e116      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eda:	e112      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006edc:	2304      	movs	r3, #4
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ee2:	e10e      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eea:	e10a      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006eec:	2310      	movs	r3, #16
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef2:	e106      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a7c      	ldr	r2, [pc, #496]	; (80070ec <UART_SetConfig+0x2d0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d138      	bne.n	8006f70 <UART_SetConfig+0x154>
 8006efe:	4b7a      	ldr	r3, [pc, #488]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f04:	f003 030c 	and.w	r3, r3, #12
 8006f08:	2b0c      	cmp	r3, #12
 8006f0a:	d82d      	bhi.n	8006f68 <UART_SetConfig+0x14c>
 8006f0c:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <UART_SetConfig+0xf8>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f49 	.word	0x08006f49
 8006f18:	08006f69 	.word	0x08006f69
 8006f1c:	08006f69 	.word	0x08006f69
 8006f20:	08006f69 	.word	0x08006f69
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006f69 	.word	0x08006f69
 8006f2c:	08006f69 	.word	0x08006f69
 8006f30:	08006f69 	.word	0x08006f69
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f69 	.word	0x08006f69
 8006f3c:	08006f69 	.word	0x08006f69
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f61 	.word	0x08006f61
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4e:	e0d8      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f50:	2302      	movs	r3, #2
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f56:	e0d4      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5e:	e0d0      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f60:	2308      	movs	r3, #8
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f66:	e0cc      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6e:	e0c8      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a5e      	ldr	r2, [pc, #376]	; (80070f0 <UART_SetConfig+0x2d4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d125      	bne.n	8006fc6 <UART_SetConfig+0x1aa>
 8006f7a:	4b5b      	ldr	r3, [pc, #364]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d016      	beq.n	8006fb6 <UART_SetConfig+0x19a>
 8006f88:	2b30      	cmp	r3, #48	; 0x30
 8006f8a:	d818      	bhi.n	8006fbe <UART_SetConfig+0x1a2>
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d00a      	beq.n	8006fa6 <UART_SetConfig+0x18a>
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d814      	bhi.n	8006fbe <UART_SetConfig+0x1a2>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <UART_SetConfig+0x182>
 8006f98:	2b10      	cmp	r3, #16
 8006f9a:	d008      	beq.n	8006fae <UART_SetConfig+0x192>
 8006f9c:	e00f      	b.n	8006fbe <UART_SetConfig+0x1a2>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa4:	e0ad      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fac:	e0a9      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fae:	2304      	movs	r3, #4
 8006fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fb4:	e0a5      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fb6:	2308      	movs	r3, #8
 8006fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fbc:	e0a1      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc4:	e09d      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4a      	ldr	r2, [pc, #296]	; (80070f4 <UART_SetConfig+0x2d8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d125      	bne.n	800701c <UART_SetConfig+0x200>
 8006fd0:	4b45      	ldr	r3, [pc, #276]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fda:	2bc0      	cmp	r3, #192	; 0xc0
 8006fdc:	d016      	beq.n	800700c <UART_SetConfig+0x1f0>
 8006fde:	2bc0      	cmp	r3, #192	; 0xc0
 8006fe0:	d818      	bhi.n	8007014 <UART_SetConfig+0x1f8>
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d00a      	beq.n	8006ffc <UART_SetConfig+0x1e0>
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d814      	bhi.n	8007014 <UART_SetConfig+0x1f8>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <UART_SetConfig+0x1d8>
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d008      	beq.n	8007004 <UART_SetConfig+0x1e8>
 8006ff2:	e00f      	b.n	8007014 <UART_SetConfig+0x1f8>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffa:	e082      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007002:	e07e      	b.n	8007102 <UART_SetConfig+0x2e6>
 8007004:	2304      	movs	r3, #4
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700a:	e07a      	b.n	8007102 <UART_SetConfig+0x2e6>
 800700c:	2308      	movs	r3, #8
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007012:	e076      	b.n	8007102 <UART_SetConfig+0x2e6>
 8007014:	2310      	movs	r3, #16
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800701a:	e072      	b.n	8007102 <UART_SetConfig+0x2e6>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a35      	ldr	r2, [pc, #212]	; (80070f8 <UART_SetConfig+0x2dc>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d12a      	bne.n	800707c <UART_SetConfig+0x260>
 8007026:	4b30      	ldr	r3, [pc, #192]	; (80070e8 <UART_SetConfig+0x2cc>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007034:	d01a      	beq.n	800706c <UART_SetConfig+0x250>
 8007036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800703a:	d81b      	bhi.n	8007074 <UART_SetConfig+0x258>
 800703c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007040:	d00c      	beq.n	800705c <UART_SetConfig+0x240>
 8007042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007046:	d815      	bhi.n	8007074 <UART_SetConfig+0x258>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <UART_SetConfig+0x238>
 800704c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007050:	d008      	beq.n	8007064 <UART_SetConfig+0x248>
 8007052:	e00f      	b.n	8007074 <UART_SetConfig+0x258>
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e052      	b.n	8007102 <UART_SetConfig+0x2e6>
 800705c:	2302      	movs	r3, #2
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	e04e      	b.n	8007102 <UART_SetConfig+0x2e6>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800706a:	e04a      	b.n	8007102 <UART_SetConfig+0x2e6>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007072:	e046      	b.n	8007102 <UART_SetConfig+0x2e6>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800707a:	e042      	b.n	8007102 <UART_SetConfig+0x2e6>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a17      	ldr	r2, [pc, #92]	; (80070e0 <UART_SetConfig+0x2c4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d13a      	bne.n	80070fc <UART_SetConfig+0x2e0>
 8007086:	4b18      	ldr	r3, [pc, #96]	; (80070e8 <UART_SetConfig+0x2cc>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007090:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007094:	d01a      	beq.n	80070cc <UART_SetConfig+0x2b0>
 8007096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800709a:	d81b      	bhi.n	80070d4 <UART_SetConfig+0x2b8>
 800709c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a0:	d00c      	beq.n	80070bc <UART_SetConfig+0x2a0>
 80070a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a6:	d815      	bhi.n	80070d4 <UART_SetConfig+0x2b8>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <UART_SetConfig+0x298>
 80070ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b0:	d008      	beq.n	80070c4 <UART_SetConfig+0x2a8>
 80070b2:	e00f      	b.n	80070d4 <UART_SetConfig+0x2b8>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ba:	e022      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070bc:	2302      	movs	r3, #2
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c2:	e01e      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ca:	e01a      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d2:	e016      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070da:	e012      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070dc:	efff69f3 	.word	0xefff69f3
 80070e0:	40008000 	.word	0x40008000
 80070e4:	40013800 	.word	0x40013800
 80070e8:	40021000 	.word	0x40021000
 80070ec:	40004400 	.word	0x40004400
 80070f0:	40004800 	.word	0x40004800
 80070f4:	40004c00 	.word	0x40004c00
 80070f8:	40005000 	.word	0x40005000
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a9f      	ldr	r2, [pc, #636]	; (8007384 <UART_SetConfig+0x568>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d17a      	bne.n	8007202 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800710c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007110:	2b08      	cmp	r3, #8
 8007112:	d824      	bhi.n	800715e <UART_SetConfig+0x342>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x300>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007141 	.word	0x08007141
 8007120:	0800715f 	.word	0x0800715f
 8007124:	08007149 	.word	0x08007149
 8007128:	0800715f 	.word	0x0800715f
 800712c:	0800714f 	.word	0x0800714f
 8007130:	0800715f 	.word	0x0800715f
 8007134:	0800715f 	.word	0x0800715f
 8007138:	0800715f 	.word	0x0800715f
 800713c:	08007157 	.word	0x08007157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007140:	f7fe fd38 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007144:	61f8      	str	r0, [r7, #28]
        break;
 8007146:	e010      	b.n	800716a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007148:	4b8f      	ldr	r3, [pc, #572]	; (8007388 <UART_SetConfig+0x56c>)
 800714a:	61fb      	str	r3, [r7, #28]
        break;
 800714c:	e00d      	b.n	800716a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800714e:	f7fe fc99 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8007152:	61f8      	str	r0, [r7, #28]
        break;
 8007154:	e009      	b.n	800716a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800715a:	61fb      	str	r3, [r7, #28]
        break;
 800715c:	e005      	b.n	800716a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007168:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80fb 	beq.w	8007368 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	429a      	cmp	r2, r3
 8007180:	d305      	bcc.n	800718e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	429a      	cmp	r2, r3
 800718c:	d903      	bls.n	8007196 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007194:	e0e8      	b.n	8007368 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	2200      	movs	r2, #0
 800719a:	461c      	mov	r4, r3
 800719c:	4615      	mov	r5, r2
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	022b      	lsls	r3, r5, #8
 80071a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071ac:	0222      	lsls	r2, r4, #8
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	6849      	ldr	r1, [r1, #4]
 80071b2:	0849      	lsrs	r1, r1, #1
 80071b4:	2000      	movs	r0, #0
 80071b6:	4688      	mov	r8, r1
 80071b8:	4681      	mov	r9, r0
 80071ba:	eb12 0a08 	adds.w	sl, r2, r8
 80071be:	eb43 0b09 	adc.w	fp, r3, r9
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	603b      	str	r3, [r7, #0]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	f7f9 fd68 	bl	8000ca8 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4613      	mov	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071e6:	d308      	bcc.n	80071fa <UART_SetConfig+0x3de>
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ee:	d204      	bcs.n	80071fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	60da      	str	r2, [r3, #12]
 80071f8:	e0b6      	b.n	8007368 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007200:	e0b2      	b.n	8007368 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800720a:	d15e      	bne.n	80072ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800720c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007210:	2b08      	cmp	r3, #8
 8007212:	d828      	bhi.n	8007266 <UART_SetConfig+0x44a>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <UART_SetConfig+0x400>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007241 	.word	0x08007241
 8007220:	08007249 	.word	0x08007249
 8007224:	08007251 	.word	0x08007251
 8007228:	08007267 	.word	0x08007267
 800722c:	08007257 	.word	0x08007257
 8007230:	08007267 	.word	0x08007267
 8007234:	08007267 	.word	0x08007267
 8007238:	08007267 	.word	0x08007267
 800723c:	0800725f 	.word	0x0800725f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007240:	f7fe fcb8 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007244:	61f8      	str	r0, [r7, #28]
        break;
 8007246:	e014      	b.n	8007272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007248:	f7fe fcca 	bl	8005be0 <HAL_RCC_GetPCLK2Freq>
 800724c:	61f8      	str	r0, [r7, #28]
        break;
 800724e:	e010      	b.n	8007272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007250:	4b4d      	ldr	r3, [pc, #308]	; (8007388 <UART_SetConfig+0x56c>)
 8007252:	61fb      	str	r3, [r7, #28]
        break;
 8007254:	e00d      	b.n	8007272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007256:	f7fe fc15 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 800725a:	61f8      	str	r0, [r7, #28]
        break;
 800725c:	e009      	b.n	8007272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800725e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007262:	61fb      	str	r3, [r7, #28]
        break;
 8007264:	e005      	b.n	8007272 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d077      	beq.n	8007368 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	005a      	lsls	r2, r3, #1
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	441a      	add	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b0f      	cmp	r3, #15
 8007292:	d916      	bls.n	80072c2 <UART_SetConfig+0x4a6>
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729a:	d212      	bcs.n	80072c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f023 030f 	bic.w	r3, r3, #15
 80072a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	8afb      	ldrh	r3, [r7, #22]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	8afa      	ldrh	r2, [r7, #22]
 80072be:	60da      	str	r2, [r3, #12]
 80072c0:	e052      	b.n	8007368 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072c8:	e04e      	b.n	8007368 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d827      	bhi.n	8007322 <UART_SetConfig+0x506>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x4bc>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072fd 	.word	0x080072fd
 80072dc:	08007305 	.word	0x08007305
 80072e0:	0800730d 	.word	0x0800730d
 80072e4:	08007323 	.word	0x08007323
 80072e8:	08007313 	.word	0x08007313
 80072ec:	08007323 	.word	0x08007323
 80072f0:	08007323 	.word	0x08007323
 80072f4:	08007323 	.word	0x08007323
 80072f8:	0800731b 	.word	0x0800731b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072fc:	f7fe fc5a 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007300:	61f8      	str	r0, [r7, #28]
        break;
 8007302:	e014      	b.n	800732e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007304:	f7fe fc6c 	bl	8005be0 <HAL_RCC_GetPCLK2Freq>
 8007308:	61f8      	str	r0, [r7, #28]
        break;
 800730a:	e010      	b.n	800732e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800730c:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <UART_SetConfig+0x56c>)
 800730e:	61fb      	str	r3, [r7, #28]
        break;
 8007310:	e00d      	b.n	800732e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007312:	f7fe fbb7 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8007316:	61f8      	str	r0, [r7, #28]
        break;
 8007318:	e009      	b.n	800732e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731e:	61fb      	str	r3, [r7, #28]
        break;
 8007320:	e005      	b.n	800732e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800732c:	bf00      	nop
    }

    if (pclk != 0U)
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d019      	beq.n	8007368 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	085a      	lsrs	r2, r3, #1
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	441a      	add	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2b0f      	cmp	r3, #15
 800734c:	d909      	bls.n	8007362 <UART_SetConfig+0x546>
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007354:	d205      	bcs.n	8007362 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60da      	str	r2, [r3, #12]
 8007360:	e002      	b.n	8007368 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007374:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007378:	4618      	mov	r0, r3
 800737a:	3728      	adds	r7, #40	; 0x28
 800737c:	46bd      	mov	sp, r7
 800737e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007382:	bf00      	nop
 8007384:	40008000 	.word	0x40008000
 8007388:	00f42400 	.word	0x00f42400

0800738c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800748a:	d10a      	bne.n	80074a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	605a      	str	r2, [r3, #4]
  }
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074e0:	f7fb f9d0 	bl	8002884 <HAL_GetTick>
 80074e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d10e      	bne.n	8007512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f82d 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e023      	b.n	800755a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b04      	cmp	r3, #4
 800751e:	d10e      	bne.n	800753e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f817 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e00d      	b.n	800755a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b09c      	sub	sp, #112	; 0x70
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007572:	e0a5      	b.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	f000 80a1 	beq.w	80076c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757e:	f7fb f981 	bl	8002884 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800758a:	429a      	cmp	r2, r3
 800758c:	d302      	bcc.n	8007594 <UART_WaitOnFlagUntilTimeout+0x32>
 800758e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007590:	2b00      	cmp	r3, #0
 8007592:	d13e      	bne.n	8007612 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075a8:	667b      	str	r3, [r7, #100]	; 0x64
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	f023 0301 	bic.w	r3, r3, #1
 80075dc:	663b      	str	r3, [r7, #96]	; 0x60
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80075e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e067      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d04f      	beq.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800762e:	d147      	bne.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007638:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800764e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
 800765a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800765e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	66bb      	str	r3, [r7, #104]	; 0x68
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800768c:	623a      	str	r2, [r7, #32]
 800768e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	61bb      	str	r3, [r7, #24]
   return(result);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e5      	bne.n	800766c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2220      	movs	r2, #32
 80076aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e010      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69da      	ldr	r2, [r3, #28]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	4013      	ands	r3, r2
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	bf0c      	ite	eq
 80076d0:	2301      	moveq	r3, #1
 80076d2:	2300      	movne	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	429a      	cmp	r2, r3
 80076dc:	f43f af4a 	beq.w	8007574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3770      	adds	r7, #112	; 0x70
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b096      	sub	sp, #88	; 0x58
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2222      	movs	r2, #34	; 0x22
 8007714:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771a:	2b00      	cmp	r3, #0
 800771c:	d02b      	beq.n	8007776 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007722:	4a42      	ldr	r2, [pc, #264]	; (800782c <UART_Start_Receive_DMA+0x140>)
 8007724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772a:	4a41      	ldr	r2, [pc, #260]	; (8007830 <UART_Start_Receive_DMA+0x144>)
 800772c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007732:	4a40      	ldr	r2, [pc, #256]	; (8007834 <UART_Start_Receive_DMA+0x148>)
 8007734:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773a:	2200      	movs	r2, #0
 800773c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3324      	adds	r3, #36	; 0x24
 8007748:	4619      	mov	r1, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	461a      	mov	r2, r3
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	f7fd f8d7 	bl	8004904 <HAL_DMA_Start_IT>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00c      	beq.n	8007776 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2210      	movs	r2, #16
 8007760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e055      	b.n	8007822 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d018      	beq.n	80077b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779a:	657b      	str	r3, [r7, #84]	; 0x54
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e6      	bne.n	8007786 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3308      	adds	r3, #8
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	653b      	str	r3, [r7, #80]	; 0x50
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077d8:	637a      	str	r2, [r7, #52]	; 0x34
 80077da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e5      	bne.n	80077b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	613b      	str	r3, [r7, #16]
   return(result);
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800780c:	623a      	str	r2, [r7, #32]
 800780e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	69f9      	ldr	r1, [r7, #28]
 8007812:	6a3a      	ldr	r2, [r7, #32]
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	61bb      	str	r3, [r7, #24]
   return(result);
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3758      	adds	r7, #88	; 0x58
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	0800794b 	.word	0x0800794b
 8007830:	08007a6f 	.word	0x08007a6f
 8007834:	08007aa7 	.word	0x08007aa7

08007838 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007838:	b480      	push	{r7}
 800783a:	b089      	sub	sp, #36	; 0x24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	60bb      	str	r3, [r7, #8]
   return(result);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	61bb      	str	r3, [r7, #24]
 8007860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6979      	ldr	r1, [r7, #20]
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	613b      	str	r3, [r7, #16]
   return(result);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e6      	bne.n	8007840 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007878:	bf00      	nop
 800787a:	3724      	adds	r7, #36	; 0x24
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b095      	sub	sp, #84	; 0x54
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078aa:	643b      	str	r3, [r7, #64]	; 0x40
 80078ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3308      	adds	r3, #8
 80078c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d118      	bne.n	800792c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	60bb      	str	r3, [r7, #8]
   return(result);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f023 0310 	bic.w	r3, r3, #16
 800790e:	647b      	str	r3, [r7, #68]	; 0x44
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6979      	ldr	r1, [r7, #20]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	613b      	str	r3, [r7, #16]
   return(result);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800793e:	bf00      	nop
 8007940:	3754      	adds	r7, #84	; 0x54
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b09c      	sub	sp, #112	; 0x70
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d170      	bne.n	8007a48 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007968:	2200      	movs	r2, #0
 800796a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800796e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800797c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800797e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007982:	66bb      	str	r3, [r7, #104]	; 0x68
 8007984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800798c:	65bb      	str	r3, [r7, #88]	; 0x58
 800798e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007992:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800799a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e6      	bne.n	800796e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b2:	f023 0301 	bic.w	r3, r3, #1
 80079b6:	667b      	str	r3, [r7, #100]	; 0x64
 80079b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079c0:	647a      	str	r2, [r7, #68]	; 0x44
 80079c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	623b      	str	r3, [r7, #32]
   return(result);
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ea:	663b      	str	r3, [r7, #96]	; 0x60
 80079ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079f4:	633a      	str	r2, [r7, #48]	; 0x30
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e5      	bne.n	80079d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d118      	bne.n	8007a48 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0310 	bic.w	r3, r3, #16
 8007a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	617b      	str	r3, [r7, #20]
   return(result);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e6      	bne.n	8007a16 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d107      	bne.n	8007a60 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a56:	4619      	mov	r1, r3
 8007a58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a5a:	f7f9 fadd 	bl	8001018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a5e:	e002      	b.n	8007a66 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007a60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a62:	f7ff f9bd 	bl	8006de0 <HAL_UART_RxCpltCallback>
}
 8007a66:	bf00      	nop
 8007a68:	3770      	adds	r7, #112	; 0x70
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d109      	bne.n	8007a98 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f7f9 fac1 	bl	8001018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a96:	e002      	b.n	8007a9e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f7ff f9ab 	bl	8006df4 <HAL_UART_RxHalfCpltCallback>
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ab8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d109      	bne.n	8007ae2 <UART_DMAError+0x3c>
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b21      	cmp	r3, #33	; 0x21
 8007ad2:	d106      	bne.n	8007ae2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007adc:	6978      	ldr	r0, [r7, #20]
 8007ade:	f7ff feab 	bl	8007838 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b40      	cmp	r3, #64	; 0x40
 8007aee:	d109      	bne.n	8007b04 <UART_DMAError+0x5e>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b22      	cmp	r3, #34	; 0x22
 8007af4:	d106      	bne.n	8007b04 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007afe:	6978      	ldr	r0, [r7, #20]
 8007b00:	f7ff fec0 	bl	8007884 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b0a:	f043 0210 	orr.w	r2, r3, #16
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b14:	6978      	ldr	r0, [r7, #20]
 8007b16:	f7ff f977 	bl	8006e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b1a:	bf00      	nop
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff f961 	bl	8006e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b088      	sub	sp, #32
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	61bb      	str	r3, [r7, #24]
 8007b76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6979      	ldr	r1, [r7, #20]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	613b      	str	r3, [r7, #16]
   return(result);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e6      	bne.n	8007b56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff f919 	bl	8006dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b9a:	bf00      	nop
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b08c      	sub	sp, #48	; 0x30
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d14a      	bne.n	8007c62 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e043      	b.n	8007c64 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e03c      	b.n	8007c64 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fd74 	bl	80076ec <UART_Start_Receive_DMA>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d124      	bne.n	8007c5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d11d      	bne.n	8007c56 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2210      	movs	r2, #16
 8007c20:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f043 0310 	orr.w	r3, r3, #16
 8007c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
 8007c42:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6a39      	ldr	r1, [r7, #32]
 8007c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8007c54:	e002      	b.n	8007c5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c60:	e000      	b.n	8007c64 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8007c62:	2302      	movs	r3, #2
  }
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3730      	adds	r7, #48	; 0x30
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <atoi>:
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f001 bdde 	b.w	8009830 <strtol>

08007c74 <__errno>:
 8007c74:	4b01      	ldr	r3, [pc, #4]	; (8007c7c <__errno+0x8>)
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	2000001c 	.word	0x2000001c

08007c80 <__libc_init_array>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	4d0d      	ldr	r5, [pc, #52]	; (8007cb8 <__libc_init_array+0x38>)
 8007c84:	4c0d      	ldr	r4, [pc, #52]	; (8007cbc <__libc_init_array+0x3c>)
 8007c86:	1b64      	subs	r4, r4, r5
 8007c88:	10a4      	asrs	r4, r4, #2
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	42a6      	cmp	r6, r4
 8007c8e:	d109      	bne.n	8007ca4 <__libc_init_array+0x24>
 8007c90:	4d0b      	ldr	r5, [pc, #44]	; (8007cc0 <__libc_init_array+0x40>)
 8007c92:	4c0c      	ldr	r4, [pc, #48]	; (8007cc4 <__libc_init_array+0x44>)
 8007c94:	f004 fce8 	bl	800c668 <_init>
 8007c98:	1b64      	subs	r4, r4, r5
 8007c9a:	10a4      	asrs	r4, r4, #2
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	42a6      	cmp	r6, r4
 8007ca0:	d105      	bne.n	8007cae <__libc_init_array+0x2e>
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca8:	4798      	blx	r3
 8007caa:	3601      	adds	r6, #1
 8007cac:	e7ee      	b.n	8007c8c <__libc_init_array+0xc>
 8007cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb2:	4798      	blx	r3
 8007cb4:	3601      	adds	r6, #1
 8007cb6:	e7f2      	b.n	8007c9e <__libc_init_array+0x1e>
 8007cb8:	0800d06c 	.word	0x0800d06c
 8007cbc:	0800d06c 	.word	0x0800d06c
 8007cc0:	0800d06c 	.word	0x0800d06c
 8007cc4:	0800d070 	.word	0x0800d070

08007cc8 <memset>:
 8007cc8:	4402      	add	r2, r0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d100      	bne.n	8007cd2 <memset+0xa>
 8007cd0:	4770      	bx	lr
 8007cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd6:	e7f9      	b.n	8007ccc <memset+0x4>

08007cd8 <__cvt>:
 8007cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	ec55 4b10 	vmov	r4, r5, d0
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	460e      	mov	r6, r1
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	bfbb      	ittet	lt
 8007cea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cee:	461d      	movlt	r5, r3
 8007cf0:	2300      	movge	r3, #0
 8007cf2:	232d      	movlt	r3, #45	; 0x2d
 8007cf4:	700b      	strb	r3, [r1, #0]
 8007cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cfc:	4691      	mov	r9, r2
 8007cfe:	f023 0820 	bic.w	r8, r3, #32
 8007d02:	bfbc      	itt	lt
 8007d04:	4622      	movlt	r2, r4
 8007d06:	4614      	movlt	r4, r2
 8007d08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d0c:	d005      	beq.n	8007d1a <__cvt+0x42>
 8007d0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d12:	d100      	bne.n	8007d16 <__cvt+0x3e>
 8007d14:	3601      	adds	r6, #1
 8007d16:	2102      	movs	r1, #2
 8007d18:	e000      	b.n	8007d1c <__cvt+0x44>
 8007d1a:	2103      	movs	r1, #3
 8007d1c:	ab03      	add	r3, sp, #12
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	ab02      	add	r3, sp, #8
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	ec45 4b10 	vmov	d0, r4, r5
 8007d28:	4653      	mov	r3, sl
 8007d2a:	4632      	mov	r2, r6
 8007d2c:	f001 fe18 	bl	8009960 <_dtoa_r>
 8007d30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d34:	4607      	mov	r7, r0
 8007d36:	d102      	bne.n	8007d3e <__cvt+0x66>
 8007d38:	f019 0f01 	tst.w	r9, #1
 8007d3c:	d022      	beq.n	8007d84 <__cvt+0xac>
 8007d3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d42:	eb07 0906 	add.w	r9, r7, r6
 8007d46:	d110      	bne.n	8007d6a <__cvt+0x92>
 8007d48:	783b      	ldrb	r3, [r7, #0]
 8007d4a:	2b30      	cmp	r3, #48	; 0x30
 8007d4c:	d10a      	bne.n	8007d64 <__cvt+0x8c>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2300      	movs	r3, #0
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7f8 fec7 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d5a:	b918      	cbnz	r0, 8007d64 <__cvt+0x8c>
 8007d5c:	f1c6 0601 	rsb	r6, r6, #1
 8007d60:	f8ca 6000 	str.w	r6, [sl]
 8007d64:	f8da 3000 	ldr.w	r3, [sl]
 8007d68:	4499      	add	r9, r3
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 feb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d76:	b108      	cbz	r0, 8007d7c <__cvt+0xa4>
 8007d78:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d7c:	2230      	movs	r2, #48	; 0x30
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	454b      	cmp	r3, r9
 8007d82:	d307      	bcc.n	8007d94 <__cvt+0xbc>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d88:	1bdb      	subs	r3, r3, r7
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	b004      	add	sp, #16
 8007d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d94:	1c59      	adds	r1, r3, #1
 8007d96:	9103      	str	r1, [sp, #12]
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	e7f0      	b.n	8007d7e <__cvt+0xa6>

08007d9c <__exponent>:
 8007d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2900      	cmp	r1, #0
 8007da2:	bfb8      	it	lt
 8007da4:	4249      	neglt	r1, r1
 8007da6:	f803 2b02 	strb.w	r2, [r3], #2
 8007daa:	bfb4      	ite	lt
 8007dac:	222d      	movlt	r2, #45	; 0x2d
 8007dae:	222b      	movge	r2, #43	; 0x2b
 8007db0:	2909      	cmp	r1, #9
 8007db2:	7042      	strb	r2, [r0, #1]
 8007db4:	dd2a      	ble.n	8007e0c <__exponent+0x70>
 8007db6:	f10d 0407 	add.w	r4, sp, #7
 8007dba:	46a4      	mov	ip, r4
 8007dbc:	270a      	movs	r7, #10
 8007dbe:	46a6      	mov	lr, r4
 8007dc0:	460a      	mov	r2, r1
 8007dc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dc6:	fb07 1516 	mls	r5, r7, r6, r1
 8007dca:	3530      	adds	r5, #48	; 0x30
 8007dcc:	2a63      	cmp	r2, #99	; 0x63
 8007dce:	f104 34ff 	add.w	r4, r4, #4294967295
 8007dd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	dcf1      	bgt.n	8007dbe <__exponent+0x22>
 8007dda:	3130      	adds	r1, #48	; 0x30
 8007ddc:	f1ae 0502 	sub.w	r5, lr, #2
 8007de0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007de4:	1c44      	adds	r4, r0, #1
 8007de6:	4629      	mov	r1, r5
 8007de8:	4561      	cmp	r1, ip
 8007dea:	d30a      	bcc.n	8007e02 <__exponent+0x66>
 8007dec:	f10d 0209 	add.w	r2, sp, #9
 8007df0:	eba2 020e 	sub.w	r2, r2, lr
 8007df4:	4565      	cmp	r5, ip
 8007df6:	bf88      	it	hi
 8007df8:	2200      	movhi	r2, #0
 8007dfa:	4413      	add	r3, r2
 8007dfc:	1a18      	subs	r0, r3, r0
 8007dfe:	b003      	add	sp, #12
 8007e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e0a:	e7ed      	b.n	8007de8 <__exponent+0x4c>
 8007e0c:	2330      	movs	r3, #48	; 0x30
 8007e0e:	3130      	adds	r1, #48	; 0x30
 8007e10:	7083      	strb	r3, [r0, #2]
 8007e12:	70c1      	strb	r1, [r0, #3]
 8007e14:	1d03      	adds	r3, r0, #4
 8007e16:	e7f1      	b.n	8007dfc <__exponent+0x60>

08007e18 <_printf_float>:
 8007e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1c:	ed2d 8b02 	vpush	{d8}
 8007e20:	b08d      	sub	sp, #52	; 0x34
 8007e22:	460c      	mov	r4, r1
 8007e24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e28:	4616      	mov	r6, r2
 8007e2a:	461f      	mov	r7, r3
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	f002 fef5 	bl	800ac1c <_localeconv_r>
 8007e32:	f8d0 a000 	ldr.w	sl, [r0]
 8007e36:	4650      	mov	r0, sl
 8007e38:	f7f8 f9d4 	bl	80001e4 <strlen>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	9305      	str	r3, [sp, #20]
 8007e44:	f8d8 3000 	ldr.w	r3, [r8]
 8007e48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e4c:	3307      	adds	r3, #7
 8007e4e:	f023 0307 	bic.w	r3, r3, #7
 8007e52:	f103 0208 	add.w	r2, r3, #8
 8007e56:	f8c8 2000 	str.w	r2, [r8]
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e6a:	9307      	str	r3, [sp, #28]
 8007e6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e70:	ee08 0a10 	vmov	s16, r0
 8007e74:	4b9f      	ldr	r3, [pc, #636]	; (80080f4 <_printf_float+0x2dc>)
 8007e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7e:	f7f8 fe65 	bl	8000b4c <__aeabi_dcmpun>
 8007e82:	bb88      	cbnz	r0, 8007ee8 <_printf_float+0xd0>
 8007e84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e88:	4b9a      	ldr	r3, [pc, #616]	; (80080f4 <_printf_float+0x2dc>)
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8e:	f7f8 fe3f 	bl	8000b10 <__aeabi_dcmple>
 8007e92:	bb48      	cbnz	r0, 8007ee8 <_printf_float+0xd0>
 8007e94:	2200      	movs	r2, #0
 8007e96:	2300      	movs	r3, #0
 8007e98:	4640      	mov	r0, r8
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	f7f8 fe2e 	bl	8000afc <__aeabi_dcmplt>
 8007ea0:	b110      	cbz	r0, 8007ea8 <_printf_float+0x90>
 8007ea2:	232d      	movs	r3, #45	; 0x2d
 8007ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea8:	4b93      	ldr	r3, [pc, #588]	; (80080f8 <_printf_float+0x2e0>)
 8007eaa:	4894      	ldr	r0, [pc, #592]	; (80080fc <_printf_float+0x2e4>)
 8007eac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007eb0:	bf94      	ite	ls
 8007eb2:	4698      	movls	r8, r3
 8007eb4:	4680      	movhi	r8, r0
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	9b05      	ldr	r3, [sp, #20]
 8007ebc:	f023 0204 	bic.w	r2, r3, #4
 8007ec0:	6022      	str	r2, [r4, #0]
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	9700      	str	r7, [sp, #0]
 8007ec8:	4633      	mov	r3, r6
 8007eca:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f000 f9d8 	bl	8008284 <_printf_common>
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	f040 8090 	bne.w	8007ffa <_printf_float+0x1e2>
 8007eda:	f04f 30ff 	mov.w	r0, #4294967295
 8007ede:	b00d      	add	sp, #52	; 0x34
 8007ee0:	ecbd 8b02 	vpop	{d8}
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	4642      	mov	r2, r8
 8007eea:	464b      	mov	r3, r9
 8007eec:	4640      	mov	r0, r8
 8007eee:	4649      	mov	r1, r9
 8007ef0:	f7f8 fe2c 	bl	8000b4c <__aeabi_dcmpun>
 8007ef4:	b140      	cbz	r0, 8007f08 <_printf_float+0xf0>
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bfbc      	itt	lt
 8007efc:	232d      	movlt	r3, #45	; 0x2d
 8007efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f02:	487f      	ldr	r0, [pc, #508]	; (8008100 <_printf_float+0x2e8>)
 8007f04:	4b7f      	ldr	r3, [pc, #508]	; (8008104 <_printf_float+0x2ec>)
 8007f06:	e7d1      	b.n	8007eac <_printf_float+0x94>
 8007f08:	6863      	ldr	r3, [r4, #4]
 8007f0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f0e:	9206      	str	r2, [sp, #24]
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	d13f      	bne.n	8007f94 <_printf_float+0x17c>
 8007f14:	2306      	movs	r3, #6
 8007f16:	6063      	str	r3, [r4, #4]
 8007f18:	9b05      	ldr	r3, [sp, #20]
 8007f1a:	6861      	ldr	r1, [r4, #4]
 8007f1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f20:	2300      	movs	r3, #0
 8007f22:	9303      	str	r3, [sp, #12]
 8007f24:	ab0a      	add	r3, sp, #40	; 0x28
 8007f26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f2a:	ab09      	add	r3, sp, #36	; 0x24
 8007f2c:	ec49 8b10 	vmov	d0, r8, r9
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	6022      	str	r2, [r4, #0]
 8007f34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f7ff fecd 	bl	8007cd8 <__cvt>
 8007f3e:	9b06      	ldr	r3, [sp, #24]
 8007f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f42:	2b47      	cmp	r3, #71	; 0x47
 8007f44:	4680      	mov	r8, r0
 8007f46:	d108      	bne.n	8007f5a <_printf_float+0x142>
 8007f48:	1cc8      	adds	r0, r1, #3
 8007f4a:	db02      	blt.n	8007f52 <_printf_float+0x13a>
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	4299      	cmp	r1, r3
 8007f50:	dd41      	ble.n	8007fd6 <_printf_float+0x1be>
 8007f52:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f56:	fa5f fb8b 	uxtb.w	fp, fp
 8007f5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f5e:	d820      	bhi.n	8007fa2 <_printf_float+0x18a>
 8007f60:	3901      	subs	r1, #1
 8007f62:	465a      	mov	r2, fp
 8007f64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f68:	9109      	str	r1, [sp, #36]	; 0x24
 8007f6a:	f7ff ff17 	bl	8007d9c <__exponent>
 8007f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f70:	1813      	adds	r3, r2, r0
 8007f72:	2a01      	cmp	r2, #1
 8007f74:	4681      	mov	r9, r0
 8007f76:	6123      	str	r3, [r4, #16]
 8007f78:	dc02      	bgt.n	8007f80 <_printf_float+0x168>
 8007f7a:	6822      	ldr	r2, [r4, #0]
 8007f7c:	07d2      	lsls	r2, r2, #31
 8007f7e:	d501      	bpl.n	8007f84 <_printf_float+0x16c>
 8007f80:	3301      	adds	r3, #1
 8007f82:	6123      	str	r3, [r4, #16]
 8007f84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d09c      	beq.n	8007ec6 <_printf_float+0xae>
 8007f8c:	232d      	movs	r3, #45	; 0x2d
 8007f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f92:	e798      	b.n	8007ec6 <_printf_float+0xae>
 8007f94:	9a06      	ldr	r2, [sp, #24]
 8007f96:	2a47      	cmp	r2, #71	; 0x47
 8007f98:	d1be      	bne.n	8007f18 <_printf_float+0x100>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1bc      	bne.n	8007f18 <_printf_float+0x100>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e7b9      	b.n	8007f16 <_printf_float+0xfe>
 8007fa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fa6:	d118      	bne.n	8007fda <_printf_float+0x1c2>
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	6863      	ldr	r3, [r4, #4]
 8007fac:	dd0b      	ble.n	8007fc6 <_printf_float+0x1ae>
 8007fae:	6121      	str	r1, [r4, #16]
 8007fb0:	b913      	cbnz	r3, 8007fb8 <_printf_float+0x1a0>
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	07d0      	lsls	r0, r2, #31
 8007fb6:	d502      	bpl.n	8007fbe <_printf_float+0x1a6>
 8007fb8:	3301      	adds	r3, #1
 8007fba:	440b      	add	r3, r1
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fc0:	f04f 0900 	mov.w	r9, #0
 8007fc4:	e7de      	b.n	8007f84 <_printf_float+0x16c>
 8007fc6:	b913      	cbnz	r3, 8007fce <_printf_float+0x1b6>
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	07d2      	lsls	r2, r2, #31
 8007fcc:	d501      	bpl.n	8007fd2 <_printf_float+0x1ba>
 8007fce:	3302      	adds	r3, #2
 8007fd0:	e7f4      	b.n	8007fbc <_printf_float+0x1a4>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e7f2      	b.n	8007fbc <_printf_float+0x1a4>
 8007fd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fdc:	4299      	cmp	r1, r3
 8007fde:	db05      	blt.n	8007fec <_printf_float+0x1d4>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	6121      	str	r1, [r4, #16]
 8007fe4:	07d8      	lsls	r0, r3, #31
 8007fe6:	d5ea      	bpl.n	8007fbe <_printf_float+0x1a6>
 8007fe8:	1c4b      	adds	r3, r1, #1
 8007fea:	e7e7      	b.n	8007fbc <_printf_float+0x1a4>
 8007fec:	2900      	cmp	r1, #0
 8007fee:	bfd4      	ite	le
 8007ff0:	f1c1 0202 	rsble	r2, r1, #2
 8007ff4:	2201      	movgt	r2, #1
 8007ff6:	4413      	add	r3, r2
 8007ff8:	e7e0      	b.n	8007fbc <_printf_float+0x1a4>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	055a      	lsls	r2, r3, #21
 8007ffe:	d407      	bmi.n	8008010 <_printf_float+0x1f8>
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	4642      	mov	r2, r8
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	d12c      	bne.n	8008068 <_printf_float+0x250>
 800800e:	e764      	b.n	8007eda <_printf_float+0xc2>
 8008010:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008014:	f240 80e0 	bls.w	80081d8 <_printf_float+0x3c0>
 8008018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800801c:	2200      	movs	r2, #0
 800801e:	2300      	movs	r3, #0
 8008020:	f7f8 fd62 	bl	8000ae8 <__aeabi_dcmpeq>
 8008024:	2800      	cmp	r0, #0
 8008026:	d034      	beq.n	8008092 <_printf_float+0x27a>
 8008028:	4a37      	ldr	r2, [pc, #220]	; (8008108 <_printf_float+0x2f0>)
 800802a:	2301      	movs	r3, #1
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	47b8      	blx	r7
 8008032:	3001      	adds	r0, #1
 8008034:	f43f af51 	beq.w	8007eda <_printf_float+0xc2>
 8008038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800803c:	429a      	cmp	r2, r3
 800803e:	db02      	blt.n	8008046 <_printf_float+0x22e>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	07d8      	lsls	r0, r3, #31
 8008044:	d510      	bpl.n	8008068 <_printf_float+0x250>
 8008046:	ee18 3a10 	vmov	r3, s16
 800804a:	4652      	mov	r2, sl
 800804c:	4631      	mov	r1, r6
 800804e:	4628      	mov	r0, r5
 8008050:	47b8      	blx	r7
 8008052:	3001      	adds	r0, #1
 8008054:	f43f af41 	beq.w	8007eda <_printf_float+0xc2>
 8008058:	f04f 0800 	mov.w	r8, #0
 800805c:	f104 091a 	add.w	r9, r4, #26
 8008060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008062:	3b01      	subs	r3, #1
 8008064:	4543      	cmp	r3, r8
 8008066:	dc09      	bgt.n	800807c <_printf_float+0x264>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	079b      	lsls	r3, r3, #30
 800806c:	f100 8105 	bmi.w	800827a <_printf_float+0x462>
 8008070:	68e0      	ldr	r0, [r4, #12]
 8008072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008074:	4298      	cmp	r0, r3
 8008076:	bfb8      	it	lt
 8008078:	4618      	movlt	r0, r3
 800807a:	e730      	b.n	8007ede <_printf_float+0xc6>
 800807c:	2301      	movs	r3, #1
 800807e:	464a      	mov	r2, r9
 8008080:	4631      	mov	r1, r6
 8008082:	4628      	mov	r0, r5
 8008084:	47b8      	blx	r7
 8008086:	3001      	adds	r0, #1
 8008088:	f43f af27 	beq.w	8007eda <_printf_float+0xc2>
 800808c:	f108 0801 	add.w	r8, r8, #1
 8008090:	e7e6      	b.n	8008060 <_printf_float+0x248>
 8008092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	dc39      	bgt.n	800810c <_printf_float+0x2f4>
 8008098:	4a1b      	ldr	r2, [pc, #108]	; (8008108 <_printf_float+0x2f0>)
 800809a:	2301      	movs	r3, #1
 800809c:	4631      	mov	r1, r6
 800809e:	4628      	mov	r0, r5
 80080a0:	47b8      	blx	r7
 80080a2:	3001      	adds	r0, #1
 80080a4:	f43f af19 	beq.w	8007eda <_printf_float+0xc2>
 80080a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ac:	4313      	orrs	r3, r2
 80080ae:	d102      	bne.n	80080b6 <_printf_float+0x29e>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	07d9      	lsls	r1, r3, #31
 80080b4:	d5d8      	bpl.n	8008068 <_printf_float+0x250>
 80080b6:	ee18 3a10 	vmov	r3, s16
 80080ba:	4652      	mov	r2, sl
 80080bc:	4631      	mov	r1, r6
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f af09 	beq.w	8007eda <_printf_float+0xc2>
 80080c8:	f04f 0900 	mov.w	r9, #0
 80080cc:	f104 0a1a 	add.w	sl, r4, #26
 80080d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d2:	425b      	negs	r3, r3
 80080d4:	454b      	cmp	r3, r9
 80080d6:	dc01      	bgt.n	80080dc <_printf_float+0x2c4>
 80080d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080da:	e792      	b.n	8008002 <_printf_float+0x1ea>
 80080dc:	2301      	movs	r3, #1
 80080de:	4652      	mov	r2, sl
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f aef7 	beq.w	8007eda <_printf_float+0xc2>
 80080ec:	f109 0901 	add.w	r9, r9, #1
 80080f0:	e7ee      	b.n	80080d0 <_printf_float+0x2b8>
 80080f2:	bf00      	nop
 80080f4:	7fefffff 	.word	0x7fefffff
 80080f8:	0800ccc4 	.word	0x0800ccc4
 80080fc:	0800ccc8 	.word	0x0800ccc8
 8008100:	0800ccd0 	.word	0x0800ccd0
 8008104:	0800cccc 	.word	0x0800cccc
 8008108:	0800ccd4 	.word	0x0800ccd4
 800810c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800810e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008110:	429a      	cmp	r2, r3
 8008112:	bfa8      	it	ge
 8008114:	461a      	movge	r2, r3
 8008116:	2a00      	cmp	r2, #0
 8008118:	4691      	mov	r9, r2
 800811a:	dc37      	bgt.n	800818c <_printf_float+0x374>
 800811c:	f04f 0b00 	mov.w	fp, #0
 8008120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008124:	f104 021a 	add.w	r2, r4, #26
 8008128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800812a:	9305      	str	r3, [sp, #20]
 800812c:	eba3 0309 	sub.w	r3, r3, r9
 8008130:	455b      	cmp	r3, fp
 8008132:	dc33      	bgt.n	800819c <_printf_float+0x384>
 8008134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008138:	429a      	cmp	r2, r3
 800813a:	db3b      	blt.n	80081b4 <_printf_float+0x39c>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	07da      	lsls	r2, r3, #31
 8008140:	d438      	bmi.n	80081b4 <_printf_float+0x39c>
 8008142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008144:	9a05      	ldr	r2, [sp, #20]
 8008146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008148:	1a9a      	subs	r2, r3, r2
 800814a:	eba3 0901 	sub.w	r9, r3, r1
 800814e:	4591      	cmp	r9, r2
 8008150:	bfa8      	it	ge
 8008152:	4691      	movge	r9, r2
 8008154:	f1b9 0f00 	cmp.w	r9, #0
 8008158:	dc35      	bgt.n	80081c6 <_printf_float+0x3ae>
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008162:	f104 0a1a 	add.w	sl, r4, #26
 8008166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800816a:	1a9b      	subs	r3, r3, r2
 800816c:	eba3 0309 	sub.w	r3, r3, r9
 8008170:	4543      	cmp	r3, r8
 8008172:	f77f af79 	ble.w	8008068 <_printf_float+0x250>
 8008176:	2301      	movs	r3, #1
 8008178:	4652      	mov	r2, sl
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	f43f aeaa 	beq.w	8007eda <_printf_float+0xc2>
 8008186:	f108 0801 	add.w	r8, r8, #1
 800818a:	e7ec      	b.n	8008166 <_printf_float+0x34e>
 800818c:	4613      	mov	r3, r2
 800818e:	4631      	mov	r1, r6
 8008190:	4642      	mov	r2, r8
 8008192:	4628      	mov	r0, r5
 8008194:	47b8      	blx	r7
 8008196:	3001      	adds	r0, #1
 8008198:	d1c0      	bne.n	800811c <_printf_float+0x304>
 800819a:	e69e      	b.n	8007eda <_printf_float+0xc2>
 800819c:	2301      	movs	r3, #1
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	9205      	str	r2, [sp, #20]
 80081a4:	47b8      	blx	r7
 80081a6:	3001      	adds	r0, #1
 80081a8:	f43f ae97 	beq.w	8007eda <_printf_float+0xc2>
 80081ac:	9a05      	ldr	r2, [sp, #20]
 80081ae:	f10b 0b01 	add.w	fp, fp, #1
 80081b2:	e7b9      	b.n	8008128 <_printf_float+0x310>
 80081b4:	ee18 3a10 	vmov	r3, s16
 80081b8:	4652      	mov	r2, sl
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	d1be      	bne.n	8008142 <_printf_float+0x32a>
 80081c4:	e689      	b.n	8007eda <_printf_float+0xc2>
 80081c6:	9a05      	ldr	r2, [sp, #20]
 80081c8:	464b      	mov	r3, r9
 80081ca:	4442      	add	r2, r8
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b8      	blx	r7
 80081d2:	3001      	adds	r0, #1
 80081d4:	d1c1      	bne.n	800815a <_printf_float+0x342>
 80081d6:	e680      	b.n	8007eda <_printf_float+0xc2>
 80081d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081da:	2a01      	cmp	r2, #1
 80081dc:	dc01      	bgt.n	80081e2 <_printf_float+0x3ca>
 80081de:	07db      	lsls	r3, r3, #31
 80081e0:	d538      	bpl.n	8008254 <_printf_float+0x43c>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4642      	mov	r2, r8
 80081e6:	4631      	mov	r1, r6
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b8      	blx	r7
 80081ec:	3001      	adds	r0, #1
 80081ee:	f43f ae74 	beq.w	8007eda <_printf_float+0xc2>
 80081f2:	ee18 3a10 	vmov	r3, s16
 80081f6:	4652      	mov	r2, sl
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f ae6b 	beq.w	8007eda <_printf_float+0xc2>
 8008204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008208:	2200      	movs	r2, #0
 800820a:	2300      	movs	r3, #0
 800820c:	f7f8 fc6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008210:	b9d8      	cbnz	r0, 800824a <_printf_float+0x432>
 8008212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008214:	f108 0201 	add.w	r2, r8, #1
 8008218:	3b01      	subs	r3, #1
 800821a:	4631      	mov	r1, r6
 800821c:	4628      	mov	r0, r5
 800821e:	47b8      	blx	r7
 8008220:	3001      	adds	r0, #1
 8008222:	d10e      	bne.n	8008242 <_printf_float+0x42a>
 8008224:	e659      	b.n	8007eda <_printf_float+0xc2>
 8008226:	2301      	movs	r3, #1
 8008228:	4652      	mov	r2, sl
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	47b8      	blx	r7
 8008230:	3001      	adds	r0, #1
 8008232:	f43f ae52 	beq.w	8007eda <_printf_float+0xc2>
 8008236:	f108 0801 	add.w	r8, r8, #1
 800823a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823c:	3b01      	subs	r3, #1
 800823e:	4543      	cmp	r3, r8
 8008240:	dcf1      	bgt.n	8008226 <_printf_float+0x40e>
 8008242:	464b      	mov	r3, r9
 8008244:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008248:	e6dc      	b.n	8008004 <_printf_float+0x1ec>
 800824a:	f04f 0800 	mov.w	r8, #0
 800824e:	f104 0a1a 	add.w	sl, r4, #26
 8008252:	e7f2      	b.n	800823a <_printf_float+0x422>
 8008254:	2301      	movs	r3, #1
 8008256:	4642      	mov	r2, r8
 8008258:	e7df      	b.n	800821a <_printf_float+0x402>
 800825a:	2301      	movs	r3, #1
 800825c:	464a      	mov	r2, r9
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	47b8      	blx	r7
 8008264:	3001      	adds	r0, #1
 8008266:	f43f ae38 	beq.w	8007eda <_printf_float+0xc2>
 800826a:	f108 0801 	add.w	r8, r8, #1
 800826e:	68e3      	ldr	r3, [r4, #12]
 8008270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008272:	1a5b      	subs	r3, r3, r1
 8008274:	4543      	cmp	r3, r8
 8008276:	dcf0      	bgt.n	800825a <_printf_float+0x442>
 8008278:	e6fa      	b.n	8008070 <_printf_float+0x258>
 800827a:	f04f 0800 	mov.w	r8, #0
 800827e:	f104 0919 	add.w	r9, r4, #25
 8008282:	e7f4      	b.n	800826e <_printf_float+0x456>

08008284 <_printf_common>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	4616      	mov	r6, r2
 800828a:	4699      	mov	r9, r3
 800828c:	688a      	ldr	r2, [r1, #8]
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008294:	4293      	cmp	r3, r2
 8008296:	bfb8      	it	lt
 8008298:	4613      	movlt	r3, r2
 800829a:	6033      	str	r3, [r6, #0]
 800829c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082a0:	4607      	mov	r7, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	b10a      	cbz	r2, 80082aa <_printf_common+0x26>
 80082a6:	3301      	adds	r3, #1
 80082a8:	6033      	str	r3, [r6, #0]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	0699      	lsls	r1, r3, #26
 80082ae:	bf42      	ittt	mi
 80082b0:	6833      	ldrmi	r3, [r6, #0]
 80082b2:	3302      	addmi	r3, #2
 80082b4:	6033      	strmi	r3, [r6, #0]
 80082b6:	6825      	ldr	r5, [r4, #0]
 80082b8:	f015 0506 	ands.w	r5, r5, #6
 80082bc:	d106      	bne.n	80082cc <_printf_common+0x48>
 80082be:	f104 0a19 	add.w	sl, r4, #25
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	6832      	ldr	r2, [r6, #0]
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	dc26      	bgt.n	800831a <_printf_common+0x96>
 80082cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082d0:	1e13      	subs	r3, r2, #0
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	2301      	movne	r3, #1
 80082d8:	0692      	lsls	r2, r2, #26
 80082da:	d42b      	bmi.n	8008334 <_printf_common+0xb0>
 80082dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082e0:	4649      	mov	r1, r9
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c0      	blx	r8
 80082e6:	3001      	adds	r0, #1
 80082e8:	d01e      	beq.n	8008328 <_printf_common+0xa4>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	68e5      	ldr	r5, [r4, #12]
 80082ee:	6832      	ldr	r2, [r6, #0]
 80082f0:	f003 0306 	and.w	r3, r3, #6
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	bf08      	it	eq
 80082f8:	1aad      	subeq	r5, r5, r2
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	6922      	ldr	r2, [r4, #16]
 80082fe:	bf0c      	ite	eq
 8008300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008304:	2500      	movne	r5, #0
 8008306:	4293      	cmp	r3, r2
 8008308:	bfc4      	itt	gt
 800830a:	1a9b      	subgt	r3, r3, r2
 800830c:	18ed      	addgt	r5, r5, r3
 800830e:	2600      	movs	r6, #0
 8008310:	341a      	adds	r4, #26
 8008312:	42b5      	cmp	r5, r6
 8008314:	d11a      	bne.n	800834c <_printf_common+0xc8>
 8008316:	2000      	movs	r0, #0
 8008318:	e008      	b.n	800832c <_printf_common+0xa8>
 800831a:	2301      	movs	r3, #1
 800831c:	4652      	mov	r2, sl
 800831e:	4649      	mov	r1, r9
 8008320:	4638      	mov	r0, r7
 8008322:	47c0      	blx	r8
 8008324:	3001      	adds	r0, #1
 8008326:	d103      	bne.n	8008330 <_printf_common+0xac>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008330:	3501      	adds	r5, #1
 8008332:	e7c6      	b.n	80082c2 <_printf_common+0x3e>
 8008334:	18e1      	adds	r1, r4, r3
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	2030      	movs	r0, #48	; 0x30
 800833a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800833e:	4422      	add	r2, r4
 8008340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008348:	3302      	adds	r3, #2
 800834a:	e7c7      	b.n	80082dc <_printf_common+0x58>
 800834c:	2301      	movs	r3, #1
 800834e:	4622      	mov	r2, r4
 8008350:	4649      	mov	r1, r9
 8008352:	4638      	mov	r0, r7
 8008354:	47c0      	blx	r8
 8008356:	3001      	adds	r0, #1
 8008358:	d0e6      	beq.n	8008328 <_printf_common+0xa4>
 800835a:	3601      	adds	r6, #1
 800835c:	e7d9      	b.n	8008312 <_printf_common+0x8e>
	...

08008360 <_printf_i>:
 8008360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	7e0f      	ldrb	r7, [r1, #24]
 8008366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008368:	2f78      	cmp	r7, #120	; 0x78
 800836a:	4691      	mov	r9, r2
 800836c:	4680      	mov	r8, r0
 800836e:	460c      	mov	r4, r1
 8008370:	469a      	mov	sl, r3
 8008372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008376:	d807      	bhi.n	8008388 <_printf_i+0x28>
 8008378:	2f62      	cmp	r7, #98	; 0x62
 800837a:	d80a      	bhi.n	8008392 <_printf_i+0x32>
 800837c:	2f00      	cmp	r7, #0
 800837e:	f000 80d8 	beq.w	8008532 <_printf_i+0x1d2>
 8008382:	2f58      	cmp	r7, #88	; 0x58
 8008384:	f000 80a3 	beq.w	80084ce <_printf_i+0x16e>
 8008388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800838c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008390:	e03a      	b.n	8008408 <_printf_i+0xa8>
 8008392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008396:	2b15      	cmp	r3, #21
 8008398:	d8f6      	bhi.n	8008388 <_printf_i+0x28>
 800839a:	a101      	add	r1, pc, #4	; (adr r1, 80083a0 <_printf_i+0x40>)
 800839c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083a0:	080083f9 	.word	0x080083f9
 80083a4:	0800840d 	.word	0x0800840d
 80083a8:	08008389 	.word	0x08008389
 80083ac:	08008389 	.word	0x08008389
 80083b0:	08008389 	.word	0x08008389
 80083b4:	08008389 	.word	0x08008389
 80083b8:	0800840d 	.word	0x0800840d
 80083bc:	08008389 	.word	0x08008389
 80083c0:	08008389 	.word	0x08008389
 80083c4:	08008389 	.word	0x08008389
 80083c8:	08008389 	.word	0x08008389
 80083cc:	08008519 	.word	0x08008519
 80083d0:	0800843d 	.word	0x0800843d
 80083d4:	080084fb 	.word	0x080084fb
 80083d8:	08008389 	.word	0x08008389
 80083dc:	08008389 	.word	0x08008389
 80083e0:	0800853b 	.word	0x0800853b
 80083e4:	08008389 	.word	0x08008389
 80083e8:	0800843d 	.word	0x0800843d
 80083ec:	08008389 	.word	0x08008389
 80083f0:	08008389 	.word	0x08008389
 80083f4:	08008503 	.word	0x08008503
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	1d1a      	adds	r2, r3, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	602a      	str	r2, [r5, #0]
 8008400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008408:	2301      	movs	r3, #1
 800840a:	e0a3      	b.n	8008554 <_printf_i+0x1f4>
 800840c:	6820      	ldr	r0, [r4, #0]
 800840e:	6829      	ldr	r1, [r5, #0]
 8008410:	0606      	lsls	r6, r0, #24
 8008412:	f101 0304 	add.w	r3, r1, #4
 8008416:	d50a      	bpl.n	800842e <_printf_i+0xce>
 8008418:	680e      	ldr	r6, [r1, #0]
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	2e00      	cmp	r6, #0
 800841e:	da03      	bge.n	8008428 <_printf_i+0xc8>
 8008420:	232d      	movs	r3, #45	; 0x2d
 8008422:	4276      	negs	r6, r6
 8008424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008428:	485e      	ldr	r0, [pc, #376]	; (80085a4 <_printf_i+0x244>)
 800842a:	230a      	movs	r3, #10
 800842c:	e019      	b.n	8008462 <_printf_i+0x102>
 800842e:	680e      	ldr	r6, [r1, #0]
 8008430:	602b      	str	r3, [r5, #0]
 8008432:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008436:	bf18      	it	ne
 8008438:	b236      	sxthne	r6, r6
 800843a:	e7ef      	b.n	800841c <_printf_i+0xbc>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	6820      	ldr	r0, [r4, #0]
 8008440:	1d19      	adds	r1, r3, #4
 8008442:	6029      	str	r1, [r5, #0]
 8008444:	0601      	lsls	r1, r0, #24
 8008446:	d501      	bpl.n	800844c <_printf_i+0xec>
 8008448:	681e      	ldr	r6, [r3, #0]
 800844a:	e002      	b.n	8008452 <_printf_i+0xf2>
 800844c:	0646      	lsls	r6, r0, #25
 800844e:	d5fb      	bpl.n	8008448 <_printf_i+0xe8>
 8008450:	881e      	ldrh	r6, [r3, #0]
 8008452:	4854      	ldr	r0, [pc, #336]	; (80085a4 <_printf_i+0x244>)
 8008454:	2f6f      	cmp	r7, #111	; 0x6f
 8008456:	bf0c      	ite	eq
 8008458:	2308      	moveq	r3, #8
 800845a:	230a      	movne	r3, #10
 800845c:	2100      	movs	r1, #0
 800845e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008462:	6865      	ldr	r5, [r4, #4]
 8008464:	60a5      	str	r5, [r4, #8]
 8008466:	2d00      	cmp	r5, #0
 8008468:	bfa2      	ittt	ge
 800846a:	6821      	ldrge	r1, [r4, #0]
 800846c:	f021 0104 	bicge.w	r1, r1, #4
 8008470:	6021      	strge	r1, [r4, #0]
 8008472:	b90e      	cbnz	r6, 8008478 <_printf_i+0x118>
 8008474:	2d00      	cmp	r5, #0
 8008476:	d04d      	beq.n	8008514 <_printf_i+0x1b4>
 8008478:	4615      	mov	r5, r2
 800847a:	fbb6 f1f3 	udiv	r1, r6, r3
 800847e:	fb03 6711 	mls	r7, r3, r1, r6
 8008482:	5dc7      	ldrb	r7, [r0, r7]
 8008484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008488:	4637      	mov	r7, r6
 800848a:	42bb      	cmp	r3, r7
 800848c:	460e      	mov	r6, r1
 800848e:	d9f4      	bls.n	800847a <_printf_i+0x11a>
 8008490:	2b08      	cmp	r3, #8
 8008492:	d10b      	bne.n	80084ac <_printf_i+0x14c>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	07de      	lsls	r6, r3, #31
 8008498:	d508      	bpl.n	80084ac <_printf_i+0x14c>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	6861      	ldr	r1, [r4, #4]
 800849e:	4299      	cmp	r1, r3
 80084a0:	bfde      	ittt	le
 80084a2:	2330      	movle	r3, #48	; 0x30
 80084a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084ac:	1b52      	subs	r2, r2, r5
 80084ae:	6122      	str	r2, [r4, #16]
 80084b0:	f8cd a000 	str.w	sl, [sp]
 80084b4:	464b      	mov	r3, r9
 80084b6:	aa03      	add	r2, sp, #12
 80084b8:	4621      	mov	r1, r4
 80084ba:	4640      	mov	r0, r8
 80084bc:	f7ff fee2 	bl	8008284 <_printf_common>
 80084c0:	3001      	adds	r0, #1
 80084c2:	d14c      	bne.n	800855e <_printf_i+0x1fe>
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	b004      	add	sp, #16
 80084ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ce:	4835      	ldr	r0, [pc, #212]	; (80085a4 <_printf_i+0x244>)
 80084d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084d4:	6829      	ldr	r1, [r5, #0]
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80084dc:	6029      	str	r1, [r5, #0]
 80084de:	061d      	lsls	r5, r3, #24
 80084e0:	d514      	bpl.n	800850c <_printf_i+0x1ac>
 80084e2:	07df      	lsls	r7, r3, #31
 80084e4:	bf44      	itt	mi
 80084e6:	f043 0320 	orrmi.w	r3, r3, #32
 80084ea:	6023      	strmi	r3, [r4, #0]
 80084ec:	b91e      	cbnz	r6, 80084f6 <_printf_i+0x196>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	f023 0320 	bic.w	r3, r3, #32
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	2310      	movs	r3, #16
 80084f8:	e7b0      	b.n	800845c <_printf_i+0xfc>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	f043 0320 	orr.w	r3, r3, #32
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	2378      	movs	r3, #120	; 0x78
 8008504:	4828      	ldr	r0, [pc, #160]	; (80085a8 <_printf_i+0x248>)
 8008506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800850a:	e7e3      	b.n	80084d4 <_printf_i+0x174>
 800850c:	0659      	lsls	r1, r3, #25
 800850e:	bf48      	it	mi
 8008510:	b2b6      	uxthmi	r6, r6
 8008512:	e7e6      	b.n	80084e2 <_printf_i+0x182>
 8008514:	4615      	mov	r5, r2
 8008516:	e7bb      	b.n	8008490 <_printf_i+0x130>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	6826      	ldr	r6, [r4, #0]
 800851c:	6961      	ldr	r1, [r4, #20]
 800851e:	1d18      	adds	r0, r3, #4
 8008520:	6028      	str	r0, [r5, #0]
 8008522:	0635      	lsls	r5, r6, #24
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	d501      	bpl.n	800852c <_printf_i+0x1cc>
 8008528:	6019      	str	r1, [r3, #0]
 800852a:	e002      	b.n	8008532 <_printf_i+0x1d2>
 800852c:	0670      	lsls	r0, r6, #25
 800852e:	d5fb      	bpl.n	8008528 <_printf_i+0x1c8>
 8008530:	8019      	strh	r1, [r3, #0]
 8008532:	2300      	movs	r3, #0
 8008534:	6123      	str	r3, [r4, #16]
 8008536:	4615      	mov	r5, r2
 8008538:	e7ba      	b.n	80084b0 <_printf_i+0x150>
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	1d1a      	adds	r2, r3, #4
 800853e:	602a      	str	r2, [r5, #0]
 8008540:	681d      	ldr	r5, [r3, #0]
 8008542:	6862      	ldr	r2, [r4, #4]
 8008544:	2100      	movs	r1, #0
 8008546:	4628      	mov	r0, r5
 8008548:	f7f7 fe5a 	bl	8000200 <memchr>
 800854c:	b108      	cbz	r0, 8008552 <_printf_i+0x1f2>
 800854e:	1b40      	subs	r0, r0, r5
 8008550:	6060      	str	r0, [r4, #4]
 8008552:	6863      	ldr	r3, [r4, #4]
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	2300      	movs	r3, #0
 8008558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800855c:	e7a8      	b.n	80084b0 <_printf_i+0x150>
 800855e:	6923      	ldr	r3, [r4, #16]
 8008560:	462a      	mov	r2, r5
 8008562:	4649      	mov	r1, r9
 8008564:	4640      	mov	r0, r8
 8008566:	47d0      	blx	sl
 8008568:	3001      	adds	r0, #1
 800856a:	d0ab      	beq.n	80084c4 <_printf_i+0x164>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	079b      	lsls	r3, r3, #30
 8008570:	d413      	bmi.n	800859a <_printf_i+0x23a>
 8008572:	68e0      	ldr	r0, [r4, #12]
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	4298      	cmp	r0, r3
 8008578:	bfb8      	it	lt
 800857a:	4618      	movlt	r0, r3
 800857c:	e7a4      	b.n	80084c8 <_printf_i+0x168>
 800857e:	2301      	movs	r3, #1
 8008580:	4632      	mov	r2, r6
 8008582:	4649      	mov	r1, r9
 8008584:	4640      	mov	r0, r8
 8008586:	47d0      	blx	sl
 8008588:	3001      	adds	r0, #1
 800858a:	d09b      	beq.n	80084c4 <_printf_i+0x164>
 800858c:	3501      	adds	r5, #1
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	9903      	ldr	r1, [sp, #12]
 8008592:	1a5b      	subs	r3, r3, r1
 8008594:	42ab      	cmp	r3, r5
 8008596:	dcf2      	bgt.n	800857e <_printf_i+0x21e>
 8008598:	e7eb      	b.n	8008572 <_printf_i+0x212>
 800859a:	2500      	movs	r5, #0
 800859c:	f104 0619 	add.w	r6, r4, #25
 80085a0:	e7f5      	b.n	800858e <_printf_i+0x22e>
 80085a2:	bf00      	nop
 80085a4:	0800ccd6 	.word	0x0800ccd6
 80085a8:	0800cce7 	.word	0x0800cce7

080085ac <_scanf_float>:
 80085ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	b087      	sub	sp, #28
 80085b2:	4617      	mov	r7, r2
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	688b      	ldr	r3, [r1, #8]
 80085b8:	1e5a      	subs	r2, r3, #1
 80085ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80085be:	bf83      	ittte	hi
 80085c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80085c4:	195b      	addhi	r3, r3, r5
 80085c6:	9302      	strhi	r3, [sp, #8]
 80085c8:	2300      	movls	r3, #0
 80085ca:	bf86      	itte	hi
 80085cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80085d0:	608b      	strhi	r3, [r1, #8]
 80085d2:	9302      	strls	r3, [sp, #8]
 80085d4:	680b      	ldr	r3, [r1, #0]
 80085d6:	468b      	mov	fp, r1
 80085d8:	2500      	movs	r5, #0
 80085da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80085de:	f84b 3b1c 	str.w	r3, [fp], #28
 80085e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80085e6:	4680      	mov	r8, r0
 80085e8:	460c      	mov	r4, r1
 80085ea:	465e      	mov	r6, fp
 80085ec:	46aa      	mov	sl, r5
 80085ee:	46a9      	mov	r9, r5
 80085f0:	9501      	str	r5, [sp, #4]
 80085f2:	68a2      	ldr	r2, [r4, #8]
 80085f4:	b152      	cbz	r2, 800860c <_scanf_float+0x60>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b4e      	cmp	r3, #78	; 0x4e
 80085fc:	d864      	bhi.n	80086c8 <_scanf_float+0x11c>
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d83c      	bhi.n	800867c <_scanf_float+0xd0>
 8008602:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008606:	b2c8      	uxtb	r0, r1
 8008608:	280e      	cmp	r0, #14
 800860a:	d93a      	bls.n	8008682 <_scanf_float+0xd6>
 800860c:	f1b9 0f00 	cmp.w	r9, #0
 8008610:	d003      	beq.n	800861a <_scanf_float+0x6e>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800861e:	f1ba 0f01 	cmp.w	sl, #1
 8008622:	f200 8113 	bhi.w	800884c <_scanf_float+0x2a0>
 8008626:	455e      	cmp	r6, fp
 8008628:	f200 8105 	bhi.w	8008836 <_scanf_float+0x28a>
 800862c:	2501      	movs	r5, #1
 800862e:	4628      	mov	r0, r5
 8008630:	b007      	add	sp, #28
 8008632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008636:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800863a:	2a0d      	cmp	r2, #13
 800863c:	d8e6      	bhi.n	800860c <_scanf_float+0x60>
 800863e:	a101      	add	r1, pc, #4	; (adr r1, 8008644 <_scanf_float+0x98>)
 8008640:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008644:	08008783 	.word	0x08008783
 8008648:	0800860d 	.word	0x0800860d
 800864c:	0800860d 	.word	0x0800860d
 8008650:	0800860d 	.word	0x0800860d
 8008654:	080087e3 	.word	0x080087e3
 8008658:	080087bb 	.word	0x080087bb
 800865c:	0800860d 	.word	0x0800860d
 8008660:	0800860d 	.word	0x0800860d
 8008664:	08008791 	.word	0x08008791
 8008668:	0800860d 	.word	0x0800860d
 800866c:	0800860d 	.word	0x0800860d
 8008670:	0800860d 	.word	0x0800860d
 8008674:	0800860d 	.word	0x0800860d
 8008678:	08008749 	.word	0x08008749
 800867c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008680:	e7db      	b.n	800863a <_scanf_float+0x8e>
 8008682:	290e      	cmp	r1, #14
 8008684:	d8c2      	bhi.n	800860c <_scanf_float+0x60>
 8008686:	a001      	add	r0, pc, #4	; (adr r0, 800868c <_scanf_float+0xe0>)
 8008688:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800868c:	0800873b 	.word	0x0800873b
 8008690:	0800860d 	.word	0x0800860d
 8008694:	0800873b 	.word	0x0800873b
 8008698:	080087cf 	.word	0x080087cf
 800869c:	0800860d 	.word	0x0800860d
 80086a0:	080086e9 	.word	0x080086e9
 80086a4:	08008725 	.word	0x08008725
 80086a8:	08008725 	.word	0x08008725
 80086ac:	08008725 	.word	0x08008725
 80086b0:	08008725 	.word	0x08008725
 80086b4:	08008725 	.word	0x08008725
 80086b8:	08008725 	.word	0x08008725
 80086bc:	08008725 	.word	0x08008725
 80086c0:	08008725 	.word	0x08008725
 80086c4:	08008725 	.word	0x08008725
 80086c8:	2b6e      	cmp	r3, #110	; 0x6e
 80086ca:	d809      	bhi.n	80086e0 <_scanf_float+0x134>
 80086cc:	2b60      	cmp	r3, #96	; 0x60
 80086ce:	d8b2      	bhi.n	8008636 <_scanf_float+0x8a>
 80086d0:	2b54      	cmp	r3, #84	; 0x54
 80086d2:	d077      	beq.n	80087c4 <_scanf_float+0x218>
 80086d4:	2b59      	cmp	r3, #89	; 0x59
 80086d6:	d199      	bne.n	800860c <_scanf_float+0x60>
 80086d8:	2d07      	cmp	r5, #7
 80086da:	d197      	bne.n	800860c <_scanf_float+0x60>
 80086dc:	2508      	movs	r5, #8
 80086de:	e029      	b.n	8008734 <_scanf_float+0x188>
 80086e0:	2b74      	cmp	r3, #116	; 0x74
 80086e2:	d06f      	beq.n	80087c4 <_scanf_float+0x218>
 80086e4:	2b79      	cmp	r3, #121	; 0x79
 80086e6:	e7f6      	b.n	80086d6 <_scanf_float+0x12a>
 80086e8:	6821      	ldr	r1, [r4, #0]
 80086ea:	05c8      	lsls	r0, r1, #23
 80086ec:	d51a      	bpl.n	8008724 <_scanf_float+0x178>
 80086ee:	9b02      	ldr	r3, [sp, #8]
 80086f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80086f4:	6021      	str	r1, [r4, #0]
 80086f6:	f109 0901 	add.w	r9, r9, #1
 80086fa:	b11b      	cbz	r3, 8008704 <_scanf_float+0x158>
 80086fc:	3b01      	subs	r3, #1
 80086fe:	3201      	adds	r2, #1
 8008700:	9302      	str	r3, [sp, #8]
 8008702:	60a2      	str	r2, [r4, #8]
 8008704:	68a3      	ldr	r3, [r4, #8]
 8008706:	3b01      	subs	r3, #1
 8008708:	60a3      	str	r3, [r4, #8]
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	3301      	adds	r3, #1
 800870e:	6123      	str	r3, [r4, #16]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3b01      	subs	r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	607b      	str	r3, [r7, #4]
 8008718:	f340 8084 	ble.w	8008824 <_scanf_float+0x278>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	3301      	adds	r3, #1
 8008720:	603b      	str	r3, [r7, #0]
 8008722:	e766      	b.n	80085f2 <_scanf_float+0x46>
 8008724:	eb1a 0f05 	cmn.w	sl, r5
 8008728:	f47f af70 	bne.w	800860c <_scanf_float+0x60>
 800872c:	6822      	ldr	r2, [r4, #0]
 800872e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008732:	6022      	str	r2, [r4, #0]
 8008734:	f806 3b01 	strb.w	r3, [r6], #1
 8008738:	e7e4      	b.n	8008704 <_scanf_float+0x158>
 800873a:	6822      	ldr	r2, [r4, #0]
 800873c:	0610      	lsls	r0, r2, #24
 800873e:	f57f af65 	bpl.w	800860c <_scanf_float+0x60>
 8008742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008746:	e7f4      	b.n	8008732 <_scanf_float+0x186>
 8008748:	f1ba 0f00 	cmp.w	sl, #0
 800874c:	d10e      	bne.n	800876c <_scanf_float+0x1c0>
 800874e:	f1b9 0f00 	cmp.w	r9, #0
 8008752:	d10e      	bne.n	8008772 <_scanf_float+0x1c6>
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800875a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800875e:	d108      	bne.n	8008772 <_scanf_float+0x1c6>
 8008760:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008764:	6022      	str	r2, [r4, #0]
 8008766:	f04f 0a01 	mov.w	sl, #1
 800876a:	e7e3      	b.n	8008734 <_scanf_float+0x188>
 800876c:	f1ba 0f02 	cmp.w	sl, #2
 8008770:	d055      	beq.n	800881e <_scanf_float+0x272>
 8008772:	2d01      	cmp	r5, #1
 8008774:	d002      	beq.n	800877c <_scanf_float+0x1d0>
 8008776:	2d04      	cmp	r5, #4
 8008778:	f47f af48 	bne.w	800860c <_scanf_float+0x60>
 800877c:	3501      	adds	r5, #1
 800877e:	b2ed      	uxtb	r5, r5
 8008780:	e7d8      	b.n	8008734 <_scanf_float+0x188>
 8008782:	f1ba 0f01 	cmp.w	sl, #1
 8008786:	f47f af41 	bne.w	800860c <_scanf_float+0x60>
 800878a:	f04f 0a02 	mov.w	sl, #2
 800878e:	e7d1      	b.n	8008734 <_scanf_float+0x188>
 8008790:	b97d      	cbnz	r5, 80087b2 <_scanf_float+0x206>
 8008792:	f1b9 0f00 	cmp.w	r9, #0
 8008796:	f47f af3c 	bne.w	8008612 <_scanf_float+0x66>
 800879a:	6822      	ldr	r2, [r4, #0]
 800879c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087a4:	f47f af39 	bne.w	800861a <_scanf_float+0x6e>
 80087a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087ac:	6022      	str	r2, [r4, #0]
 80087ae:	2501      	movs	r5, #1
 80087b0:	e7c0      	b.n	8008734 <_scanf_float+0x188>
 80087b2:	2d03      	cmp	r5, #3
 80087b4:	d0e2      	beq.n	800877c <_scanf_float+0x1d0>
 80087b6:	2d05      	cmp	r5, #5
 80087b8:	e7de      	b.n	8008778 <_scanf_float+0x1cc>
 80087ba:	2d02      	cmp	r5, #2
 80087bc:	f47f af26 	bne.w	800860c <_scanf_float+0x60>
 80087c0:	2503      	movs	r5, #3
 80087c2:	e7b7      	b.n	8008734 <_scanf_float+0x188>
 80087c4:	2d06      	cmp	r5, #6
 80087c6:	f47f af21 	bne.w	800860c <_scanf_float+0x60>
 80087ca:	2507      	movs	r5, #7
 80087cc:	e7b2      	b.n	8008734 <_scanf_float+0x188>
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	0591      	lsls	r1, r2, #22
 80087d2:	f57f af1b 	bpl.w	800860c <_scanf_float+0x60>
 80087d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80087da:	6022      	str	r2, [r4, #0]
 80087dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80087e0:	e7a8      	b.n	8008734 <_scanf_float+0x188>
 80087e2:	6822      	ldr	r2, [r4, #0]
 80087e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80087e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80087ec:	d006      	beq.n	80087fc <_scanf_float+0x250>
 80087ee:	0550      	lsls	r0, r2, #21
 80087f0:	f57f af0c 	bpl.w	800860c <_scanf_float+0x60>
 80087f4:	f1b9 0f00 	cmp.w	r9, #0
 80087f8:	f43f af0f 	beq.w	800861a <_scanf_float+0x6e>
 80087fc:	0591      	lsls	r1, r2, #22
 80087fe:	bf58      	it	pl
 8008800:	9901      	ldrpl	r1, [sp, #4]
 8008802:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008806:	bf58      	it	pl
 8008808:	eba9 0101 	subpl.w	r1, r9, r1
 800880c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008810:	bf58      	it	pl
 8008812:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	f04f 0900 	mov.w	r9, #0
 800881c:	e78a      	b.n	8008734 <_scanf_float+0x188>
 800881e:	f04f 0a03 	mov.w	sl, #3
 8008822:	e787      	b.n	8008734 <_scanf_float+0x188>
 8008824:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008828:	4639      	mov	r1, r7
 800882a:	4640      	mov	r0, r8
 800882c:	4798      	blx	r3
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f aedf 	beq.w	80085f2 <_scanf_float+0x46>
 8008834:	e6ea      	b.n	800860c <_scanf_float+0x60>
 8008836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800883a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800883e:	463a      	mov	r2, r7
 8008840:	4640      	mov	r0, r8
 8008842:	4798      	blx	r3
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	3b01      	subs	r3, #1
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	e6ec      	b.n	8008626 <_scanf_float+0x7a>
 800884c:	1e6b      	subs	r3, r5, #1
 800884e:	2b06      	cmp	r3, #6
 8008850:	d825      	bhi.n	800889e <_scanf_float+0x2f2>
 8008852:	2d02      	cmp	r5, #2
 8008854:	d836      	bhi.n	80088c4 <_scanf_float+0x318>
 8008856:	455e      	cmp	r6, fp
 8008858:	f67f aee8 	bls.w	800862c <_scanf_float+0x80>
 800885c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008860:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008864:	463a      	mov	r2, r7
 8008866:	4640      	mov	r0, r8
 8008868:	4798      	blx	r3
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	3b01      	subs	r3, #1
 800886e:	6123      	str	r3, [r4, #16]
 8008870:	e7f1      	b.n	8008856 <_scanf_float+0x2aa>
 8008872:	9802      	ldr	r0, [sp, #8]
 8008874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008878:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800887c:	9002      	str	r0, [sp, #8]
 800887e:	463a      	mov	r2, r7
 8008880:	4640      	mov	r0, r8
 8008882:	4798      	blx	r3
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	3b01      	subs	r3, #1
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800888e:	fa5f fa8a 	uxtb.w	sl, sl
 8008892:	f1ba 0f02 	cmp.w	sl, #2
 8008896:	d1ec      	bne.n	8008872 <_scanf_float+0x2c6>
 8008898:	3d03      	subs	r5, #3
 800889a:	b2ed      	uxtb	r5, r5
 800889c:	1b76      	subs	r6, r6, r5
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	05da      	lsls	r2, r3, #23
 80088a2:	d52f      	bpl.n	8008904 <_scanf_float+0x358>
 80088a4:	055b      	lsls	r3, r3, #21
 80088a6:	d510      	bpl.n	80088ca <_scanf_float+0x31e>
 80088a8:	455e      	cmp	r6, fp
 80088aa:	f67f aebf 	bls.w	800862c <_scanf_float+0x80>
 80088ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088b6:	463a      	mov	r2, r7
 80088b8:	4640      	mov	r0, r8
 80088ba:	4798      	blx	r3
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	3b01      	subs	r3, #1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	e7f1      	b.n	80088a8 <_scanf_float+0x2fc>
 80088c4:	46aa      	mov	sl, r5
 80088c6:	9602      	str	r6, [sp, #8]
 80088c8:	e7df      	b.n	800888a <_scanf_float+0x2de>
 80088ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	2965      	cmp	r1, #101	; 0x65
 80088d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80088d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	d00c      	beq.n	80088f8 <_scanf_float+0x34c>
 80088de:	2945      	cmp	r1, #69	; 0x45
 80088e0:	d00a      	beq.n	80088f8 <_scanf_float+0x34c>
 80088e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088e6:	463a      	mov	r2, r7
 80088e8:	4640      	mov	r0, r8
 80088ea:	4798      	blx	r3
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	1eb5      	subs	r5, r6, #2
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088fc:	463a      	mov	r2, r7
 80088fe:	4640      	mov	r0, r8
 8008900:	4798      	blx	r3
 8008902:	462e      	mov	r6, r5
 8008904:	6825      	ldr	r5, [r4, #0]
 8008906:	f015 0510 	ands.w	r5, r5, #16
 800890a:	d159      	bne.n	80089c0 <_scanf_float+0x414>
 800890c:	7035      	strb	r5, [r6, #0]
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008918:	d11b      	bne.n	8008952 <_scanf_float+0x3a6>
 800891a:	9b01      	ldr	r3, [sp, #4]
 800891c:	454b      	cmp	r3, r9
 800891e:	eba3 0209 	sub.w	r2, r3, r9
 8008922:	d123      	bne.n	800896c <_scanf_float+0x3c0>
 8008924:	2200      	movs	r2, #0
 8008926:	4659      	mov	r1, fp
 8008928:	4640      	mov	r0, r8
 800892a:	f000 fef7 	bl	800971c <_strtod_r>
 800892e:	6822      	ldr	r2, [r4, #0]
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	f012 0f02 	tst.w	r2, #2
 8008936:	ec57 6b10 	vmov	r6, r7, d0
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	d021      	beq.n	8008982 <_scanf_float+0x3d6>
 800893e:	9903      	ldr	r1, [sp, #12]
 8008940:	1d1a      	adds	r2, r3, #4
 8008942:	600a      	str	r2, [r1, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	e9c3 6700 	strd	r6, r7, [r3]
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	60e3      	str	r3, [r4, #12]
 8008950:	e66d      	b.n	800862e <_scanf_float+0x82>
 8008952:	9b04      	ldr	r3, [sp, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d0e5      	beq.n	8008924 <_scanf_float+0x378>
 8008958:	9905      	ldr	r1, [sp, #20]
 800895a:	230a      	movs	r3, #10
 800895c:	462a      	mov	r2, r5
 800895e:	3101      	adds	r1, #1
 8008960:	4640      	mov	r0, r8
 8008962:	f000 ff63 	bl	800982c <_strtol_r>
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	9e05      	ldr	r6, [sp, #20]
 800896a:	1ac2      	subs	r2, r0, r3
 800896c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008970:	429e      	cmp	r6, r3
 8008972:	bf28      	it	cs
 8008974:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008978:	4912      	ldr	r1, [pc, #72]	; (80089c4 <_scanf_float+0x418>)
 800897a:	4630      	mov	r0, r6
 800897c:	f000 f860 	bl	8008a40 <siprintf>
 8008980:	e7d0      	b.n	8008924 <_scanf_float+0x378>
 8008982:	9903      	ldr	r1, [sp, #12]
 8008984:	f012 0f04 	tst.w	r2, #4
 8008988:	f103 0204 	add.w	r2, r3, #4
 800898c:	600a      	str	r2, [r1, #0]
 800898e:	d1d9      	bne.n	8008944 <_scanf_float+0x398>
 8008990:	f8d3 8000 	ldr.w	r8, [r3]
 8008994:	ee10 2a10 	vmov	r2, s0
 8008998:	ee10 0a10 	vmov	r0, s0
 800899c:	463b      	mov	r3, r7
 800899e:	4639      	mov	r1, r7
 80089a0:	f7f8 f8d4 	bl	8000b4c <__aeabi_dcmpun>
 80089a4:	b128      	cbz	r0, 80089b2 <_scanf_float+0x406>
 80089a6:	4808      	ldr	r0, [pc, #32]	; (80089c8 <_scanf_float+0x41c>)
 80089a8:	f000 f810 	bl	80089cc <nanf>
 80089ac:	ed88 0a00 	vstr	s0, [r8]
 80089b0:	e7cb      	b.n	800894a <_scanf_float+0x39e>
 80089b2:	4630      	mov	r0, r6
 80089b4:	4639      	mov	r1, r7
 80089b6:	f7f8 f927 	bl	8000c08 <__aeabi_d2f>
 80089ba:	f8c8 0000 	str.w	r0, [r8]
 80089be:	e7c4      	b.n	800894a <_scanf_float+0x39e>
 80089c0:	2500      	movs	r5, #0
 80089c2:	e634      	b.n	800862e <_scanf_float+0x82>
 80089c4:	0800ccf8 	.word	0x0800ccf8
 80089c8:	0800d000 	.word	0x0800d000

080089cc <nanf>:
 80089cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089d4 <nanf+0x8>
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	7fc00000 	.word	0x7fc00000

080089d8 <sniprintf>:
 80089d8:	b40c      	push	{r2, r3}
 80089da:	b530      	push	{r4, r5, lr}
 80089dc:	4b17      	ldr	r3, [pc, #92]	; (8008a3c <sniprintf+0x64>)
 80089de:	1e0c      	subs	r4, r1, #0
 80089e0:	681d      	ldr	r5, [r3, #0]
 80089e2:	b09d      	sub	sp, #116	; 0x74
 80089e4:	da08      	bge.n	80089f8 <sniprintf+0x20>
 80089e6:	238b      	movs	r3, #139	; 0x8b
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	f04f 30ff 	mov.w	r0, #4294967295
 80089ee:	b01d      	add	sp, #116	; 0x74
 80089f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089f4:	b002      	add	sp, #8
 80089f6:	4770      	bx	lr
 80089f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80089fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008a00:	bf14      	ite	ne
 8008a02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a06:	4623      	moveq	r3, r4
 8008a08:	9304      	str	r3, [sp, #16]
 8008a0a:	9307      	str	r3, [sp, #28]
 8008a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a10:	9002      	str	r0, [sp, #8]
 8008a12:	9006      	str	r0, [sp, #24]
 8008a14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a1a:	ab21      	add	r3, sp, #132	; 0x84
 8008a1c:	a902      	add	r1, sp, #8
 8008a1e:	4628      	mov	r0, r5
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	f002 ff3b 	bl	800b89c <_svfiprintf_r>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	bfbc      	itt	lt
 8008a2a:	238b      	movlt	r3, #139	; 0x8b
 8008a2c:	602b      	strlt	r3, [r5, #0]
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	d0dd      	beq.n	80089ee <sniprintf+0x16>
 8008a32:	9b02      	ldr	r3, [sp, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
 8008a38:	e7d9      	b.n	80089ee <sniprintf+0x16>
 8008a3a:	bf00      	nop
 8008a3c:	2000001c 	.word	0x2000001c

08008a40 <siprintf>:
 8008a40:	b40e      	push	{r1, r2, r3}
 8008a42:	b500      	push	{lr}
 8008a44:	b09c      	sub	sp, #112	; 0x70
 8008a46:	ab1d      	add	r3, sp, #116	; 0x74
 8008a48:	9002      	str	r0, [sp, #8]
 8008a4a:	9006      	str	r0, [sp, #24]
 8008a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a50:	4809      	ldr	r0, [pc, #36]	; (8008a78 <siprintf+0x38>)
 8008a52:	9107      	str	r1, [sp, #28]
 8008a54:	9104      	str	r1, [sp, #16]
 8008a56:	4909      	ldr	r1, [pc, #36]	; (8008a7c <siprintf+0x3c>)
 8008a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5c:	9105      	str	r1, [sp, #20]
 8008a5e:	6800      	ldr	r0, [r0, #0]
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	a902      	add	r1, sp, #8
 8008a64:	f002 ff1a 	bl	800b89c <_svfiprintf_r>
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	b01c      	add	sp, #112	; 0x70
 8008a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a74:	b003      	add	sp, #12
 8008a76:	4770      	bx	lr
 8008a78:	2000001c 	.word	0x2000001c
 8008a7c:	ffff0208 	.word	0xffff0208

08008a80 <strlcpy>:
 8008a80:	b510      	push	{r4, lr}
 8008a82:	460b      	mov	r3, r1
 8008a84:	b162      	cbz	r2, 8008aa0 <strlcpy+0x20>
 8008a86:	3a01      	subs	r2, #1
 8008a88:	d008      	beq.n	8008a9c <strlcpy+0x1c>
 8008a8a:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008a8e:	f800 4b01 	strb.w	r4, [r0], #1
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	d1f7      	bne.n	8008a86 <strlcpy+0x6>
 8008a96:	1a58      	subs	r0, r3, r1
 8008a98:	3801      	subs	r0, #1
 8008a9a:	bd10      	pop	{r4, pc}
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	7002      	strb	r2, [r0, #0]
 8008aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	d1fb      	bne.n	8008aa0 <strlcpy+0x20>
 8008aa8:	e7f5      	b.n	8008a96 <strlcpy+0x16>

08008aaa <strncmp>:
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	b17a      	cbz	r2, 8008ace <strncmp+0x24>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	3901      	subs	r1, #1
 8008ab2:	1884      	adds	r4, r0, r2
 8008ab4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ab8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008abc:	4290      	cmp	r0, r2
 8008abe:	d101      	bne.n	8008ac4 <strncmp+0x1a>
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d101      	bne.n	8008ac8 <strncmp+0x1e>
 8008ac4:	1a80      	subs	r0, r0, r2
 8008ac6:	bd10      	pop	{r4, pc}
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d1f3      	bne.n	8008ab4 <strncmp+0xa>
 8008acc:	e7fa      	b.n	8008ac4 <strncmp+0x1a>
 8008ace:	4610      	mov	r0, r2
 8008ad0:	e7f9      	b.n	8008ac6 <strncmp+0x1c>

08008ad2 <sulp>:
 8008ad2:	b570      	push	{r4, r5, r6, lr}
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	460d      	mov	r5, r1
 8008ad8:	ec45 4b10 	vmov	d0, r4, r5
 8008adc:	4616      	mov	r6, r2
 8008ade:	f002 fc3b 	bl	800b358 <__ulp>
 8008ae2:	ec51 0b10 	vmov	r0, r1, d0
 8008ae6:	b17e      	cbz	r6, 8008b08 <sulp+0x36>
 8008ae8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008aec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dd09      	ble.n	8008b08 <sulp+0x36>
 8008af4:	051b      	lsls	r3, r3, #20
 8008af6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008afa:	2400      	movs	r4, #0
 8008afc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b00:	4622      	mov	r2, r4
 8008b02:	462b      	mov	r3, r5
 8008b04:	f7f7 fd88 	bl	8000618 <__aeabi_dmul>
 8008b08:	bd70      	pop	{r4, r5, r6, pc}
 8008b0a:	0000      	movs	r0, r0
 8008b0c:	0000      	movs	r0, r0
	...

08008b10 <_strtod_l>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	ed2d 8b02 	vpush	{d8}
 8008b18:	b09d      	sub	sp, #116	; 0x74
 8008b1a:	461f      	mov	r7, r3
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	9318      	str	r3, [sp, #96]	; 0x60
 8008b20:	4ba2      	ldr	r3, [pc, #648]	; (8008dac <_strtod_l+0x29c>)
 8008b22:	9213      	str	r2, [sp, #76]	; 0x4c
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	4604      	mov	r4, r0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	4688      	mov	r8, r1
 8008b2e:	f7f7 fb59 	bl	80001e4 <strlen>
 8008b32:	f04f 0a00 	mov.w	sl, #0
 8008b36:	4605      	mov	r5, r0
 8008b38:	f04f 0b00 	mov.w	fp, #0
 8008b3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	2a2b      	cmp	r2, #43	; 0x2b
 8008b46:	d04e      	beq.n	8008be6 <_strtod_l+0xd6>
 8008b48:	d83b      	bhi.n	8008bc2 <_strtod_l+0xb2>
 8008b4a:	2a0d      	cmp	r2, #13
 8008b4c:	d834      	bhi.n	8008bb8 <_strtod_l+0xa8>
 8008b4e:	2a08      	cmp	r2, #8
 8008b50:	d834      	bhi.n	8008bbc <_strtod_l+0xac>
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	d03e      	beq.n	8008bd4 <_strtod_l+0xc4>
 8008b56:	2300      	movs	r3, #0
 8008b58:	930a      	str	r3, [sp, #40]	; 0x28
 8008b5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b5c:	7833      	ldrb	r3, [r6, #0]
 8008b5e:	2b30      	cmp	r3, #48	; 0x30
 8008b60:	f040 80b0 	bne.w	8008cc4 <_strtod_l+0x1b4>
 8008b64:	7873      	ldrb	r3, [r6, #1]
 8008b66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b6a:	2b58      	cmp	r3, #88	; 0x58
 8008b6c:	d168      	bne.n	8008c40 <_strtod_l+0x130>
 8008b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	ab18      	add	r3, sp, #96	; 0x60
 8008b74:	9702      	str	r7, [sp, #8]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	4a8d      	ldr	r2, [pc, #564]	; (8008db0 <_strtod_l+0x2a0>)
 8008b7a:	ab19      	add	r3, sp, #100	; 0x64
 8008b7c:	a917      	add	r1, sp, #92	; 0x5c
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f001 fd44 	bl	800a60c <__gethex>
 8008b84:	f010 0707 	ands.w	r7, r0, #7
 8008b88:	4605      	mov	r5, r0
 8008b8a:	d005      	beq.n	8008b98 <_strtod_l+0x88>
 8008b8c:	2f06      	cmp	r7, #6
 8008b8e:	d12c      	bne.n	8008bea <_strtod_l+0xda>
 8008b90:	3601      	adds	r6, #1
 8008b92:	2300      	movs	r3, #0
 8008b94:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b96:	930a      	str	r3, [sp, #40]	; 0x28
 8008b98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f040 8590 	bne.w	80096c0 <_strtod_l+0xbb0>
 8008ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba2:	b1eb      	cbz	r3, 8008be0 <_strtod_l+0xd0>
 8008ba4:	4652      	mov	r2, sl
 8008ba6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008baa:	ec43 2b10 	vmov	d0, r2, r3
 8008bae:	b01d      	add	sp, #116	; 0x74
 8008bb0:	ecbd 8b02 	vpop	{d8}
 8008bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb8:	2a20      	cmp	r2, #32
 8008bba:	d1cc      	bne.n	8008b56 <_strtod_l+0x46>
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	9317      	str	r3, [sp, #92]	; 0x5c
 8008bc0:	e7be      	b.n	8008b40 <_strtod_l+0x30>
 8008bc2:	2a2d      	cmp	r2, #45	; 0x2d
 8008bc4:	d1c7      	bne.n	8008b56 <_strtod_l+0x46>
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	920a      	str	r2, [sp, #40]	; 0x28
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bce:	785b      	ldrb	r3, [r3, #1]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1c2      	bne.n	8008b5a <_strtod_l+0x4a>
 8008bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bd6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 856e 	bne.w	80096bc <_strtod_l+0xbac>
 8008be0:	4652      	mov	r2, sl
 8008be2:	465b      	mov	r3, fp
 8008be4:	e7e1      	b.n	8008baa <_strtod_l+0x9a>
 8008be6:	2200      	movs	r2, #0
 8008be8:	e7ee      	b.n	8008bc8 <_strtod_l+0xb8>
 8008bea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bec:	b13a      	cbz	r2, 8008bfe <_strtod_l+0xee>
 8008bee:	2135      	movs	r1, #53	; 0x35
 8008bf0:	a81a      	add	r0, sp, #104	; 0x68
 8008bf2:	f002 fcbc 	bl	800b56e <__copybits>
 8008bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f002 f87b 	bl	800acf4 <_Bfree>
 8008bfe:	3f01      	subs	r7, #1
 8008c00:	2f04      	cmp	r7, #4
 8008c02:	d806      	bhi.n	8008c12 <_strtod_l+0x102>
 8008c04:	e8df f007 	tbb	[pc, r7]
 8008c08:	1714030a 	.word	0x1714030a
 8008c0c:	0a          	.byte	0x0a
 8008c0d:	00          	.byte	0x00
 8008c0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008c12:	0728      	lsls	r0, r5, #28
 8008c14:	d5c0      	bpl.n	8008b98 <_strtod_l+0x88>
 8008c16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008c1a:	e7bd      	b.n	8008b98 <_strtod_l+0x88>
 8008c1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008c20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c2e:	e7f0      	b.n	8008c12 <_strtod_l+0x102>
 8008c30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008db4 <_strtod_l+0x2a4>
 8008c34:	e7ed      	b.n	8008c12 <_strtod_l+0x102>
 8008c36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008c3a:	f04f 3aff 	mov.w	sl, #4294967295
 8008c3e:	e7e8      	b.n	8008c12 <_strtod_l+0x102>
 8008c40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c46:	785b      	ldrb	r3, [r3, #1]
 8008c48:	2b30      	cmp	r3, #48	; 0x30
 8008c4a:	d0f9      	beq.n	8008c40 <_strtod_l+0x130>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0a3      	beq.n	8008b98 <_strtod_l+0x88>
 8008c50:	2301      	movs	r3, #1
 8008c52:	f04f 0900 	mov.w	r9, #0
 8008c56:	9304      	str	r3, [sp, #16]
 8008c58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c5a:	9308      	str	r3, [sp, #32]
 8008c5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c60:	464f      	mov	r7, r9
 8008c62:	220a      	movs	r2, #10
 8008c64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008c66:	7806      	ldrb	r6, [r0, #0]
 8008c68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c6c:	b2d9      	uxtb	r1, r3
 8008c6e:	2909      	cmp	r1, #9
 8008c70:	d92a      	bls.n	8008cc8 <_strtod_l+0x1b8>
 8008c72:	9905      	ldr	r1, [sp, #20]
 8008c74:	462a      	mov	r2, r5
 8008c76:	f7ff ff18 	bl	8008aaa <strncmp>
 8008c7a:	b398      	cbz	r0, 8008ce4 <_strtod_l+0x1d4>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	4632      	mov	r2, r6
 8008c80:	463d      	mov	r5, r7
 8008c82:	9005      	str	r0, [sp, #20]
 8008c84:	4603      	mov	r3, r0
 8008c86:	2a65      	cmp	r2, #101	; 0x65
 8008c88:	d001      	beq.n	8008c8e <_strtod_l+0x17e>
 8008c8a:	2a45      	cmp	r2, #69	; 0x45
 8008c8c:	d118      	bne.n	8008cc0 <_strtod_l+0x1b0>
 8008c8e:	b91d      	cbnz	r5, 8008c98 <_strtod_l+0x188>
 8008c90:	9a04      	ldr	r2, [sp, #16]
 8008c92:	4302      	orrs	r2, r0
 8008c94:	d09e      	beq.n	8008bd4 <_strtod_l+0xc4>
 8008c96:	2500      	movs	r5, #0
 8008c98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008c9c:	f108 0201 	add.w	r2, r8, #1
 8008ca0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ca2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008ca6:	2a2b      	cmp	r2, #43	; 0x2b
 8008ca8:	d075      	beq.n	8008d96 <_strtod_l+0x286>
 8008caa:	2a2d      	cmp	r2, #45	; 0x2d
 8008cac:	d07b      	beq.n	8008da6 <_strtod_l+0x296>
 8008cae:	f04f 0c00 	mov.w	ip, #0
 8008cb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008cb6:	2909      	cmp	r1, #9
 8008cb8:	f240 8082 	bls.w	8008dc0 <_strtod_l+0x2b0>
 8008cbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	e09d      	b.n	8008e00 <_strtod_l+0x2f0>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e7c4      	b.n	8008c52 <_strtod_l+0x142>
 8008cc8:	2f08      	cmp	r7, #8
 8008cca:	bfd8      	it	le
 8008ccc:	9907      	ldrle	r1, [sp, #28]
 8008cce:	f100 0001 	add.w	r0, r0, #1
 8008cd2:	bfda      	itte	le
 8008cd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008cd8:	9307      	strle	r3, [sp, #28]
 8008cda:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008cde:	3701      	adds	r7, #1
 8008ce0:	9017      	str	r0, [sp, #92]	; 0x5c
 8008ce2:	e7bf      	b.n	8008c64 <_strtod_l+0x154>
 8008ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ce6:	195a      	adds	r2, r3, r5
 8008ce8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cea:	5d5a      	ldrb	r2, [r3, r5]
 8008cec:	2f00      	cmp	r7, #0
 8008cee:	d037      	beq.n	8008d60 <_strtod_l+0x250>
 8008cf0:	9005      	str	r0, [sp, #20]
 8008cf2:	463d      	mov	r5, r7
 8008cf4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008cf8:	2b09      	cmp	r3, #9
 8008cfa:	d912      	bls.n	8008d22 <_strtod_l+0x212>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e7c2      	b.n	8008c86 <_strtod_l+0x176>
 8008d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d06:	785a      	ldrb	r2, [r3, #1]
 8008d08:	3001      	adds	r0, #1
 8008d0a:	2a30      	cmp	r2, #48	; 0x30
 8008d0c:	d0f8      	beq.n	8008d00 <_strtod_l+0x1f0>
 8008d0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	f200 84d9 	bhi.w	80096ca <_strtod_l+0xbba>
 8008d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d1a:	9005      	str	r0, [sp, #20]
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	9308      	str	r3, [sp, #32]
 8008d20:	4605      	mov	r5, r0
 8008d22:	3a30      	subs	r2, #48	; 0x30
 8008d24:	f100 0301 	add.w	r3, r0, #1
 8008d28:	d014      	beq.n	8008d54 <_strtod_l+0x244>
 8008d2a:	9905      	ldr	r1, [sp, #20]
 8008d2c:	4419      	add	r1, r3
 8008d2e:	9105      	str	r1, [sp, #20]
 8008d30:	462b      	mov	r3, r5
 8008d32:	eb00 0e05 	add.w	lr, r0, r5
 8008d36:	210a      	movs	r1, #10
 8008d38:	4573      	cmp	r3, lr
 8008d3a:	d113      	bne.n	8008d64 <_strtod_l+0x254>
 8008d3c:	182b      	adds	r3, r5, r0
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	f105 0501 	add.w	r5, r5, #1
 8008d44:	4405      	add	r5, r0
 8008d46:	dc1c      	bgt.n	8008d82 <_strtod_l+0x272>
 8008d48:	9907      	ldr	r1, [sp, #28]
 8008d4a:	230a      	movs	r3, #10
 8008d4c:	fb03 2301 	mla	r3, r3, r1, r2
 8008d50:	9307      	str	r3, [sp, #28]
 8008d52:	2300      	movs	r3, #0
 8008d54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d56:	1c51      	adds	r1, r2, #1
 8008d58:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d5a:	7852      	ldrb	r2, [r2, #1]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	e7c9      	b.n	8008cf4 <_strtod_l+0x1e4>
 8008d60:	4638      	mov	r0, r7
 8008d62:	e7d2      	b.n	8008d0a <_strtod_l+0x1fa>
 8008d64:	2b08      	cmp	r3, #8
 8008d66:	dc04      	bgt.n	8008d72 <_strtod_l+0x262>
 8008d68:	9e07      	ldr	r6, [sp, #28]
 8008d6a:	434e      	muls	r6, r1
 8008d6c:	9607      	str	r6, [sp, #28]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	e7e2      	b.n	8008d38 <_strtod_l+0x228>
 8008d72:	f103 0c01 	add.w	ip, r3, #1
 8008d76:	f1bc 0f10 	cmp.w	ip, #16
 8008d7a:	bfd8      	it	le
 8008d7c:	fb01 f909 	mulle.w	r9, r1, r9
 8008d80:	e7f5      	b.n	8008d6e <_strtod_l+0x25e>
 8008d82:	2d10      	cmp	r5, #16
 8008d84:	bfdc      	itt	le
 8008d86:	230a      	movle	r3, #10
 8008d88:	fb03 2909 	mlale	r9, r3, r9, r2
 8008d8c:	e7e1      	b.n	8008d52 <_strtod_l+0x242>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	2301      	movs	r3, #1
 8008d94:	e77c      	b.n	8008c90 <_strtod_l+0x180>
 8008d96:	f04f 0c00 	mov.w	ip, #0
 8008d9a:	f108 0202 	add.w	r2, r8, #2
 8008d9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008da0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008da4:	e785      	b.n	8008cb2 <_strtod_l+0x1a2>
 8008da6:	f04f 0c01 	mov.w	ip, #1
 8008daa:	e7f6      	b.n	8008d9a <_strtod_l+0x28a>
 8008dac:	0800ce48 	.word	0x0800ce48
 8008db0:	0800cd00 	.word	0x0800cd00
 8008db4:	7ff00000 	.word	0x7ff00000
 8008db8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dba:	1c51      	adds	r1, r2, #1
 8008dbc:	9117      	str	r1, [sp, #92]	; 0x5c
 8008dbe:	7852      	ldrb	r2, [r2, #1]
 8008dc0:	2a30      	cmp	r2, #48	; 0x30
 8008dc2:	d0f9      	beq.n	8008db8 <_strtod_l+0x2a8>
 8008dc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008dc8:	2908      	cmp	r1, #8
 8008dca:	f63f af79 	bhi.w	8008cc0 <_strtod_l+0x1b0>
 8008dce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008dd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dd4:	9206      	str	r2, [sp, #24]
 8008dd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dd8:	1c51      	adds	r1, r2, #1
 8008dda:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ddc:	7852      	ldrb	r2, [r2, #1]
 8008dde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008de2:	2e09      	cmp	r6, #9
 8008de4:	d937      	bls.n	8008e56 <_strtod_l+0x346>
 8008de6:	9e06      	ldr	r6, [sp, #24]
 8008de8:	1b89      	subs	r1, r1, r6
 8008dea:	2908      	cmp	r1, #8
 8008dec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008df0:	dc02      	bgt.n	8008df8 <_strtod_l+0x2e8>
 8008df2:	4576      	cmp	r6, lr
 8008df4:	bfa8      	it	ge
 8008df6:	4676      	movge	r6, lr
 8008df8:	f1bc 0f00 	cmp.w	ip, #0
 8008dfc:	d000      	beq.n	8008e00 <_strtod_l+0x2f0>
 8008dfe:	4276      	negs	r6, r6
 8008e00:	2d00      	cmp	r5, #0
 8008e02:	d14d      	bne.n	8008ea0 <_strtod_l+0x390>
 8008e04:	9904      	ldr	r1, [sp, #16]
 8008e06:	4301      	orrs	r1, r0
 8008e08:	f47f aec6 	bne.w	8008b98 <_strtod_l+0x88>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f47f aee1 	bne.w	8008bd4 <_strtod_l+0xc4>
 8008e12:	2a69      	cmp	r2, #105	; 0x69
 8008e14:	d027      	beq.n	8008e66 <_strtod_l+0x356>
 8008e16:	dc24      	bgt.n	8008e62 <_strtod_l+0x352>
 8008e18:	2a49      	cmp	r2, #73	; 0x49
 8008e1a:	d024      	beq.n	8008e66 <_strtod_l+0x356>
 8008e1c:	2a4e      	cmp	r2, #78	; 0x4e
 8008e1e:	f47f aed9 	bne.w	8008bd4 <_strtod_l+0xc4>
 8008e22:	499f      	ldr	r1, [pc, #636]	; (80090a0 <_strtod_l+0x590>)
 8008e24:	a817      	add	r0, sp, #92	; 0x5c
 8008e26:	f001 fe49 	bl	800aabc <__match>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	f43f aed2 	beq.w	8008bd4 <_strtod_l+0xc4>
 8008e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b28      	cmp	r3, #40	; 0x28
 8008e36:	d12d      	bne.n	8008e94 <_strtod_l+0x384>
 8008e38:	499a      	ldr	r1, [pc, #616]	; (80090a4 <_strtod_l+0x594>)
 8008e3a:	aa1a      	add	r2, sp, #104	; 0x68
 8008e3c:	a817      	add	r0, sp, #92	; 0x5c
 8008e3e:	f001 fe51 	bl	800aae4 <__hexnan>
 8008e42:	2805      	cmp	r0, #5
 8008e44:	d126      	bne.n	8008e94 <_strtod_l+0x384>
 8008e46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008e4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008e50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008e54:	e6a0      	b.n	8008b98 <_strtod_l+0x88>
 8008e56:	210a      	movs	r1, #10
 8008e58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008e5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008e60:	e7b9      	b.n	8008dd6 <_strtod_l+0x2c6>
 8008e62:	2a6e      	cmp	r2, #110	; 0x6e
 8008e64:	e7db      	b.n	8008e1e <_strtod_l+0x30e>
 8008e66:	4990      	ldr	r1, [pc, #576]	; (80090a8 <_strtod_l+0x598>)
 8008e68:	a817      	add	r0, sp, #92	; 0x5c
 8008e6a:	f001 fe27 	bl	800aabc <__match>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f43f aeb0 	beq.w	8008bd4 <_strtod_l+0xc4>
 8008e74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e76:	498d      	ldr	r1, [pc, #564]	; (80090ac <_strtod_l+0x59c>)
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	a817      	add	r0, sp, #92	; 0x5c
 8008e7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e7e:	f001 fe1d 	bl	800aabc <__match>
 8008e82:	b910      	cbnz	r0, 8008e8a <_strtod_l+0x37a>
 8008e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e86:	3301      	adds	r3, #1
 8008e88:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80090bc <_strtod_l+0x5ac>
 8008e8e:	f04f 0a00 	mov.w	sl, #0
 8008e92:	e681      	b.n	8008b98 <_strtod_l+0x88>
 8008e94:	4886      	ldr	r0, [pc, #536]	; (80090b0 <_strtod_l+0x5a0>)
 8008e96:	f002 fe03 	bl	800baa0 <nan>
 8008e9a:	ec5b ab10 	vmov	sl, fp, d0
 8008e9e:	e67b      	b.n	8008b98 <_strtod_l+0x88>
 8008ea0:	9b05      	ldr	r3, [sp, #20]
 8008ea2:	9807      	ldr	r0, [sp, #28]
 8008ea4:	1af3      	subs	r3, r6, r3
 8008ea6:	2f00      	cmp	r7, #0
 8008ea8:	bf08      	it	eq
 8008eaa:	462f      	moveq	r7, r5
 8008eac:	2d10      	cmp	r5, #16
 8008eae:	9306      	str	r3, [sp, #24]
 8008eb0:	46a8      	mov	r8, r5
 8008eb2:	bfa8      	it	ge
 8008eb4:	f04f 0810 	movge.w	r8, #16
 8008eb8:	f7f7 fb34 	bl	8000524 <__aeabi_ui2d>
 8008ebc:	2d09      	cmp	r5, #9
 8008ebe:	4682      	mov	sl, r0
 8008ec0:	468b      	mov	fp, r1
 8008ec2:	dd13      	ble.n	8008eec <_strtod_l+0x3dc>
 8008ec4:	4b7b      	ldr	r3, [pc, #492]	; (80090b4 <_strtod_l+0x5a4>)
 8008ec6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008eca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ece:	f7f7 fba3 	bl	8000618 <__aeabi_dmul>
 8008ed2:	4682      	mov	sl, r0
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	468b      	mov	fp, r1
 8008ed8:	f7f7 fb24 	bl	8000524 <__aeabi_ui2d>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	4659      	mov	r1, fp
 8008ee4:	f7f7 f9e2 	bl	80002ac <__adddf3>
 8008ee8:	4682      	mov	sl, r0
 8008eea:	468b      	mov	fp, r1
 8008eec:	2d0f      	cmp	r5, #15
 8008eee:	dc38      	bgt.n	8008f62 <_strtod_l+0x452>
 8008ef0:	9b06      	ldr	r3, [sp, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f43f ae50 	beq.w	8008b98 <_strtod_l+0x88>
 8008ef8:	dd24      	ble.n	8008f44 <_strtod_l+0x434>
 8008efa:	2b16      	cmp	r3, #22
 8008efc:	dc0b      	bgt.n	8008f16 <_strtod_l+0x406>
 8008efe:	496d      	ldr	r1, [pc, #436]	; (80090b4 <_strtod_l+0x5a4>)
 8008f00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f08:	4652      	mov	r2, sl
 8008f0a:	465b      	mov	r3, fp
 8008f0c:	f7f7 fb84 	bl	8000618 <__aeabi_dmul>
 8008f10:	4682      	mov	sl, r0
 8008f12:	468b      	mov	fp, r1
 8008f14:	e640      	b.n	8008b98 <_strtod_l+0x88>
 8008f16:	9a06      	ldr	r2, [sp, #24]
 8008f18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	db20      	blt.n	8008f62 <_strtod_l+0x452>
 8008f20:	4c64      	ldr	r4, [pc, #400]	; (80090b4 <_strtod_l+0x5a4>)
 8008f22:	f1c5 050f 	rsb	r5, r5, #15
 8008f26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008f2a:	4652      	mov	r2, sl
 8008f2c:	465b      	mov	r3, fp
 8008f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f32:	f7f7 fb71 	bl	8000618 <__aeabi_dmul>
 8008f36:	9b06      	ldr	r3, [sp, #24]
 8008f38:	1b5d      	subs	r5, r3, r5
 8008f3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f42:	e7e3      	b.n	8008f0c <_strtod_l+0x3fc>
 8008f44:	9b06      	ldr	r3, [sp, #24]
 8008f46:	3316      	adds	r3, #22
 8008f48:	db0b      	blt.n	8008f62 <_strtod_l+0x452>
 8008f4a:	9b05      	ldr	r3, [sp, #20]
 8008f4c:	1b9e      	subs	r6, r3, r6
 8008f4e:	4b59      	ldr	r3, [pc, #356]	; (80090b4 <_strtod_l+0x5a4>)
 8008f50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008f54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	f7f7 fc86 	bl	800086c <__aeabi_ddiv>
 8008f60:	e7d6      	b.n	8008f10 <_strtod_l+0x400>
 8008f62:	9b06      	ldr	r3, [sp, #24]
 8008f64:	eba5 0808 	sub.w	r8, r5, r8
 8008f68:	4498      	add	r8, r3
 8008f6a:	f1b8 0f00 	cmp.w	r8, #0
 8008f6e:	dd74      	ble.n	800905a <_strtod_l+0x54a>
 8008f70:	f018 030f 	ands.w	r3, r8, #15
 8008f74:	d00a      	beq.n	8008f8c <_strtod_l+0x47c>
 8008f76:	494f      	ldr	r1, [pc, #316]	; (80090b4 <_strtod_l+0x5a4>)
 8008f78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f7c:	4652      	mov	r2, sl
 8008f7e:	465b      	mov	r3, fp
 8008f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f84:	f7f7 fb48 	bl	8000618 <__aeabi_dmul>
 8008f88:	4682      	mov	sl, r0
 8008f8a:	468b      	mov	fp, r1
 8008f8c:	f038 080f 	bics.w	r8, r8, #15
 8008f90:	d04f      	beq.n	8009032 <_strtod_l+0x522>
 8008f92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f96:	dd22      	ble.n	8008fde <_strtod_l+0x4ce>
 8008f98:	2500      	movs	r5, #0
 8008f9a:	462e      	mov	r6, r5
 8008f9c:	9507      	str	r5, [sp, #28]
 8008f9e:	9505      	str	r5, [sp, #20]
 8008fa0:	2322      	movs	r3, #34	; 0x22
 8008fa2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80090bc <_strtod_l+0x5ac>
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	f04f 0a00 	mov.w	sl, #0
 8008fac:	9b07      	ldr	r3, [sp, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f43f adf2 	beq.w	8008b98 <_strtod_l+0x88>
 8008fb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f001 fe9c 	bl	800acf4 <_Bfree>
 8008fbc:	9905      	ldr	r1, [sp, #20]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f001 fe98 	bl	800acf4 <_Bfree>
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f001 fe94 	bl	800acf4 <_Bfree>
 8008fcc:	9907      	ldr	r1, [sp, #28]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f001 fe90 	bl	800acf4 <_Bfree>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f001 fe8c 	bl	800acf4 <_Bfree>
 8008fdc:	e5dc      	b.n	8008b98 <_strtod_l+0x88>
 8008fde:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <_strtod_l+0x5a8>)
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008fe8:	4650      	mov	r0, sl
 8008fea:	4659      	mov	r1, fp
 8008fec:	4699      	mov	r9, r3
 8008fee:	f1b8 0f01 	cmp.w	r8, #1
 8008ff2:	dc21      	bgt.n	8009038 <_strtod_l+0x528>
 8008ff4:	b10b      	cbz	r3, 8008ffa <_strtod_l+0x4ea>
 8008ff6:	4682      	mov	sl, r0
 8008ff8:	468b      	mov	fp, r1
 8008ffa:	4b2f      	ldr	r3, [pc, #188]	; (80090b8 <_strtod_l+0x5a8>)
 8008ffc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009000:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009004:	4652      	mov	r2, sl
 8009006:	465b      	mov	r3, fp
 8009008:	e9d9 0100 	ldrd	r0, r1, [r9]
 800900c:	f7f7 fb04 	bl	8000618 <__aeabi_dmul>
 8009010:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <_strtod_l+0x5ac>)
 8009012:	460a      	mov	r2, r1
 8009014:	400b      	ands	r3, r1
 8009016:	492a      	ldr	r1, [pc, #168]	; (80090c0 <_strtod_l+0x5b0>)
 8009018:	428b      	cmp	r3, r1
 800901a:	4682      	mov	sl, r0
 800901c:	d8bc      	bhi.n	8008f98 <_strtod_l+0x488>
 800901e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009022:	428b      	cmp	r3, r1
 8009024:	bf86      	itte	hi
 8009026:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80090c4 <_strtod_l+0x5b4>
 800902a:	f04f 3aff 	movhi.w	sl, #4294967295
 800902e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009032:	2300      	movs	r3, #0
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	e084      	b.n	8009142 <_strtod_l+0x632>
 8009038:	f018 0f01 	tst.w	r8, #1
 800903c:	d005      	beq.n	800904a <_strtod_l+0x53a>
 800903e:	9b04      	ldr	r3, [sp, #16]
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	f7f7 fae8 	bl	8000618 <__aeabi_dmul>
 8009048:	2301      	movs	r3, #1
 800904a:	9a04      	ldr	r2, [sp, #16]
 800904c:	3208      	adds	r2, #8
 800904e:	f109 0901 	add.w	r9, r9, #1
 8009052:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009056:	9204      	str	r2, [sp, #16]
 8009058:	e7c9      	b.n	8008fee <_strtod_l+0x4de>
 800905a:	d0ea      	beq.n	8009032 <_strtod_l+0x522>
 800905c:	f1c8 0800 	rsb	r8, r8, #0
 8009060:	f018 020f 	ands.w	r2, r8, #15
 8009064:	d00a      	beq.n	800907c <_strtod_l+0x56c>
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <_strtod_l+0x5a4>)
 8009068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906c:	4650      	mov	r0, sl
 800906e:	4659      	mov	r1, fp
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f7f7 fbfa 	bl	800086c <__aeabi_ddiv>
 8009078:	4682      	mov	sl, r0
 800907a:	468b      	mov	fp, r1
 800907c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009080:	d0d7      	beq.n	8009032 <_strtod_l+0x522>
 8009082:	f1b8 0f1f 	cmp.w	r8, #31
 8009086:	dd1f      	ble.n	80090c8 <_strtod_l+0x5b8>
 8009088:	2500      	movs	r5, #0
 800908a:	462e      	mov	r6, r5
 800908c:	9507      	str	r5, [sp, #28]
 800908e:	9505      	str	r5, [sp, #20]
 8009090:	2322      	movs	r3, #34	; 0x22
 8009092:	f04f 0a00 	mov.w	sl, #0
 8009096:	f04f 0b00 	mov.w	fp, #0
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	e786      	b.n	8008fac <_strtod_l+0x49c>
 800909e:	bf00      	nop
 80090a0:	0800ccd1 	.word	0x0800ccd1
 80090a4:	0800cd14 	.word	0x0800cd14
 80090a8:	0800ccc9 	.word	0x0800ccc9
 80090ac:	0800cd53 	.word	0x0800cd53
 80090b0:	0800d000 	.word	0x0800d000
 80090b4:	0800cee0 	.word	0x0800cee0
 80090b8:	0800ceb8 	.word	0x0800ceb8
 80090bc:	7ff00000 	.word	0x7ff00000
 80090c0:	7ca00000 	.word	0x7ca00000
 80090c4:	7fefffff 	.word	0x7fefffff
 80090c8:	f018 0310 	ands.w	r3, r8, #16
 80090cc:	bf18      	it	ne
 80090ce:	236a      	movne	r3, #106	; 0x6a
 80090d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009480 <_strtod_l+0x970>
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	4650      	mov	r0, sl
 80090d8:	4659      	mov	r1, fp
 80090da:	2300      	movs	r3, #0
 80090dc:	f018 0f01 	tst.w	r8, #1
 80090e0:	d004      	beq.n	80090ec <_strtod_l+0x5dc>
 80090e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80090e6:	f7f7 fa97 	bl	8000618 <__aeabi_dmul>
 80090ea:	2301      	movs	r3, #1
 80090ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80090f0:	f109 0908 	add.w	r9, r9, #8
 80090f4:	d1f2      	bne.n	80090dc <_strtod_l+0x5cc>
 80090f6:	b10b      	cbz	r3, 80090fc <_strtod_l+0x5ec>
 80090f8:	4682      	mov	sl, r0
 80090fa:	468b      	mov	fp, r1
 80090fc:	9b04      	ldr	r3, [sp, #16]
 80090fe:	b1c3      	cbz	r3, 8009132 <_strtod_l+0x622>
 8009100:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009104:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009108:	2b00      	cmp	r3, #0
 800910a:	4659      	mov	r1, fp
 800910c:	dd11      	ble.n	8009132 <_strtod_l+0x622>
 800910e:	2b1f      	cmp	r3, #31
 8009110:	f340 8124 	ble.w	800935c <_strtod_l+0x84c>
 8009114:	2b34      	cmp	r3, #52	; 0x34
 8009116:	bfde      	ittt	le
 8009118:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800911c:	f04f 33ff 	movle.w	r3, #4294967295
 8009120:	fa03 f202 	lslle.w	r2, r3, r2
 8009124:	f04f 0a00 	mov.w	sl, #0
 8009128:	bfcc      	ite	gt
 800912a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800912e:	ea02 0b01 	andle.w	fp, r2, r1
 8009132:	2200      	movs	r2, #0
 8009134:	2300      	movs	r3, #0
 8009136:	4650      	mov	r0, sl
 8009138:	4659      	mov	r1, fp
 800913a:	f7f7 fcd5 	bl	8000ae8 <__aeabi_dcmpeq>
 800913e:	2800      	cmp	r0, #0
 8009140:	d1a2      	bne.n	8009088 <_strtod_l+0x578>
 8009142:	9b07      	ldr	r3, [sp, #28]
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	9908      	ldr	r1, [sp, #32]
 8009148:	462b      	mov	r3, r5
 800914a:	463a      	mov	r2, r7
 800914c:	4620      	mov	r0, r4
 800914e:	f001 fe39 	bl	800adc4 <__s2b>
 8009152:	9007      	str	r0, [sp, #28]
 8009154:	2800      	cmp	r0, #0
 8009156:	f43f af1f 	beq.w	8008f98 <_strtod_l+0x488>
 800915a:	9b05      	ldr	r3, [sp, #20]
 800915c:	1b9e      	subs	r6, r3, r6
 800915e:	9b06      	ldr	r3, [sp, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfb4      	ite	lt
 8009164:	4633      	movlt	r3, r6
 8009166:	2300      	movge	r3, #0
 8009168:	930c      	str	r3, [sp, #48]	; 0x30
 800916a:	9b06      	ldr	r3, [sp, #24]
 800916c:	2500      	movs	r5, #0
 800916e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009172:	9312      	str	r3, [sp, #72]	; 0x48
 8009174:	462e      	mov	r6, r5
 8009176:	9b07      	ldr	r3, [sp, #28]
 8009178:	4620      	mov	r0, r4
 800917a:	6859      	ldr	r1, [r3, #4]
 800917c:	f001 fd7a 	bl	800ac74 <_Balloc>
 8009180:	9005      	str	r0, [sp, #20]
 8009182:	2800      	cmp	r0, #0
 8009184:	f43f af0c 	beq.w	8008fa0 <_strtod_l+0x490>
 8009188:	9b07      	ldr	r3, [sp, #28]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	3202      	adds	r2, #2
 800918e:	f103 010c 	add.w	r1, r3, #12
 8009192:	0092      	lsls	r2, r2, #2
 8009194:	300c      	adds	r0, #12
 8009196:	f001 fd5f 	bl	800ac58 <memcpy>
 800919a:	ec4b ab10 	vmov	d0, sl, fp
 800919e:	aa1a      	add	r2, sp, #104	; 0x68
 80091a0:	a919      	add	r1, sp, #100	; 0x64
 80091a2:	4620      	mov	r0, r4
 80091a4:	f002 f954 	bl	800b450 <__d2b>
 80091a8:	ec4b ab18 	vmov	d8, sl, fp
 80091ac:	9018      	str	r0, [sp, #96]	; 0x60
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f43f aef6 	beq.w	8008fa0 <_strtod_l+0x490>
 80091b4:	2101      	movs	r1, #1
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 fe9e 	bl	800aef8 <__i2b>
 80091bc:	4606      	mov	r6, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f aeee 	beq.w	8008fa0 <_strtod_l+0x490>
 80091c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091c6:	9904      	ldr	r1, [sp, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bfab      	itete	ge
 80091cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80091ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80091d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80091d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80091d6:	bfac      	ite	ge
 80091d8:	eb03 0902 	addge.w	r9, r3, r2
 80091dc:	1ad7      	sublt	r7, r2, r3
 80091de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80091e0:	eba3 0801 	sub.w	r8, r3, r1
 80091e4:	4490      	add	r8, r2
 80091e6:	4ba1      	ldr	r3, [pc, #644]	; (800946c <_strtod_l+0x95c>)
 80091e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80091ec:	4598      	cmp	r8, r3
 80091ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80091f2:	f280 80c7 	bge.w	8009384 <_strtod_l+0x874>
 80091f6:	eba3 0308 	sub.w	r3, r3, r8
 80091fa:	2b1f      	cmp	r3, #31
 80091fc:	eba2 0203 	sub.w	r2, r2, r3
 8009200:	f04f 0101 	mov.w	r1, #1
 8009204:	f300 80b1 	bgt.w	800936a <_strtod_l+0x85a>
 8009208:	fa01 f303 	lsl.w	r3, r1, r3
 800920c:	930d      	str	r3, [sp, #52]	; 0x34
 800920e:	2300      	movs	r3, #0
 8009210:	9308      	str	r3, [sp, #32]
 8009212:	eb09 0802 	add.w	r8, r9, r2
 8009216:	9b04      	ldr	r3, [sp, #16]
 8009218:	45c1      	cmp	r9, r8
 800921a:	4417      	add	r7, r2
 800921c:	441f      	add	r7, r3
 800921e:	464b      	mov	r3, r9
 8009220:	bfa8      	it	ge
 8009222:	4643      	movge	r3, r8
 8009224:	42bb      	cmp	r3, r7
 8009226:	bfa8      	it	ge
 8009228:	463b      	movge	r3, r7
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfc2      	ittt	gt
 800922e:	eba8 0803 	subgt.w	r8, r8, r3
 8009232:	1aff      	subgt	r7, r7, r3
 8009234:	eba9 0903 	subgt.w	r9, r9, r3
 8009238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800923a:	2b00      	cmp	r3, #0
 800923c:	dd17      	ble.n	800926e <_strtod_l+0x75e>
 800923e:	4631      	mov	r1, r6
 8009240:	461a      	mov	r2, r3
 8009242:	4620      	mov	r0, r4
 8009244:	f001 ff18 	bl	800b078 <__pow5mult>
 8009248:	4606      	mov	r6, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	f43f aea8 	beq.w	8008fa0 <_strtod_l+0x490>
 8009250:	4601      	mov	r1, r0
 8009252:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009254:	4620      	mov	r0, r4
 8009256:	f001 fe65 	bl	800af24 <__multiply>
 800925a:	900b      	str	r0, [sp, #44]	; 0x2c
 800925c:	2800      	cmp	r0, #0
 800925e:	f43f ae9f 	beq.w	8008fa0 <_strtod_l+0x490>
 8009262:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009264:	4620      	mov	r0, r4
 8009266:	f001 fd45 	bl	800acf4 <_Bfree>
 800926a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800926c:	9318      	str	r3, [sp, #96]	; 0x60
 800926e:	f1b8 0f00 	cmp.w	r8, #0
 8009272:	f300 808c 	bgt.w	800938e <_strtod_l+0x87e>
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	dd08      	ble.n	800928e <_strtod_l+0x77e>
 800927c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800927e:	9905      	ldr	r1, [sp, #20]
 8009280:	4620      	mov	r0, r4
 8009282:	f001 fef9 	bl	800b078 <__pow5mult>
 8009286:	9005      	str	r0, [sp, #20]
 8009288:	2800      	cmp	r0, #0
 800928a:	f43f ae89 	beq.w	8008fa0 <_strtod_l+0x490>
 800928e:	2f00      	cmp	r7, #0
 8009290:	dd08      	ble.n	80092a4 <_strtod_l+0x794>
 8009292:	9905      	ldr	r1, [sp, #20]
 8009294:	463a      	mov	r2, r7
 8009296:	4620      	mov	r0, r4
 8009298:	f001 ff48 	bl	800b12c <__lshift>
 800929c:	9005      	str	r0, [sp, #20]
 800929e:	2800      	cmp	r0, #0
 80092a0:	f43f ae7e 	beq.w	8008fa0 <_strtod_l+0x490>
 80092a4:	f1b9 0f00 	cmp.w	r9, #0
 80092a8:	dd08      	ble.n	80092bc <_strtod_l+0x7ac>
 80092aa:	4631      	mov	r1, r6
 80092ac:	464a      	mov	r2, r9
 80092ae:	4620      	mov	r0, r4
 80092b0:	f001 ff3c 	bl	800b12c <__lshift>
 80092b4:	4606      	mov	r6, r0
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f ae72 	beq.w	8008fa0 <_strtod_l+0x490>
 80092bc:	9a05      	ldr	r2, [sp, #20]
 80092be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092c0:	4620      	mov	r0, r4
 80092c2:	f001 ffbf 	bl	800b244 <__mdiff>
 80092c6:	4605      	mov	r5, r0
 80092c8:	2800      	cmp	r0, #0
 80092ca:	f43f ae69 	beq.w	8008fa0 <_strtod_l+0x490>
 80092ce:	68c3      	ldr	r3, [r0, #12]
 80092d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092d2:	2300      	movs	r3, #0
 80092d4:	60c3      	str	r3, [r0, #12]
 80092d6:	4631      	mov	r1, r6
 80092d8:	f001 ff98 	bl	800b20c <__mcmp>
 80092dc:	2800      	cmp	r0, #0
 80092de:	da60      	bge.n	80093a2 <_strtod_l+0x892>
 80092e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e2:	ea53 030a 	orrs.w	r3, r3, sl
 80092e6:	f040 8082 	bne.w	80093ee <_strtod_l+0x8de>
 80092ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d17d      	bne.n	80093ee <_strtod_l+0x8de>
 80092f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092f6:	0d1b      	lsrs	r3, r3, #20
 80092f8:	051b      	lsls	r3, r3, #20
 80092fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80092fe:	d976      	bls.n	80093ee <_strtod_l+0x8de>
 8009300:	696b      	ldr	r3, [r5, #20]
 8009302:	b913      	cbnz	r3, 800930a <_strtod_l+0x7fa>
 8009304:	692b      	ldr	r3, [r5, #16]
 8009306:	2b01      	cmp	r3, #1
 8009308:	dd71      	ble.n	80093ee <_strtod_l+0x8de>
 800930a:	4629      	mov	r1, r5
 800930c:	2201      	movs	r2, #1
 800930e:	4620      	mov	r0, r4
 8009310:	f001 ff0c 	bl	800b12c <__lshift>
 8009314:	4631      	mov	r1, r6
 8009316:	4605      	mov	r5, r0
 8009318:	f001 ff78 	bl	800b20c <__mcmp>
 800931c:	2800      	cmp	r0, #0
 800931e:	dd66      	ble.n	80093ee <_strtod_l+0x8de>
 8009320:	9904      	ldr	r1, [sp, #16]
 8009322:	4a53      	ldr	r2, [pc, #332]	; (8009470 <_strtod_l+0x960>)
 8009324:	465b      	mov	r3, fp
 8009326:	2900      	cmp	r1, #0
 8009328:	f000 8081 	beq.w	800942e <_strtod_l+0x91e>
 800932c:	ea02 010b 	and.w	r1, r2, fp
 8009330:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009334:	dc7b      	bgt.n	800942e <_strtod_l+0x91e>
 8009336:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800933a:	f77f aea9 	ble.w	8009090 <_strtod_l+0x580>
 800933e:	4b4d      	ldr	r3, [pc, #308]	; (8009474 <_strtod_l+0x964>)
 8009340:	4650      	mov	r0, sl
 8009342:	4659      	mov	r1, fp
 8009344:	2200      	movs	r2, #0
 8009346:	f7f7 f967 	bl	8000618 <__aeabi_dmul>
 800934a:	460b      	mov	r3, r1
 800934c:	4303      	orrs	r3, r0
 800934e:	bf08      	it	eq
 8009350:	2322      	moveq	r3, #34	; 0x22
 8009352:	4682      	mov	sl, r0
 8009354:	468b      	mov	fp, r1
 8009356:	bf08      	it	eq
 8009358:	6023      	streq	r3, [r4, #0]
 800935a:	e62b      	b.n	8008fb4 <_strtod_l+0x4a4>
 800935c:	f04f 32ff 	mov.w	r2, #4294967295
 8009360:	fa02 f303 	lsl.w	r3, r2, r3
 8009364:	ea03 0a0a 	and.w	sl, r3, sl
 8009368:	e6e3      	b.n	8009132 <_strtod_l+0x622>
 800936a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800936e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009372:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009376:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800937a:	fa01 f308 	lsl.w	r3, r1, r8
 800937e:	9308      	str	r3, [sp, #32]
 8009380:	910d      	str	r1, [sp, #52]	; 0x34
 8009382:	e746      	b.n	8009212 <_strtod_l+0x702>
 8009384:	2300      	movs	r3, #0
 8009386:	9308      	str	r3, [sp, #32]
 8009388:	2301      	movs	r3, #1
 800938a:	930d      	str	r3, [sp, #52]	; 0x34
 800938c:	e741      	b.n	8009212 <_strtod_l+0x702>
 800938e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009390:	4642      	mov	r2, r8
 8009392:	4620      	mov	r0, r4
 8009394:	f001 feca 	bl	800b12c <__lshift>
 8009398:	9018      	str	r0, [sp, #96]	; 0x60
 800939a:	2800      	cmp	r0, #0
 800939c:	f47f af6b 	bne.w	8009276 <_strtod_l+0x766>
 80093a0:	e5fe      	b.n	8008fa0 <_strtod_l+0x490>
 80093a2:	465f      	mov	r7, fp
 80093a4:	d16e      	bne.n	8009484 <_strtod_l+0x974>
 80093a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093ac:	b342      	cbz	r2, 8009400 <_strtod_l+0x8f0>
 80093ae:	4a32      	ldr	r2, [pc, #200]	; (8009478 <_strtod_l+0x968>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d128      	bne.n	8009406 <_strtod_l+0x8f6>
 80093b4:	9b04      	ldr	r3, [sp, #16]
 80093b6:	4651      	mov	r1, sl
 80093b8:	b1eb      	cbz	r3, 80093f6 <_strtod_l+0x8e6>
 80093ba:	4b2d      	ldr	r3, [pc, #180]	; (8009470 <_strtod_l+0x960>)
 80093bc:	403b      	ands	r3, r7
 80093be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093c2:	f04f 32ff 	mov.w	r2, #4294967295
 80093c6:	d819      	bhi.n	80093fc <_strtod_l+0x8ec>
 80093c8:	0d1b      	lsrs	r3, r3, #20
 80093ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	4299      	cmp	r1, r3
 80093d4:	d117      	bne.n	8009406 <_strtod_l+0x8f6>
 80093d6:	4b29      	ldr	r3, [pc, #164]	; (800947c <_strtod_l+0x96c>)
 80093d8:	429f      	cmp	r7, r3
 80093da:	d102      	bne.n	80093e2 <_strtod_l+0x8d2>
 80093dc:	3101      	adds	r1, #1
 80093de:	f43f addf 	beq.w	8008fa0 <_strtod_l+0x490>
 80093e2:	4b23      	ldr	r3, [pc, #140]	; (8009470 <_strtod_l+0x960>)
 80093e4:	403b      	ands	r3, r7
 80093e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80093ea:	f04f 0a00 	mov.w	sl, #0
 80093ee:	9b04      	ldr	r3, [sp, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1a4      	bne.n	800933e <_strtod_l+0x82e>
 80093f4:	e5de      	b.n	8008fb4 <_strtod_l+0x4a4>
 80093f6:	f04f 33ff 	mov.w	r3, #4294967295
 80093fa:	e7ea      	b.n	80093d2 <_strtod_l+0x8c2>
 80093fc:	4613      	mov	r3, r2
 80093fe:	e7e8      	b.n	80093d2 <_strtod_l+0x8c2>
 8009400:	ea53 030a 	orrs.w	r3, r3, sl
 8009404:	d08c      	beq.n	8009320 <_strtod_l+0x810>
 8009406:	9b08      	ldr	r3, [sp, #32]
 8009408:	b1db      	cbz	r3, 8009442 <_strtod_l+0x932>
 800940a:	423b      	tst	r3, r7
 800940c:	d0ef      	beq.n	80093ee <_strtod_l+0x8de>
 800940e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009410:	9a04      	ldr	r2, [sp, #16]
 8009412:	4650      	mov	r0, sl
 8009414:	4659      	mov	r1, fp
 8009416:	b1c3      	cbz	r3, 800944a <_strtod_l+0x93a>
 8009418:	f7ff fb5b 	bl	8008ad2 <sulp>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	ec51 0b18 	vmov	r0, r1, d8
 8009424:	f7f6 ff42 	bl	80002ac <__adddf3>
 8009428:	4682      	mov	sl, r0
 800942a:	468b      	mov	fp, r1
 800942c:	e7df      	b.n	80093ee <_strtod_l+0x8de>
 800942e:	4013      	ands	r3, r2
 8009430:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009434:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009438:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800943c:	f04f 3aff 	mov.w	sl, #4294967295
 8009440:	e7d5      	b.n	80093ee <_strtod_l+0x8de>
 8009442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009444:	ea13 0f0a 	tst.w	r3, sl
 8009448:	e7e0      	b.n	800940c <_strtod_l+0x8fc>
 800944a:	f7ff fb42 	bl	8008ad2 <sulp>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	ec51 0b18 	vmov	r0, r1, d8
 8009456:	f7f6 ff27 	bl	80002a8 <__aeabi_dsub>
 800945a:	2200      	movs	r2, #0
 800945c:	2300      	movs	r3, #0
 800945e:	4682      	mov	sl, r0
 8009460:	468b      	mov	fp, r1
 8009462:	f7f7 fb41 	bl	8000ae8 <__aeabi_dcmpeq>
 8009466:	2800      	cmp	r0, #0
 8009468:	d0c1      	beq.n	80093ee <_strtod_l+0x8de>
 800946a:	e611      	b.n	8009090 <_strtod_l+0x580>
 800946c:	fffffc02 	.word	0xfffffc02
 8009470:	7ff00000 	.word	0x7ff00000
 8009474:	39500000 	.word	0x39500000
 8009478:	000fffff 	.word	0x000fffff
 800947c:	7fefffff 	.word	0x7fefffff
 8009480:	0800cd28 	.word	0x0800cd28
 8009484:	4631      	mov	r1, r6
 8009486:	4628      	mov	r0, r5
 8009488:	f002 f83e 	bl	800b508 <__ratio>
 800948c:	ec59 8b10 	vmov	r8, r9, d0
 8009490:	ee10 0a10 	vmov	r0, s0
 8009494:	2200      	movs	r2, #0
 8009496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800949a:	4649      	mov	r1, r9
 800949c:	f7f7 fb38 	bl	8000b10 <__aeabi_dcmple>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d07a      	beq.n	800959a <_strtod_l+0xa8a>
 80094a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d04a      	beq.n	8009540 <_strtod_l+0xa30>
 80094aa:	4b95      	ldr	r3, [pc, #596]	; (8009700 <_strtod_l+0xbf0>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009700 <_strtod_l+0xbf0>
 80094b6:	f04f 0800 	mov.w	r8, #0
 80094ba:	4b92      	ldr	r3, [pc, #584]	; (8009704 <_strtod_l+0xbf4>)
 80094bc:	403b      	ands	r3, r7
 80094be:	930d      	str	r3, [sp, #52]	; 0x34
 80094c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094c2:	4b91      	ldr	r3, [pc, #580]	; (8009708 <_strtod_l+0xbf8>)
 80094c4:	429a      	cmp	r2, r3
 80094c6:	f040 80b0 	bne.w	800962a <_strtod_l+0xb1a>
 80094ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80094d2:	ec4b ab10 	vmov	d0, sl, fp
 80094d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094da:	f001 ff3d 	bl	800b358 <__ulp>
 80094de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094e2:	ec53 2b10 	vmov	r2, r3, d0
 80094e6:	f7f7 f897 	bl	8000618 <__aeabi_dmul>
 80094ea:	4652      	mov	r2, sl
 80094ec:	465b      	mov	r3, fp
 80094ee:	f7f6 fedd 	bl	80002ac <__adddf3>
 80094f2:	460b      	mov	r3, r1
 80094f4:	4983      	ldr	r1, [pc, #524]	; (8009704 <_strtod_l+0xbf4>)
 80094f6:	4a85      	ldr	r2, [pc, #532]	; (800970c <_strtod_l+0xbfc>)
 80094f8:	4019      	ands	r1, r3
 80094fa:	4291      	cmp	r1, r2
 80094fc:	4682      	mov	sl, r0
 80094fe:	d960      	bls.n	80095c2 <_strtod_l+0xab2>
 8009500:	ee18 3a90 	vmov	r3, s17
 8009504:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009508:	4293      	cmp	r3, r2
 800950a:	d104      	bne.n	8009516 <_strtod_l+0xa06>
 800950c:	ee18 3a10 	vmov	r3, s16
 8009510:	3301      	adds	r3, #1
 8009512:	f43f ad45 	beq.w	8008fa0 <_strtod_l+0x490>
 8009516:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009718 <_strtod_l+0xc08>
 800951a:	f04f 3aff 	mov.w	sl, #4294967295
 800951e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009520:	4620      	mov	r0, r4
 8009522:	f001 fbe7 	bl	800acf4 <_Bfree>
 8009526:	9905      	ldr	r1, [sp, #20]
 8009528:	4620      	mov	r0, r4
 800952a:	f001 fbe3 	bl	800acf4 <_Bfree>
 800952e:	4631      	mov	r1, r6
 8009530:	4620      	mov	r0, r4
 8009532:	f001 fbdf 	bl	800acf4 <_Bfree>
 8009536:	4629      	mov	r1, r5
 8009538:	4620      	mov	r0, r4
 800953a:	f001 fbdb 	bl	800acf4 <_Bfree>
 800953e:	e61a      	b.n	8009176 <_strtod_l+0x666>
 8009540:	f1ba 0f00 	cmp.w	sl, #0
 8009544:	d11b      	bne.n	800957e <_strtod_l+0xa6e>
 8009546:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800954a:	b9f3      	cbnz	r3, 800958a <_strtod_l+0xa7a>
 800954c:	4b6c      	ldr	r3, [pc, #432]	; (8009700 <_strtod_l+0xbf0>)
 800954e:	2200      	movs	r2, #0
 8009550:	4640      	mov	r0, r8
 8009552:	4649      	mov	r1, r9
 8009554:	f7f7 fad2 	bl	8000afc <__aeabi_dcmplt>
 8009558:	b9d0      	cbnz	r0, 8009590 <_strtod_l+0xa80>
 800955a:	4640      	mov	r0, r8
 800955c:	4649      	mov	r1, r9
 800955e:	4b6c      	ldr	r3, [pc, #432]	; (8009710 <_strtod_l+0xc00>)
 8009560:	2200      	movs	r2, #0
 8009562:	f7f7 f859 	bl	8000618 <__aeabi_dmul>
 8009566:	4680      	mov	r8, r0
 8009568:	4689      	mov	r9, r1
 800956a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800956e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009572:	9315      	str	r3, [sp, #84]	; 0x54
 8009574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009578:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800957c:	e79d      	b.n	80094ba <_strtod_l+0x9aa>
 800957e:	f1ba 0f01 	cmp.w	sl, #1
 8009582:	d102      	bne.n	800958a <_strtod_l+0xa7a>
 8009584:	2f00      	cmp	r7, #0
 8009586:	f43f ad83 	beq.w	8009090 <_strtod_l+0x580>
 800958a:	4b62      	ldr	r3, [pc, #392]	; (8009714 <_strtod_l+0xc04>)
 800958c:	2200      	movs	r2, #0
 800958e:	e78e      	b.n	80094ae <_strtod_l+0x99e>
 8009590:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009710 <_strtod_l+0xc00>
 8009594:	f04f 0800 	mov.w	r8, #0
 8009598:	e7e7      	b.n	800956a <_strtod_l+0xa5a>
 800959a:	4b5d      	ldr	r3, [pc, #372]	; (8009710 <_strtod_l+0xc00>)
 800959c:	4640      	mov	r0, r8
 800959e:	4649      	mov	r1, r9
 80095a0:	2200      	movs	r2, #0
 80095a2:	f7f7 f839 	bl	8000618 <__aeabi_dmul>
 80095a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a8:	4680      	mov	r8, r0
 80095aa:	4689      	mov	r9, r1
 80095ac:	b933      	cbnz	r3, 80095bc <_strtod_l+0xaac>
 80095ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095b2:	900e      	str	r0, [sp, #56]	; 0x38
 80095b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80095b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80095ba:	e7dd      	b.n	8009578 <_strtod_l+0xa68>
 80095bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80095c0:	e7f9      	b.n	80095b6 <_strtod_l+0xaa6>
 80095c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1a8      	bne.n	800951e <_strtod_l+0xa0e>
 80095cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095d2:	0d1b      	lsrs	r3, r3, #20
 80095d4:	051b      	lsls	r3, r3, #20
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d1a1      	bne.n	800951e <_strtod_l+0xa0e>
 80095da:	4640      	mov	r0, r8
 80095dc:	4649      	mov	r1, r9
 80095de:	f7f7 fb7b 	bl	8000cd8 <__aeabi_d2lz>
 80095e2:	f7f6 ffeb 	bl	80005bc <__aeabi_l2d>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4640      	mov	r0, r8
 80095ec:	4649      	mov	r1, r9
 80095ee:	f7f6 fe5b 	bl	80002a8 <__aeabi_dsub>
 80095f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095f8:	ea43 030a 	orr.w	r3, r3, sl
 80095fc:	4313      	orrs	r3, r2
 80095fe:	4680      	mov	r8, r0
 8009600:	4689      	mov	r9, r1
 8009602:	d055      	beq.n	80096b0 <_strtod_l+0xba0>
 8009604:	a336      	add	r3, pc, #216	; (adr r3, 80096e0 <_strtod_l+0xbd0>)
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f7f7 fa77 	bl	8000afc <__aeabi_dcmplt>
 800960e:	2800      	cmp	r0, #0
 8009610:	f47f acd0 	bne.w	8008fb4 <_strtod_l+0x4a4>
 8009614:	a334      	add	r3, pc, #208	; (adr r3, 80096e8 <_strtod_l+0xbd8>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	4640      	mov	r0, r8
 800961c:	4649      	mov	r1, r9
 800961e:	f7f7 fa8b 	bl	8000b38 <__aeabi_dcmpgt>
 8009622:	2800      	cmp	r0, #0
 8009624:	f43f af7b 	beq.w	800951e <_strtod_l+0xa0e>
 8009628:	e4c4      	b.n	8008fb4 <_strtod_l+0x4a4>
 800962a:	9b04      	ldr	r3, [sp, #16]
 800962c:	b333      	cbz	r3, 800967c <_strtod_l+0xb6c>
 800962e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009630:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009634:	d822      	bhi.n	800967c <_strtod_l+0xb6c>
 8009636:	a32e      	add	r3, pc, #184	; (adr r3, 80096f0 <_strtod_l+0xbe0>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	4640      	mov	r0, r8
 800963e:	4649      	mov	r1, r9
 8009640:	f7f7 fa66 	bl	8000b10 <__aeabi_dcmple>
 8009644:	b1a0      	cbz	r0, 8009670 <_strtod_l+0xb60>
 8009646:	4649      	mov	r1, r9
 8009648:	4640      	mov	r0, r8
 800964a:	f7f7 fabd 	bl	8000bc8 <__aeabi_d2uiz>
 800964e:	2801      	cmp	r0, #1
 8009650:	bf38      	it	cc
 8009652:	2001      	movcc	r0, #1
 8009654:	f7f6 ff66 	bl	8000524 <__aeabi_ui2d>
 8009658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800965a:	4680      	mov	r8, r0
 800965c:	4689      	mov	r9, r1
 800965e:	bb23      	cbnz	r3, 80096aa <_strtod_l+0xb9a>
 8009660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009664:	9010      	str	r0, [sp, #64]	; 0x40
 8009666:	9311      	str	r3, [sp, #68]	; 0x44
 8009668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800966c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009674:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009678:	1a9b      	subs	r3, r3, r2
 800967a:	9309      	str	r3, [sp, #36]	; 0x24
 800967c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009680:	eeb0 0a48 	vmov.f32	s0, s16
 8009684:	eef0 0a68 	vmov.f32	s1, s17
 8009688:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800968c:	f001 fe64 	bl	800b358 <__ulp>
 8009690:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009694:	ec53 2b10 	vmov	r2, r3, d0
 8009698:	f7f6 ffbe 	bl	8000618 <__aeabi_dmul>
 800969c:	ec53 2b18 	vmov	r2, r3, d8
 80096a0:	f7f6 fe04 	bl	80002ac <__adddf3>
 80096a4:	4682      	mov	sl, r0
 80096a6:	468b      	mov	fp, r1
 80096a8:	e78d      	b.n	80095c6 <_strtod_l+0xab6>
 80096aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80096ae:	e7db      	b.n	8009668 <_strtod_l+0xb58>
 80096b0:	a311      	add	r3, pc, #68	; (adr r3, 80096f8 <_strtod_l+0xbe8>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f7 fa21 	bl	8000afc <__aeabi_dcmplt>
 80096ba:	e7b2      	b.n	8009622 <_strtod_l+0xb12>
 80096bc:	2300      	movs	r3, #0
 80096be:	930a      	str	r3, [sp, #40]	; 0x28
 80096c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	f7ff ba6b 	b.w	8008ba0 <_strtod_l+0x90>
 80096ca:	2a65      	cmp	r2, #101	; 0x65
 80096cc:	f43f ab5f 	beq.w	8008d8e <_strtod_l+0x27e>
 80096d0:	2a45      	cmp	r2, #69	; 0x45
 80096d2:	f43f ab5c 	beq.w	8008d8e <_strtod_l+0x27e>
 80096d6:	2301      	movs	r3, #1
 80096d8:	f7ff bb94 	b.w	8008e04 <_strtod_l+0x2f4>
 80096dc:	f3af 8000 	nop.w
 80096e0:	94a03595 	.word	0x94a03595
 80096e4:	3fdfffff 	.word	0x3fdfffff
 80096e8:	35afe535 	.word	0x35afe535
 80096ec:	3fe00000 	.word	0x3fe00000
 80096f0:	ffc00000 	.word	0xffc00000
 80096f4:	41dfffff 	.word	0x41dfffff
 80096f8:	94a03595 	.word	0x94a03595
 80096fc:	3fcfffff 	.word	0x3fcfffff
 8009700:	3ff00000 	.word	0x3ff00000
 8009704:	7ff00000 	.word	0x7ff00000
 8009708:	7fe00000 	.word	0x7fe00000
 800970c:	7c9fffff 	.word	0x7c9fffff
 8009710:	3fe00000 	.word	0x3fe00000
 8009714:	bff00000 	.word	0xbff00000
 8009718:	7fefffff 	.word	0x7fefffff

0800971c <_strtod_r>:
 800971c:	4b01      	ldr	r3, [pc, #4]	; (8009724 <_strtod_r+0x8>)
 800971e:	f7ff b9f7 	b.w	8008b10 <_strtod_l>
 8009722:	bf00      	nop
 8009724:	20000084 	.word	0x20000084

08009728 <_strtol_l.constprop.0>:
 8009728:	2b01      	cmp	r3, #1
 800972a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800972e:	d001      	beq.n	8009734 <_strtol_l.constprop.0+0xc>
 8009730:	2b24      	cmp	r3, #36	; 0x24
 8009732:	d906      	bls.n	8009742 <_strtol_l.constprop.0+0x1a>
 8009734:	f7fe fa9e 	bl	8007c74 <__errno>
 8009738:	2316      	movs	r3, #22
 800973a:	6003      	str	r3, [r0, #0]
 800973c:	2000      	movs	r0, #0
 800973e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009742:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009828 <_strtol_l.constprop.0+0x100>
 8009746:	460d      	mov	r5, r1
 8009748:	462e      	mov	r6, r5
 800974a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800974e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009752:	f017 0708 	ands.w	r7, r7, #8
 8009756:	d1f7      	bne.n	8009748 <_strtol_l.constprop.0+0x20>
 8009758:	2c2d      	cmp	r4, #45	; 0x2d
 800975a:	d132      	bne.n	80097c2 <_strtol_l.constprop.0+0x9a>
 800975c:	782c      	ldrb	r4, [r5, #0]
 800975e:	2701      	movs	r7, #1
 8009760:	1cb5      	adds	r5, r6, #2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d05b      	beq.n	800981e <_strtol_l.constprop.0+0xf6>
 8009766:	2b10      	cmp	r3, #16
 8009768:	d109      	bne.n	800977e <_strtol_l.constprop.0+0x56>
 800976a:	2c30      	cmp	r4, #48	; 0x30
 800976c:	d107      	bne.n	800977e <_strtol_l.constprop.0+0x56>
 800976e:	782c      	ldrb	r4, [r5, #0]
 8009770:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009774:	2c58      	cmp	r4, #88	; 0x58
 8009776:	d14d      	bne.n	8009814 <_strtol_l.constprop.0+0xec>
 8009778:	786c      	ldrb	r4, [r5, #1]
 800977a:	2310      	movs	r3, #16
 800977c:	3502      	adds	r5, #2
 800977e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009782:	f108 38ff 	add.w	r8, r8, #4294967295
 8009786:	f04f 0c00 	mov.w	ip, #0
 800978a:	fbb8 f9f3 	udiv	r9, r8, r3
 800978e:	4666      	mov	r6, ip
 8009790:	fb03 8a19 	mls	sl, r3, r9, r8
 8009794:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009798:	f1be 0f09 	cmp.w	lr, #9
 800979c:	d816      	bhi.n	80097cc <_strtol_l.constprop.0+0xa4>
 800979e:	4674      	mov	r4, lr
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	dd24      	ble.n	80097ee <_strtol_l.constprop.0+0xc6>
 80097a4:	f1bc 0f00 	cmp.w	ip, #0
 80097a8:	db1e      	blt.n	80097e8 <_strtol_l.constprop.0+0xc0>
 80097aa:	45b1      	cmp	r9, r6
 80097ac:	d31c      	bcc.n	80097e8 <_strtol_l.constprop.0+0xc0>
 80097ae:	d101      	bne.n	80097b4 <_strtol_l.constprop.0+0x8c>
 80097b0:	45a2      	cmp	sl, r4
 80097b2:	db19      	blt.n	80097e8 <_strtol_l.constprop.0+0xc0>
 80097b4:	fb06 4603 	mla	r6, r6, r3, r4
 80097b8:	f04f 0c01 	mov.w	ip, #1
 80097bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097c0:	e7e8      	b.n	8009794 <_strtol_l.constprop.0+0x6c>
 80097c2:	2c2b      	cmp	r4, #43	; 0x2b
 80097c4:	bf04      	itt	eq
 80097c6:	782c      	ldrbeq	r4, [r5, #0]
 80097c8:	1cb5      	addeq	r5, r6, #2
 80097ca:	e7ca      	b.n	8009762 <_strtol_l.constprop.0+0x3a>
 80097cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097d0:	f1be 0f19 	cmp.w	lr, #25
 80097d4:	d801      	bhi.n	80097da <_strtol_l.constprop.0+0xb2>
 80097d6:	3c37      	subs	r4, #55	; 0x37
 80097d8:	e7e2      	b.n	80097a0 <_strtol_l.constprop.0+0x78>
 80097da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097de:	f1be 0f19 	cmp.w	lr, #25
 80097e2:	d804      	bhi.n	80097ee <_strtol_l.constprop.0+0xc6>
 80097e4:	3c57      	subs	r4, #87	; 0x57
 80097e6:	e7db      	b.n	80097a0 <_strtol_l.constprop.0+0x78>
 80097e8:	f04f 3cff 	mov.w	ip, #4294967295
 80097ec:	e7e6      	b.n	80097bc <_strtol_l.constprop.0+0x94>
 80097ee:	f1bc 0f00 	cmp.w	ip, #0
 80097f2:	da05      	bge.n	8009800 <_strtol_l.constprop.0+0xd8>
 80097f4:	2322      	movs	r3, #34	; 0x22
 80097f6:	6003      	str	r3, [r0, #0]
 80097f8:	4646      	mov	r6, r8
 80097fa:	b942      	cbnz	r2, 800980e <_strtol_l.constprop.0+0xe6>
 80097fc:	4630      	mov	r0, r6
 80097fe:	e79e      	b.n	800973e <_strtol_l.constprop.0+0x16>
 8009800:	b107      	cbz	r7, 8009804 <_strtol_l.constprop.0+0xdc>
 8009802:	4276      	negs	r6, r6
 8009804:	2a00      	cmp	r2, #0
 8009806:	d0f9      	beq.n	80097fc <_strtol_l.constprop.0+0xd4>
 8009808:	f1bc 0f00 	cmp.w	ip, #0
 800980c:	d000      	beq.n	8009810 <_strtol_l.constprop.0+0xe8>
 800980e:	1e69      	subs	r1, r5, #1
 8009810:	6011      	str	r1, [r2, #0]
 8009812:	e7f3      	b.n	80097fc <_strtol_l.constprop.0+0xd4>
 8009814:	2430      	movs	r4, #48	; 0x30
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1b1      	bne.n	800977e <_strtol_l.constprop.0+0x56>
 800981a:	2308      	movs	r3, #8
 800981c:	e7af      	b.n	800977e <_strtol_l.constprop.0+0x56>
 800981e:	2c30      	cmp	r4, #48	; 0x30
 8009820:	d0a5      	beq.n	800976e <_strtol_l.constprop.0+0x46>
 8009822:	230a      	movs	r3, #10
 8009824:	e7ab      	b.n	800977e <_strtol_l.constprop.0+0x56>
 8009826:	bf00      	nop
 8009828:	0800cbbd 	.word	0x0800cbbd

0800982c <_strtol_r>:
 800982c:	f7ff bf7c 	b.w	8009728 <_strtol_l.constprop.0>

08009830 <strtol>:
 8009830:	4613      	mov	r3, r2
 8009832:	460a      	mov	r2, r1
 8009834:	4601      	mov	r1, r0
 8009836:	4802      	ldr	r0, [pc, #8]	; (8009840 <strtol+0x10>)
 8009838:	6800      	ldr	r0, [r0, #0]
 800983a:	f7ff bf75 	b.w	8009728 <_strtol_l.constprop.0>
 800983e:	bf00      	nop
 8009840:	2000001c 	.word	0x2000001c

08009844 <quorem>:
 8009844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	6903      	ldr	r3, [r0, #16]
 800984a:	690c      	ldr	r4, [r1, #16]
 800984c:	42a3      	cmp	r3, r4
 800984e:	4607      	mov	r7, r0
 8009850:	f2c0 8081 	blt.w	8009956 <quorem+0x112>
 8009854:	3c01      	subs	r4, #1
 8009856:	f101 0814 	add.w	r8, r1, #20
 800985a:	f100 0514 	add.w	r5, r0, #20
 800985e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800986c:	3301      	adds	r3, #1
 800986e:	429a      	cmp	r2, r3
 8009870:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009874:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009878:	fbb2 f6f3 	udiv	r6, r2, r3
 800987c:	d331      	bcc.n	80098e2 <quorem+0x9e>
 800987e:	f04f 0e00 	mov.w	lr, #0
 8009882:	4640      	mov	r0, r8
 8009884:	46ac      	mov	ip, r5
 8009886:	46f2      	mov	sl, lr
 8009888:	f850 2b04 	ldr.w	r2, [r0], #4
 800988c:	b293      	uxth	r3, r2
 800988e:	fb06 e303 	mla	r3, r6, r3, lr
 8009892:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009896:	b29b      	uxth	r3, r3
 8009898:	ebaa 0303 	sub.w	r3, sl, r3
 800989c:	f8dc a000 	ldr.w	sl, [ip]
 80098a0:	0c12      	lsrs	r2, r2, #16
 80098a2:	fa13 f38a 	uxtah	r3, r3, sl
 80098a6:	fb06 e202 	mla	r2, r6, r2, lr
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	9b00      	ldr	r3, [sp, #0]
 80098ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098b2:	b292      	uxth	r2, r2
 80098b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80098c0:	4581      	cmp	r9, r0
 80098c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c6:	f84c 3b04 	str.w	r3, [ip], #4
 80098ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098ce:	d2db      	bcs.n	8009888 <quorem+0x44>
 80098d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80098d4:	b92b      	cbnz	r3, 80098e2 <quorem+0x9e>
 80098d6:	9b01      	ldr	r3, [sp, #4]
 80098d8:	3b04      	subs	r3, #4
 80098da:	429d      	cmp	r5, r3
 80098dc:	461a      	mov	r2, r3
 80098de:	d32e      	bcc.n	800993e <quorem+0xfa>
 80098e0:	613c      	str	r4, [r7, #16]
 80098e2:	4638      	mov	r0, r7
 80098e4:	f001 fc92 	bl	800b20c <__mcmp>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	db24      	blt.n	8009936 <quorem+0xf2>
 80098ec:	3601      	adds	r6, #1
 80098ee:	4628      	mov	r0, r5
 80098f0:	f04f 0c00 	mov.w	ip, #0
 80098f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80098f8:	f8d0 e000 	ldr.w	lr, [r0]
 80098fc:	b293      	uxth	r3, r2
 80098fe:	ebac 0303 	sub.w	r3, ip, r3
 8009902:	0c12      	lsrs	r2, r2, #16
 8009904:	fa13 f38e 	uxtah	r3, r3, lr
 8009908:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800990c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009910:	b29b      	uxth	r3, r3
 8009912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009916:	45c1      	cmp	r9, r8
 8009918:	f840 3b04 	str.w	r3, [r0], #4
 800991c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009920:	d2e8      	bcs.n	80098f4 <quorem+0xb0>
 8009922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800992a:	b922      	cbnz	r2, 8009936 <quorem+0xf2>
 800992c:	3b04      	subs	r3, #4
 800992e:	429d      	cmp	r5, r3
 8009930:	461a      	mov	r2, r3
 8009932:	d30a      	bcc.n	800994a <quorem+0x106>
 8009934:	613c      	str	r4, [r7, #16]
 8009936:	4630      	mov	r0, r6
 8009938:	b003      	add	sp, #12
 800993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	3b04      	subs	r3, #4
 8009942:	2a00      	cmp	r2, #0
 8009944:	d1cc      	bne.n	80098e0 <quorem+0x9c>
 8009946:	3c01      	subs	r4, #1
 8009948:	e7c7      	b.n	80098da <quorem+0x96>
 800994a:	6812      	ldr	r2, [r2, #0]
 800994c:	3b04      	subs	r3, #4
 800994e:	2a00      	cmp	r2, #0
 8009950:	d1f0      	bne.n	8009934 <quorem+0xf0>
 8009952:	3c01      	subs	r4, #1
 8009954:	e7eb      	b.n	800992e <quorem+0xea>
 8009956:	2000      	movs	r0, #0
 8009958:	e7ee      	b.n	8009938 <quorem+0xf4>
 800995a:	0000      	movs	r0, r0
 800995c:	0000      	movs	r0, r0
	...

08009960 <_dtoa_r>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	ed2d 8b04 	vpush	{d8-d9}
 8009968:	ec57 6b10 	vmov	r6, r7, d0
 800996c:	b093      	sub	sp, #76	; 0x4c
 800996e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009970:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009974:	9106      	str	r1, [sp, #24]
 8009976:	ee10 aa10 	vmov	sl, s0
 800997a:	4604      	mov	r4, r0
 800997c:	9209      	str	r2, [sp, #36]	; 0x24
 800997e:	930c      	str	r3, [sp, #48]	; 0x30
 8009980:	46bb      	mov	fp, r7
 8009982:	b975      	cbnz	r5, 80099a2 <_dtoa_r+0x42>
 8009984:	2010      	movs	r0, #16
 8009986:	f001 f94d 	bl	800ac24 <malloc>
 800998a:	4602      	mov	r2, r0
 800998c:	6260      	str	r0, [r4, #36]	; 0x24
 800998e:	b920      	cbnz	r0, 800999a <_dtoa_r+0x3a>
 8009990:	4ba7      	ldr	r3, [pc, #668]	; (8009c30 <_dtoa_r+0x2d0>)
 8009992:	21ea      	movs	r1, #234	; 0xea
 8009994:	48a7      	ldr	r0, [pc, #668]	; (8009c34 <_dtoa_r+0x2d4>)
 8009996:	f002 f8a9 	bl	800baec <__assert_func>
 800999a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800999e:	6005      	str	r5, [r0, #0]
 80099a0:	60c5      	str	r5, [r0, #12]
 80099a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a4:	6819      	ldr	r1, [r3, #0]
 80099a6:	b151      	cbz	r1, 80099be <_dtoa_r+0x5e>
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	604a      	str	r2, [r1, #4]
 80099ac:	2301      	movs	r3, #1
 80099ae:	4093      	lsls	r3, r2
 80099b0:	608b      	str	r3, [r1, #8]
 80099b2:	4620      	mov	r0, r4
 80099b4:	f001 f99e 	bl	800acf4 <_Bfree>
 80099b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	1e3b      	subs	r3, r7, #0
 80099c0:	bfaa      	itet	ge
 80099c2:	2300      	movge	r3, #0
 80099c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80099c8:	f8c8 3000 	strge.w	r3, [r8]
 80099cc:	4b9a      	ldr	r3, [pc, #616]	; (8009c38 <_dtoa_r+0x2d8>)
 80099ce:	bfbc      	itt	lt
 80099d0:	2201      	movlt	r2, #1
 80099d2:	f8c8 2000 	strlt.w	r2, [r8]
 80099d6:	ea33 030b 	bics.w	r3, r3, fp
 80099da:	d11b      	bne.n	8009a14 <_dtoa_r+0xb4>
 80099dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099de:	f242 730f 	movw	r3, #9999	; 0x270f
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099e8:	4333      	orrs	r3, r6
 80099ea:	f000 8592 	beq.w	800a512 <_dtoa_r+0xbb2>
 80099ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f0:	b963      	cbnz	r3, 8009a0c <_dtoa_r+0xac>
 80099f2:	4b92      	ldr	r3, [pc, #584]	; (8009c3c <_dtoa_r+0x2dc>)
 80099f4:	e022      	b.n	8009a3c <_dtoa_r+0xdc>
 80099f6:	4b92      	ldr	r3, [pc, #584]	; (8009c40 <_dtoa_r+0x2e0>)
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	3308      	adds	r3, #8
 80099fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	9801      	ldr	r0, [sp, #4]
 8009a02:	b013      	add	sp, #76	; 0x4c
 8009a04:	ecbd 8b04 	vpop	{d8-d9}
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	4b8b      	ldr	r3, [pc, #556]	; (8009c3c <_dtoa_r+0x2dc>)
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	3303      	adds	r3, #3
 8009a12:	e7f3      	b.n	80099fc <_dtoa_r+0x9c>
 8009a14:	2200      	movs	r2, #0
 8009a16:	2300      	movs	r3, #0
 8009a18:	4650      	mov	r0, sl
 8009a1a:	4659      	mov	r1, fp
 8009a1c:	f7f7 f864 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a20:	ec4b ab19 	vmov	d9, sl, fp
 8009a24:	4680      	mov	r8, r0
 8009a26:	b158      	cbz	r0, 8009a40 <_dtoa_r+0xe0>
 8009a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 856b 	beq.w	800a50c <_dtoa_r+0xbac>
 8009a36:	4883      	ldr	r0, [pc, #524]	; (8009c44 <_dtoa_r+0x2e4>)
 8009a38:	6018      	str	r0, [r3, #0]
 8009a3a:	1e43      	subs	r3, r0, #1
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	e7df      	b.n	8009a00 <_dtoa_r+0xa0>
 8009a40:	ec4b ab10 	vmov	d0, sl, fp
 8009a44:	aa10      	add	r2, sp, #64	; 0x40
 8009a46:	a911      	add	r1, sp, #68	; 0x44
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f001 fd01 	bl	800b450 <__d2b>
 8009a4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a52:	ee08 0a10 	vmov	s16, r0
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	f000 8084 	beq.w	8009b64 <_dtoa_r+0x204>
 8009a5c:	ee19 3a90 	vmov	r3, s19
 8009a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a68:	4656      	mov	r6, sl
 8009a6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009a76:	4b74      	ldr	r3, [pc, #464]	; (8009c48 <_dtoa_r+0x2e8>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f6 fc13 	bl	80002a8 <__aeabi_dsub>
 8009a82:	a365      	add	r3, pc, #404	; (adr r3, 8009c18 <_dtoa_r+0x2b8>)
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f7f6 fdc6 	bl	8000618 <__aeabi_dmul>
 8009a8c:	a364      	add	r3, pc, #400	; (adr r3, 8009c20 <_dtoa_r+0x2c0>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	f7f6 fc0b 	bl	80002ac <__adddf3>
 8009a96:	4606      	mov	r6, r0
 8009a98:	4628      	mov	r0, r5
 8009a9a:	460f      	mov	r7, r1
 8009a9c:	f7f6 fd52 	bl	8000544 <__aeabi_i2d>
 8009aa0:	a361      	add	r3, pc, #388	; (adr r3, 8009c28 <_dtoa_r+0x2c8>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fdb7 	bl	8000618 <__aeabi_dmul>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	f7f6 fbfb 	bl	80002ac <__adddf3>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	f7f7 f85d 	bl	8000b78 <__aeabi_d2iz>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	9000      	str	r0, [sp, #0]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f7f7 f818 	bl	8000afc <__aeabi_dcmplt>
 8009acc:	b150      	cbz	r0, 8009ae4 <_dtoa_r+0x184>
 8009ace:	9800      	ldr	r0, [sp, #0]
 8009ad0:	f7f6 fd38 	bl	8000544 <__aeabi_i2d>
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	463b      	mov	r3, r7
 8009ad8:	f7f7 f806 	bl	8000ae8 <__aeabi_dcmpeq>
 8009adc:	b910      	cbnz	r0, 8009ae4 <_dtoa_r+0x184>
 8009ade:	9b00      	ldr	r3, [sp, #0]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	2b16      	cmp	r3, #22
 8009ae8:	d85a      	bhi.n	8009ba0 <_dtoa_r+0x240>
 8009aea:	9a00      	ldr	r2, [sp, #0]
 8009aec:	4b57      	ldr	r3, [pc, #348]	; (8009c4c <_dtoa_r+0x2ec>)
 8009aee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	ec51 0b19 	vmov	r0, r1, d9
 8009afa:	f7f6 ffff 	bl	8000afc <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d050      	beq.n	8009ba4 <_dtoa_r+0x244>
 8009b02:	9b00      	ldr	r3, [sp, #0]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b0e:	1b5d      	subs	r5, r3, r5
 8009b10:	1e6b      	subs	r3, r5, #1
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	bf45      	ittet	mi
 8009b16:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b1a:	9304      	strmi	r3, [sp, #16]
 8009b1c:	2300      	movpl	r3, #0
 8009b1e:	2300      	movmi	r3, #0
 8009b20:	bf4c      	ite	mi
 8009b22:	9305      	strmi	r3, [sp, #20]
 8009b24:	9304      	strpl	r3, [sp, #16]
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	db3d      	blt.n	8009ba8 <_dtoa_r+0x248>
 8009b2c:	9b05      	ldr	r3, [sp, #20]
 8009b2e:	9a00      	ldr	r2, [sp, #0]
 8009b30:	920a      	str	r2, [sp, #40]	; 0x28
 8009b32:	4413      	add	r3, r2
 8009b34:	9305      	str	r3, [sp, #20]
 8009b36:	2300      	movs	r3, #0
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	9b06      	ldr	r3, [sp, #24]
 8009b3c:	2b09      	cmp	r3, #9
 8009b3e:	f200 8089 	bhi.w	8009c54 <_dtoa_r+0x2f4>
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	bfc4      	itt	gt
 8009b46:	3b04      	subgt	r3, #4
 8009b48:	9306      	strgt	r3, [sp, #24]
 8009b4a:	9b06      	ldr	r3, [sp, #24]
 8009b4c:	f1a3 0302 	sub.w	r3, r3, #2
 8009b50:	bfcc      	ite	gt
 8009b52:	2500      	movgt	r5, #0
 8009b54:	2501      	movle	r5, #1
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	f200 8087 	bhi.w	8009c6a <_dtoa_r+0x30a>
 8009b5c:	e8df f003 	tbb	[pc, r3]
 8009b60:	59383a2d 	.word	0x59383a2d
 8009b64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b68:	441d      	add	r5, r3
 8009b6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	bfc1      	itttt	gt
 8009b72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009b7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b82:	bfda      	itte	le
 8009b84:	f1c3 0320 	rsble	r3, r3, #32
 8009b88:	fa06 f003 	lslle.w	r0, r6, r3
 8009b8c:	4318      	orrgt	r0, r3
 8009b8e:	f7f6 fcc9 	bl	8000524 <__aeabi_ui2d>
 8009b92:	2301      	movs	r3, #1
 8009b94:	4606      	mov	r6, r0
 8009b96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b9a:	3d01      	subs	r5, #1
 8009b9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b9e:	e76a      	b.n	8009a76 <_dtoa_r+0x116>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7b2      	b.n	8009b0a <_dtoa_r+0x1aa>
 8009ba4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ba6:	e7b1      	b.n	8009b0c <_dtoa_r+0x1ac>
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	9a00      	ldr	r2, [sp, #0]
 8009bac:	1a9b      	subs	r3, r3, r2
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	4253      	negs	r3, r2
 8009bb2:	9307      	str	r3, [sp, #28]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb8:	e7bf      	b.n	8009b3a <_dtoa_r+0x1da>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9308      	str	r3, [sp, #32]
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dc55      	bgt.n	8009c70 <_dtoa_r+0x310>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bce:	e00c      	b.n	8009bea <_dtoa_r+0x28a>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e7f3      	b.n	8009bbc <_dtoa_r+0x25c>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd8:	9308      	str	r3, [sp, #32]
 8009bda:	9b00      	ldr	r3, [sp, #0]
 8009bdc:	4413      	add	r3, r2
 8009bde:	9302      	str	r3, [sp, #8]
 8009be0:	3301      	adds	r3, #1
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	bfb8      	it	lt
 8009be8:	2301      	movlt	r3, #1
 8009bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009bec:	2200      	movs	r2, #0
 8009bee:	6042      	str	r2, [r0, #4]
 8009bf0:	2204      	movs	r2, #4
 8009bf2:	f102 0614 	add.w	r6, r2, #20
 8009bf6:	429e      	cmp	r6, r3
 8009bf8:	6841      	ldr	r1, [r0, #4]
 8009bfa:	d93d      	bls.n	8009c78 <_dtoa_r+0x318>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f001 f839 	bl	800ac74 <_Balloc>
 8009c02:	9001      	str	r0, [sp, #4]
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d13b      	bne.n	8009c80 <_dtoa_r+0x320>
 8009c08:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <_dtoa_r+0x2f0>)
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c10:	e6c0      	b.n	8009994 <_dtoa_r+0x34>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e7df      	b.n	8009bd6 <_dtoa_r+0x276>
 8009c16:	bf00      	nop
 8009c18:	636f4361 	.word	0x636f4361
 8009c1c:	3fd287a7 	.word	0x3fd287a7
 8009c20:	8b60c8b3 	.word	0x8b60c8b3
 8009c24:	3fc68a28 	.word	0x3fc68a28
 8009c28:	509f79fb 	.word	0x509f79fb
 8009c2c:	3fd34413 	.word	0x3fd34413
 8009c30:	0800cd5d 	.word	0x0800cd5d
 8009c34:	0800cd74 	.word	0x0800cd74
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	0800cd59 	.word	0x0800cd59
 8009c40:	0800cd50 	.word	0x0800cd50
 8009c44:	0800ccd5 	.word	0x0800ccd5
 8009c48:	3ff80000 	.word	0x3ff80000
 8009c4c:	0800cee0 	.word	0x0800cee0
 8009c50:	0800cdcf 	.word	0x0800cdcf
 8009c54:	2501      	movs	r5, #1
 8009c56:	2300      	movs	r3, #0
 8009c58:	9306      	str	r3, [sp, #24]
 8009c5a:	9508      	str	r5, [sp, #32]
 8009c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c64:	2200      	movs	r2, #0
 8009c66:	2312      	movs	r3, #18
 8009c68:	e7b0      	b.n	8009bcc <_dtoa_r+0x26c>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	9308      	str	r3, [sp, #32]
 8009c6e:	e7f5      	b.n	8009c5c <_dtoa_r+0x2fc>
 8009c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c76:	e7b8      	b.n	8009bea <_dtoa_r+0x28a>
 8009c78:	3101      	adds	r1, #1
 8009c7a:	6041      	str	r1, [r0, #4]
 8009c7c:	0052      	lsls	r2, r2, #1
 8009c7e:	e7b8      	b.n	8009bf2 <_dtoa_r+0x292>
 8009c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c82:	9a01      	ldr	r2, [sp, #4]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	9b03      	ldr	r3, [sp, #12]
 8009c88:	2b0e      	cmp	r3, #14
 8009c8a:	f200 809d 	bhi.w	8009dc8 <_dtoa_r+0x468>
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	f000 809a 	beq.w	8009dc8 <_dtoa_r+0x468>
 8009c94:	9b00      	ldr	r3, [sp, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dd32      	ble.n	8009d00 <_dtoa_r+0x3a0>
 8009c9a:	4ab7      	ldr	r2, [pc, #732]	; (8009f78 <_dtoa_r+0x618>)
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ca8:	9b00      	ldr	r3, [sp, #0]
 8009caa:	05d8      	lsls	r0, r3, #23
 8009cac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009cb0:	d516      	bpl.n	8009ce0 <_dtoa_r+0x380>
 8009cb2:	4bb2      	ldr	r3, [pc, #712]	; (8009f7c <_dtoa_r+0x61c>)
 8009cb4:	ec51 0b19 	vmov	r0, r1, d9
 8009cb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cbc:	f7f6 fdd6 	bl	800086c <__aeabi_ddiv>
 8009cc0:	f007 070f 	and.w	r7, r7, #15
 8009cc4:	4682      	mov	sl, r0
 8009cc6:	468b      	mov	fp, r1
 8009cc8:	2503      	movs	r5, #3
 8009cca:	4eac      	ldr	r6, [pc, #688]	; (8009f7c <_dtoa_r+0x61c>)
 8009ccc:	b957      	cbnz	r7, 8009ce4 <_dtoa_r+0x384>
 8009cce:	4642      	mov	r2, r8
 8009cd0:	464b      	mov	r3, r9
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	f7f6 fdc9 	bl	800086c <__aeabi_ddiv>
 8009cda:	4682      	mov	sl, r0
 8009cdc:	468b      	mov	fp, r1
 8009cde:	e028      	b.n	8009d32 <_dtoa_r+0x3d2>
 8009ce0:	2502      	movs	r5, #2
 8009ce2:	e7f2      	b.n	8009cca <_dtoa_r+0x36a>
 8009ce4:	07f9      	lsls	r1, r7, #31
 8009ce6:	d508      	bpl.n	8009cfa <_dtoa_r+0x39a>
 8009ce8:	4640      	mov	r0, r8
 8009cea:	4649      	mov	r1, r9
 8009cec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cf0:	f7f6 fc92 	bl	8000618 <__aeabi_dmul>
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	4680      	mov	r8, r0
 8009cf8:	4689      	mov	r9, r1
 8009cfa:	107f      	asrs	r7, r7, #1
 8009cfc:	3608      	adds	r6, #8
 8009cfe:	e7e5      	b.n	8009ccc <_dtoa_r+0x36c>
 8009d00:	f000 809b 	beq.w	8009e3a <_dtoa_r+0x4da>
 8009d04:	9b00      	ldr	r3, [sp, #0]
 8009d06:	4f9d      	ldr	r7, [pc, #628]	; (8009f7c <_dtoa_r+0x61c>)
 8009d08:	425e      	negs	r6, r3
 8009d0a:	4b9b      	ldr	r3, [pc, #620]	; (8009f78 <_dtoa_r+0x618>)
 8009d0c:	f006 020f 	and.w	r2, r6, #15
 8009d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	ec51 0b19 	vmov	r0, r1, d9
 8009d1c:	f7f6 fc7c 	bl	8000618 <__aeabi_dmul>
 8009d20:	1136      	asrs	r6, r6, #4
 8009d22:	4682      	mov	sl, r0
 8009d24:	468b      	mov	fp, r1
 8009d26:	2300      	movs	r3, #0
 8009d28:	2502      	movs	r5, #2
 8009d2a:	2e00      	cmp	r6, #0
 8009d2c:	d17a      	bne.n	8009e24 <_dtoa_r+0x4c4>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1d3      	bne.n	8009cda <_dtoa_r+0x37a>
 8009d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8082 	beq.w	8009e3e <_dtoa_r+0x4de>
 8009d3a:	4b91      	ldr	r3, [pc, #580]	; (8009f80 <_dtoa_r+0x620>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4650      	mov	r0, sl
 8009d40:	4659      	mov	r1, fp
 8009d42:	f7f6 fedb 	bl	8000afc <__aeabi_dcmplt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d079      	beq.n	8009e3e <_dtoa_r+0x4de>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d076      	beq.n	8009e3e <_dtoa_r+0x4de>
 8009d50:	9b02      	ldr	r3, [sp, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd36      	ble.n	8009dc4 <_dtoa_r+0x464>
 8009d56:	9b00      	ldr	r3, [sp, #0]
 8009d58:	4650      	mov	r0, sl
 8009d5a:	4659      	mov	r1, fp
 8009d5c:	1e5f      	subs	r7, r3, #1
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4b88      	ldr	r3, [pc, #544]	; (8009f84 <_dtoa_r+0x624>)
 8009d62:	f7f6 fc59 	bl	8000618 <__aeabi_dmul>
 8009d66:	9e02      	ldr	r6, [sp, #8]
 8009d68:	4682      	mov	sl, r0
 8009d6a:	468b      	mov	fp, r1
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f7f6 fbe8 	bl	8000544 <__aeabi_i2d>
 8009d74:	4652      	mov	r2, sl
 8009d76:	465b      	mov	r3, fp
 8009d78:	f7f6 fc4e 	bl	8000618 <__aeabi_dmul>
 8009d7c:	4b82      	ldr	r3, [pc, #520]	; (8009f88 <_dtoa_r+0x628>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f7f6 fa94 	bl	80002ac <__adddf3>
 8009d84:	46d0      	mov	r8, sl
 8009d86:	46d9      	mov	r9, fp
 8009d88:	4682      	mov	sl, r0
 8009d8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	d158      	bne.n	8009e44 <_dtoa_r+0x4e4>
 8009d92:	4b7e      	ldr	r3, [pc, #504]	; (8009f8c <_dtoa_r+0x62c>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	4640      	mov	r0, r8
 8009d98:	4649      	mov	r1, r9
 8009d9a:	f7f6 fa85 	bl	80002a8 <__aeabi_dsub>
 8009d9e:	4652      	mov	r2, sl
 8009da0:	465b      	mov	r3, fp
 8009da2:	4680      	mov	r8, r0
 8009da4:	4689      	mov	r9, r1
 8009da6:	f7f6 fec7 	bl	8000b38 <__aeabi_dcmpgt>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f040 8295 	bne.w	800a2da <_dtoa_r+0x97a>
 8009db0:	4652      	mov	r2, sl
 8009db2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	f7f6 fe9f 	bl	8000afc <__aeabi_dcmplt>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f040 8289 	bne.w	800a2d6 <_dtoa_r+0x976>
 8009dc4:	ec5b ab19 	vmov	sl, fp, d9
 8009dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f2c0 8148 	blt.w	800a060 <_dtoa_r+0x700>
 8009dd0:	9a00      	ldr	r2, [sp, #0]
 8009dd2:	2a0e      	cmp	r2, #14
 8009dd4:	f300 8144 	bgt.w	800a060 <_dtoa_r+0x700>
 8009dd8:	4b67      	ldr	r3, [pc, #412]	; (8009f78 <_dtoa_r+0x618>)
 8009dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f280 80d5 	bge.w	8009f94 <_dtoa_r+0x634>
 8009dea:	9b03      	ldr	r3, [sp, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f300 80d1 	bgt.w	8009f94 <_dtoa_r+0x634>
 8009df2:	f040 826f 	bne.w	800a2d4 <_dtoa_r+0x974>
 8009df6:	4b65      	ldr	r3, [pc, #404]	; (8009f8c <_dtoa_r+0x62c>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	f7f6 fc0b 	bl	8000618 <__aeabi_dmul>
 8009e02:	4652      	mov	r2, sl
 8009e04:	465b      	mov	r3, fp
 8009e06:	f7f6 fe8d 	bl	8000b24 <__aeabi_dcmpge>
 8009e0a:	9e03      	ldr	r6, [sp, #12]
 8009e0c:	4637      	mov	r7, r6
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f040 8245 	bne.w	800a29e <_dtoa_r+0x93e>
 8009e14:	9d01      	ldr	r5, [sp, #4]
 8009e16:	2331      	movs	r3, #49	; 0x31
 8009e18:	f805 3b01 	strb.w	r3, [r5], #1
 8009e1c:	9b00      	ldr	r3, [sp, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	e240      	b.n	800a2a6 <_dtoa_r+0x946>
 8009e24:	07f2      	lsls	r2, r6, #31
 8009e26:	d505      	bpl.n	8009e34 <_dtoa_r+0x4d4>
 8009e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e2c:	f7f6 fbf4 	bl	8000618 <__aeabi_dmul>
 8009e30:	3501      	adds	r5, #1
 8009e32:	2301      	movs	r3, #1
 8009e34:	1076      	asrs	r6, r6, #1
 8009e36:	3708      	adds	r7, #8
 8009e38:	e777      	b.n	8009d2a <_dtoa_r+0x3ca>
 8009e3a:	2502      	movs	r5, #2
 8009e3c:	e779      	b.n	8009d32 <_dtoa_r+0x3d2>
 8009e3e:	9f00      	ldr	r7, [sp, #0]
 8009e40:	9e03      	ldr	r6, [sp, #12]
 8009e42:	e794      	b.n	8009d6e <_dtoa_r+0x40e>
 8009e44:	9901      	ldr	r1, [sp, #4]
 8009e46:	4b4c      	ldr	r3, [pc, #304]	; (8009f78 <_dtoa_r+0x618>)
 8009e48:	4431      	add	r1, r6
 8009e4a:	910d      	str	r1, [sp, #52]	; 0x34
 8009e4c:	9908      	ldr	r1, [sp, #32]
 8009e4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e56:	2900      	cmp	r1, #0
 8009e58:	d043      	beq.n	8009ee2 <_dtoa_r+0x582>
 8009e5a:	494d      	ldr	r1, [pc, #308]	; (8009f90 <_dtoa_r+0x630>)
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	f7f6 fd05 	bl	800086c <__aeabi_ddiv>
 8009e62:	4652      	mov	r2, sl
 8009e64:	465b      	mov	r3, fp
 8009e66:	f7f6 fa1f 	bl	80002a8 <__aeabi_dsub>
 8009e6a:	9d01      	ldr	r5, [sp, #4]
 8009e6c:	4682      	mov	sl, r0
 8009e6e:	468b      	mov	fp, r1
 8009e70:	4649      	mov	r1, r9
 8009e72:	4640      	mov	r0, r8
 8009e74:	f7f6 fe80 	bl	8000b78 <__aeabi_d2iz>
 8009e78:	4606      	mov	r6, r0
 8009e7a:	f7f6 fb63 	bl	8000544 <__aeabi_i2d>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4640      	mov	r0, r8
 8009e84:	4649      	mov	r1, r9
 8009e86:	f7f6 fa0f 	bl	80002a8 <__aeabi_dsub>
 8009e8a:	3630      	adds	r6, #48	; 0x30
 8009e8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009e90:	4652      	mov	r2, sl
 8009e92:	465b      	mov	r3, fp
 8009e94:	4680      	mov	r8, r0
 8009e96:	4689      	mov	r9, r1
 8009e98:	f7f6 fe30 	bl	8000afc <__aeabi_dcmplt>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d163      	bne.n	8009f68 <_dtoa_r+0x608>
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	4936      	ldr	r1, [pc, #216]	; (8009f80 <_dtoa_r+0x620>)
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	f7f6 f9fe 	bl	80002a8 <__aeabi_dsub>
 8009eac:	4652      	mov	r2, sl
 8009eae:	465b      	mov	r3, fp
 8009eb0:	f7f6 fe24 	bl	8000afc <__aeabi_dcmplt>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f040 80b5 	bne.w	800a024 <_dtoa_r+0x6c4>
 8009eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ebc:	429d      	cmp	r5, r3
 8009ebe:	d081      	beq.n	8009dc4 <_dtoa_r+0x464>
 8009ec0:	4b30      	ldr	r3, [pc, #192]	; (8009f84 <_dtoa_r+0x624>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	4659      	mov	r1, fp
 8009ec8:	f7f6 fba6 	bl	8000618 <__aeabi_dmul>
 8009ecc:	4b2d      	ldr	r3, [pc, #180]	; (8009f84 <_dtoa_r+0x624>)
 8009ece:	4682      	mov	sl, r0
 8009ed0:	468b      	mov	fp, r1
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f7f6 fb9e 	bl	8000618 <__aeabi_dmul>
 8009edc:	4680      	mov	r8, r0
 8009ede:	4689      	mov	r9, r1
 8009ee0:	e7c6      	b.n	8009e70 <_dtoa_r+0x510>
 8009ee2:	4650      	mov	r0, sl
 8009ee4:	4659      	mov	r1, fp
 8009ee6:	f7f6 fb97 	bl	8000618 <__aeabi_dmul>
 8009eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eec:	9d01      	ldr	r5, [sp, #4]
 8009eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	468b      	mov	fp, r1
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	f7f6 fe3e 	bl	8000b78 <__aeabi_d2iz>
 8009efc:	4606      	mov	r6, r0
 8009efe:	f7f6 fb21 	bl	8000544 <__aeabi_i2d>
 8009f02:	3630      	adds	r6, #48	; 0x30
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 f9cc 	bl	80002a8 <__aeabi_dsub>
 8009f10:	f805 6b01 	strb.w	r6, [r5], #1
 8009f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f16:	429d      	cmp	r5, r3
 8009f18:	4680      	mov	r8, r0
 8009f1a:	4689      	mov	r9, r1
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	d124      	bne.n	8009f6c <_dtoa_r+0x60c>
 8009f22:	4b1b      	ldr	r3, [pc, #108]	; (8009f90 <_dtoa_r+0x630>)
 8009f24:	4650      	mov	r0, sl
 8009f26:	4659      	mov	r1, fp
 8009f28:	f7f6 f9c0 	bl	80002ac <__adddf3>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4640      	mov	r0, r8
 8009f32:	4649      	mov	r1, r9
 8009f34:	f7f6 fe00 	bl	8000b38 <__aeabi_dcmpgt>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d173      	bne.n	800a024 <_dtoa_r+0x6c4>
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	465b      	mov	r3, fp
 8009f40:	4913      	ldr	r1, [pc, #76]	; (8009f90 <_dtoa_r+0x630>)
 8009f42:	2000      	movs	r0, #0
 8009f44:	f7f6 f9b0 	bl	80002a8 <__aeabi_dsub>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7f6 fdd4 	bl	8000afc <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f43f af35 	beq.w	8009dc4 <_dtoa_r+0x464>
 8009f5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f5c:	1e6b      	subs	r3, r5, #1
 8009f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f64:	2b30      	cmp	r3, #48	; 0x30
 8009f66:	d0f8      	beq.n	8009f5a <_dtoa_r+0x5fa>
 8009f68:	9700      	str	r7, [sp, #0]
 8009f6a:	e049      	b.n	800a000 <_dtoa_r+0x6a0>
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <_dtoa_r+0x624>)
 8009f6e:	f7f6 fb53 	bl	8000618 <__aeabi_dmul>
 8009f72:	4680      	mov	r8, r0
 8009f74:	4689      	mov	r9, r1
 8009f76:	e7bd      	b.n	8009ef4 <_dtoa_r+0x594>
 8009f78:	0800cee0 	.word	0x0800cee0
 8009f7c:	0800ceb8 	.word	0x0800ceb8
 8009f80:	3ff00000 	.word	0x3ff00000
 8009f84:	40240000 	.word	0x40240000
 8009f88:	401c0000 	.word	0x401c0000
 8009f8c:	40140000 	.word	0x40140000
 8009f90:	3fe00000 	.word	0x3fe00000
 8009f94:	9d01      	ldr	r5, [sp, #4]
 8009f96:	4656      	mov	r6, sl
 8009f98:	465f      	mov	r7, fp
 8009f9a:	4642      	mov	r2, r8
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	f7f6 fc63 	bl	800086c <__aeabi_ddiv>
 8009fa6:	f7f6 fde7 	bl	8000b78 <__aeabi_d2iz>
 8009faa:	4682      	mov	sl, r0
 8009fac:	f7f6 faca 	bl	8000544 <__aeabi_i2d>
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	f7f6 fb30 	bl	8000618 <__aeabi_dmul>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009fc4:	f7f6 f970 	bl	80002a8 <__aeabi_dsub>
 8009fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8009fcc:	9e01      	ldr	r6, [sp, #4]
 8009fce:	9f03      	ldr	r7, [sp, #12]
 8009fd0:	1bae      	subs	r6, r5, r6
 8009fd2:	42b7      	cmp	r7, r6
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	d135      	bne.n	800a046 <_dtoa_r+0x6e6>
 8009fda:	f7f6 f967 	bl	80002ac <__adddf3>
 8009fde:	4642      	mov	r2, r8
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460f      	mov	r7, r1
 8009fe6:	f7f6 fda7 	bl	8000b38 <__aeabi_dcmpgt>
 8009fea:	b9d0      	cbnz	r0, 800a022 <_dtoa_r+0x6c2>
 8009fec:	4642      	mov	r2, r8
 8009fee:	464b      	mov	r3, r9
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 fd78 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ff8:	b110      	cbz	r0, 800a000 <_dtoa_r+0x6a0>
 8009ffa:	f01a 0f01 	tst.w	sl, #1
 8009ffe:	d110      	bne.n	800a022 <_dtoa_r+0x6c2>
 800a000:	4620      	mov	r0, r4
 800a002:	ee18 1a10 	vmov	r1, s16
 800a006:	f000 fe75 	bl	800acf4 <_Bfree>
 800a00a:	2300      	movs	r3, #0
 800a00c:	9800      	ldr	r0, [sp, #0]
 800a00e:	702b      	strb	r3, [r5, #0]
 800a010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a012:	3001      	adds	r0, #1
 800a014:	6018      	str	r0, [r3, #0]
 800a016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f43f acf1 	beq.w	8009a00 <_dtoa_r+0xa0>
 800a01e:	601d      	str	r5, [r3, #0]
 800a020:	e4ee      	b.n	8009a00 <_dtoa_r+0xa0>
 800a022:	9f00      	ldr	r7, [sp, #0]
 800a024:	462b      	mov	r3, r5
 800a026:	461d      	mov	r5, r3
 800a028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a02c:	2a39      	cmp	r2, #57	; 0x39
 800a02e:	d106      	bne.n	800a03e <_dtoa_r+0x6de>
 800a030:	9a01      	ldr	r2, [sp, #4]
 800a032:	429a      	cmp	r2, r3
 800a034:	d1f7      	bne.n	800a026 <_dtoa_r+0x6c6>
 800a036:	9901      	ldr	r1, [sp, #4]
 800a038:	2230      	movs	r2, #48	; 0x30
 800a03a:	3701      	adds	r7, #1
 800a03c:	700a      	strb	r2, [r1, #0]
 800a03e:	781a      	ldrb	r2, [r3, #0]
 800a040:	3201      	adds	r2, #1
 800a042:	701a      	strb	r2, [r3, #0]
 800a044:	e790      	b.n	8009f68 <_dtoa_r+0x608>
 800a046:	4ba6      	ldr	r3, [pc, #664]	; (800a2e0 <_dtoa_r+0x980>)
 800a048:	2200      	movs	r2, #0
 800a04a:	f7f6 fae5 	bl	8000618 <__aeabi_dmul>
 800a04e:	2200      	movs	r2, #0
 800a050:	2300      	movs	r3, #0
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	f7f6 fd47 	bl	8000ae8 <__aeabi_dcmpeq>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d09d      	beq.n	8009f9a <_dtoa_r+0x63a>
 800a05e:	e7cf      	b.n	800a000 <_dtoa_r+0x6a0>
 800a060:	9a08      	ldr	r2, [sp, #32]
 800a062:	2a00      	cmp	r2, #0
 800a064:	f000 80d7 	beq.w	800a216 <_dtoa_r+0x8b6>
 800a068:	9a06      	ldr	r2, [sp, #24]
 800a06a:	2a01      	cmp	r2, #1
 800a06c:	f300 80ba 	bgt.w	800a1e4 <_dtoa_r+0x884>
 800a070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a072:	2a00      	cmp	r2, #0
 800a074:	f000 80b2 	beq.w	800a1dc <_dtoa_r+0x87c>
 800a078:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a07c:	9e07      	ldr	r6, [sp, #28]
 800a07e:	9d04      	ldr	r5, [sp, #16]
 800a080:	9a04      	ldr	r2, [sp, #16]
 800a082:	441a      	add	r2, r3
 800a084:	9204      	str	r2, [sp, #16]
 800a086:	9a05      	ldr	r2, [sp, #20]
 800a088:	2101      	movs	r1, #1
 800a08a:	441a      	add	r2, r3
 800a08c:	4620      	mov	r0, r4
 800a08e:	9205      	str	r2, [sp, #20]
 800a090:	f000 ff32 	bl	800aef8 <__i2b>
 800a094:	4607      	mov	r7, r0
 800a096:	2d00      	cmp	r5, #0
 800a098:	dd0c      	ble.n	800a0b4 <_dtoa_r+0x754>
 800a09a:	9b05      	ldr	r3, [sp, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dd09      	ble.n	800a0b4 <_dtoa_r+0x754>
 800a0a0:	42ab      	cmp	r3, r5
 800a0a2:	9a04      	ldr	r2, [sp, #16]
 800a0a4:	bfa8      	it	ge
 800a0a6:	462b      	movge	r3, r5
 800a0a8:	1ad2      	subs	r2, r2, r3
 800a0aa:	9204      	str	r2, [sp, #16]
 800a0ac:	9a05      	ldr	r2, [sp, #20]
 800a0ae:	1aed      	subs	r5, r5, r3
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	b31b      	cbz	r3, 800a100 <_dtoa_r+0x7a0>
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 80af 	beq.w	800a21e <_dtoa_r+0x8be>
 800a0c0:	2e00      	cmp	r6, #0
 800a0c2:	dd13      	ble.n	800a0ec <_dtoa_r+0x78c>
 800a0c4:	4639      	mov	r1, r7
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 ffd5 	bl	800b078 <__pow5mult>
 800a0ce:	ee18 2a10 	vmov	r2, s16
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 ff24 	bl	800af24 <__multiply>
 800a0dc:	ee18 1a10 	vmov	r1, s16
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 fe06 	bl	800acf4 <_Bfree>
 800a0e8:	ee08 8a10 	vmov	s16, r8
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	1b9a      	subs	r2, r3, r6
 800a0f0:	d006      	beq.n	800a100 <_dtoa_r+0x7a0>
 800a0f2:	ee18 1a10 	vmov	r1, s16
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 ffbe 	bl	800b078 <__pow5mult>
 800a0fc:	ee08 0a10 	vmov	s16, r0
 800a100:	2101      	movs	r1, #1
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fef8 	bl	800aef8 <__i2b>
 800a108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	4606      	mov	r6, r0
 800a10e:	f340 8088 	ble.w	800a222 <_dtoa_r+0x8c2>
 800a112:	461a      	mov	r2, r3
 800a114:	4601      	mov	r1, r0
 800a116:	4620      	mov	r0, r4
 800a118:	f000 ffae 	bl	800b078 <__pow5mult>
 800a11c:	9b06      	ldr	r3, [sp, #24]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	4606      	mov	r6, r0
 800a122:	f340 8081 	ble.w	800a228 <_dtoa_r+0x8c8>
 800a126:	f04f 0800 	mov.w	r8, #0
 800a12a:	6933      	ldr	r3, [r6, #16]
 800a12c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a130:	6918      	ldr	r0, [r3, #16]
 800a132:	f000 fe91 	bl	800ae58 <__hi0bits>
 800a136:	f1c0 0020 	rsb	r0, r0, #32
 800a13a:	9b05      	ldr	r3, [sp, #20]
 800a13c:	4418      	add	r0, r3
 800a13e:	f010 001f 	ands.w	r0, r0, #31
 800a142:	f000 8092 	beq.w	800a26a <_dtoa_r+0x90a>
 800a146:	f1c0 0320 	rsb	r3, r0, #32
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	f340 808a 	ble.w	800a264 <_dtoa_r+0x904>
 800a150:	f1c0 001c 	rsb	r0, r0, #28
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	4403      	add	r3, r0
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	9b05      	ldr	r3, [sp, #20]
 800a15c:	4403      	add	r3, r0
 800a15e:	4405      	add	r5, r0
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	9b04      	ldr	r3, [sp, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd07      	ble.n	800a178 <_dtoa_r+0x818>
 800a168:	ee18 1a10 	vmov	r1, s16
 800a16c:	461a      	mov	r2, r3
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 ffdc 	bl	800b12c <__lshift>
 800a174:	ee08 0a10 	vmov	s16, r0
 800a178:	9b05      	ldr	r3, [sp, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	dd05      	ble.n	800a18a <_dtoa_r+0x82a>
 800a17e:	4631      	mov	r1, r6
 800a180:	461a      	mov	r2, r3
 800a182:	4620      	mov	r0, r4
 800a184:	f000 ffd2 	bl	800b12c <__lshift>
 800a188:	4606      	mov	r6, r0
 800a18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d06e      	beq.n	800a26e <_dtoa_r+0x90e>
 800a190:	ee18 0a10 	vmov	r0, s16
 800a194:	4631      	mov	r1, r6
 800a196:	f001 f839 	bl	800b20c <__mcmp>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	da67      	bge.n	800a26e <_dtoa_r+0x90e>
 800a19e:	9b00      	ldr	r3, [sp, #0]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	ee18 1a10 	vmov	r1, s16
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f000 fdc3 	bl	800ad38 <__multadd>
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	ee08 0a10 	vmov	s16, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 81b1 	beq.w	800a520 <_dtoa_r+0xbc0>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	220a      	movs	r2, #10
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fdb7 	bl	800ad38 <__multadd>
 800a1ca:	9b02      	ldr	r3, [sp, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	f300 808e 	bgt.w	800a2f0 <_dtoa_r+0x990>
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	dc51      	bgt.n	800a27e <_dtoa_r+0x91e>
 800a1da:	e089      	b.n	800a2f0 <_dtoa_r+0x990>
 800a1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1e2:	e74b      	b.n	800a07c <_dtoa_r+0x71c>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	1e5e      	subs	r6, r3, #1
 800a1e8:	9b07      	ldr	r3, [sp, #28]
 800a1ea:	42b3      	cmp	r3, r6
 800a1ec:	bfbf      	itttt	lt
 800a1ee:	9b07      	ldrlt	r3, [sp, #28]
 800a1f0:	9607      	strlt	r6, [sp, #28]
 800a1f2:	1af2      	sublt	r2, r6, r3
 800a1f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a1f6:	bfb6      	itet	lt
 800a1f8:	189b      	addlt	r3, r3, r2
 800a1fa:	1b9e      	subge	r6, r3, r6
 800a1fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	bfb8      	it	lt
 800a202:	2600      	movlt	r6, #0
 800a204:	2b00      	cmp	r3, #0
 800a206:	bfb7      	itett	lt
 800a208:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a20c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a210:	1a9d      	sublt	r5, r3, r2
 800a212:	2300      	movlt	r3, #0
 800a214:	e734      	b.n	800a080 <_dtoa_r+0x720>
 800a216:	9e07      	ldr	r6, [sp, #28]
 800a218:	9d04      	ldr	r5, [sp, #16]
 800a21a:	9f08      	ldr	r7, [sp, #32]
 800a21c:	e73b      	b.n	800a096 <_dtoa_r+0x736>
 800a21e:	9a07      	ldr	r2, [sp, #28]
 800a220:	e767      	b.n	800a0f2 <_dtoa_r+0x792>
 800a222:	9b06      	ldr	r3, [sp, #24]
 800a224:	2b01      	cmp	r3, #1
 800a226:	dc18      	bgt.n	800a25a <_dtoa_r+0x8fa>
 800a228:	f1ba 0f00 	cmp.w	sl, #0
 800a22c:	d115      	bne.n	800a25a <_dtoa_r+0x8fa>
 800a22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a232:	b993      	cbnz	r3, 800a25a <_dtoa_r+0x8fa>
 800a234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a238:	0d1b      	lsrs	r3, r3, #20
 800a23a:	051b      	lsls	r3, r3, #20
 800a23c:	b183      	cbz	r3, 800a260 <_dtoa_r+0x900>
 800a23e:	9b04      	ldr	r3, [sp, #16]
 800a240:	3301      	adds	r3, #1
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	9b05      	ldr	r3, [sp, #20]
 800a246:	3301      	adds	r3, #1
 800a248:	9305      	str	r3, [sp, #20]
 800a24a:	f04f 0801 	mov.w	r8, #1
 800a24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a250:	2b00      	cmp	r3, #0
 800a252:	f47f af6a 	bne.w	800a12a <_dtoa_r+0x7ca>
 800a256:	2001      	movs	r0, #1
 800a258:	e76f      	b.n	800a13a <_dtoa_r+0x7da>
 800a25a:	f04f 0800 	mov.w	r8, #0
 800a25e:	e7f6      	b.n	800a24e <_dtoa_r+0x8ee>
 800a260:	4698      	mov	r8, r3
 800a262:	e7f4      	b.n	800a24e <_dtoa_r+0x8ee>
 800a264:	f43f af7d 	beq.w	800a162 <_dtoa_r+0x802>
 800a268:	4618      	mov	r0, r3
 800a26a:	301c      	adds	r0, #28
 800a26c:	e772      	b.n	800a154 <_dtoa_r+0x7f4>
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	dc37      	bgt.n	800a2e4 <_dtoa_r+0x984>
 800a274:	9b06      	ldr	r3, [sp, #24]
 800a276:	2b02      	cmp	r3, #2
 800a278:	dd34      	ble.n	800a2e4 <_dtoa_r+0x984>
 800a27a:	9b03      	ldr	r3, [sp, #12]
 800a27c:	9302      	str	r3, [sp, #8]
 800a27e:	9b02      	ldr	r3, [sp, #8]
 800a280:	b96b      	cbnz	r3, 800a29e <_dtoa_r+0x93e>
 800a282:	4631      	mov	r1, r6
 800a284:	2205      	movs	r2, #5
 800a286:	4620      	mov	r0, r4
 800a288:	f000 fd56 	bl	800ad38 <__multadd>
 800a28c:	4601      	mov	r1, r0
 800a28e:	4606      	mov	r6, r0
 800a290:	ee18 0a10 	vmov	r0, s16
 800a294:	f000 ffba 	bl	800b20c <__mcmp>
 800a298:	2800      	cmp	r0, #0
 800a29a:	f73f adbb 	bgt.w	8009e14 <_dtoa_r+0x4b4>
 800a29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a0:	9d01      	ldr	r5, [sp, #4]
 800a2a2:	43db      	mvns	r3, r3
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	f04f 0800 	mov.w	r8, #0
 800a2aa:	4631      	mov	r1, r6
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fd21 	bl	800acf4 <_Bfree>
 800a2b2:	2f00      	cmp	r7, #0
 800a2b4:	f43f aea4 	beq.w	800a000 <_dtoa_r+0x6a0>
 800a2b8:	f1b8 0f00 	cmp.w	r8, #0
 800a2bc:	d005      	beq.n	800a2ca <_dtoa_r+0x96a>
 800a2be:	45b8      	cmp	r8, r7
 800a2c0:	d003      	beq.n	800a2ca <_dtoa_r+0x96a>
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 fd15 	bl	800acf4 <_Bfree>
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fd11 	bl	800acf4 <_Bfree>
 800a2d2:	e695      	b.n	800a000 <_dtoa_r+0x6a0>
 800a2d4:	2600      	movs	r6, #0
 800a2d6:	4637      	mov	r7, r6
 800a2d8:	e7e1      	b.n	800a29e <_dtoa_r+0x93e>
 800a2da:	9700      	str	r7, [sp, #0]
 800a2dc:	4637      	mov	r7, r6
 800a2de:	e599      	b.n	8009e14 <_dtoa_r+0x4b4>
 800a2e0:	40240000 	.word	0x40240000
 800a2e4:	9b08      	ldr	r3, [sp, #32]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 80ca 	beq.w	800a480 <_dtoa_r+0xb20>
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	9302      	str	r3, [sp, #8]
 800a2f0:	2d00      	cmp	r5, #0
 800a2f2:	dd05      	ble.n	800a300 <_dtoa_r+0x9a0>
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 ff17 	bl	800b12c <__lshift>
 800a2fe:	4607      	mov	r7, r0
 800a300:	f1b8 0f00 	cmp.w	r8, #0
 800a304:	d05b      	beq.n	800a3be <_dtoa_r+0xa5e>
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	4620      	mov	r0, r4
 800a30a:	f000 fcb3 	bl	800ac74 <_Balloc>
 800a30e:	4605      	mov	r5, r0
 800a310:	b928      	cbnz	r0, 800a31e <_dtoa_r+0x9be>
 800a312:	4b87      	ldr	r3, [pc, #540]	; (800a530 <_dtoa_r+0xbd0>)
 800a314:	4602      	mov	r2, r0
 800a316:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a31a:	f7ff bb3b 	b.w	8009994 <_dtoa_r+0x34>
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	3202      	adds	r2, #2
 800a322:	0092      	lsls	r2, r2, #2
 800a324:	f107 010c 	add.w	r1, r7, #12
 800a328:	300c      	adds	r0, #12
 800a32a:	f000 fc95 	bl	800ac58 <memcpy>
 800a32e:	2201      	movs	r2, #1
 800a330:	4629      	mov	r1, r5
 800a332:	4620      	mov	r0, r4
 800a334:	f000 fefa 	bl	800b12c <__lshift>
 800a338:	9b01      	ldr	r3, [sp, #4]
 800a33a:	f103 0901 	add.w	r9, r3, #1
 800a33e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a342:	4413      	add	r3, r2
 800a344:	9305      	str	r3, [sp, #20]
 800a346:	f00a 0301 	and.w	r3, sl, #1
 800a34a:	46b8      	mov	r8, r7
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	4607      	mov	r7, r0
 800a350:	4631      	mov	r1, r6
 800a352:	ee18 0a10 	vmov	r0, s16
 800a356:	f7ff fa75 	bl	8009844 <quorem>
 800a35a:	4641      	mov	r1, r8
 800a35c:	9002      	str	r0, [sp, #8]
 800a35e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a362:	ee18 0a10 	vmov	r0, s16
 800a366:	f000 ff51 	bl	800b20c <__mcmp>
 800a36a:	463a      	mov	r2, r7
 800a36c:	9003      	str	r0, [sp, #12]
 800a36e:	4631      	mov	r1, r6
 800a370:	4620      	mov	r0, r4
 800a372:	f000 ff67 	bl	800b244 <__mdiff>
 800a376:	68c2      	ldr	r2, [r0, #12]
 800a378:	f109 3bff 	add.w	fp, r9, #4294967295
 800a37c:	4605      	mov	r5, r0
 800a37e:	bb02      	cbnz	r2, 800a3c2 <_dtoa_r+0xa62>
 800a380:	4601      	mov	r1, r0
 800a382:	ee18 0a10 	vmov	r0, s16
 800a386:	f000 ff41 	bl	800b20c <__mcmp>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4629      	mov	r1, r5
 800a38e:	4620      	mov	r0, r4
 800a390:	9207      	str	r2, [sp, #28]
 800a392:	f000 fcaf 	bl	800acf4 <_Bfree>
 800a396:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a39a:	ea43 0102 	orr.w	r1, r3, r2
 800a39e:	9b04      	ldr	r3, [sp, #16]
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	464d      	mov	r5, r9
 800a3a4:	d10f      	bne.n	800a3c6 <_dtoa_r+0xa66>
 800a3a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3aa:	d02a      	beq.n	800a402 <_dtoa_r+0xaa2>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	dd02      	ble.n	800a3b8 <_dtoa_r+0xa58>
 800a3b2:	9b02      	ldr	r3, [sp, #8]
 800a3b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a3b8:	f88b a000 	strb.w	sl, [fp]
 800a3bc:	e775      	b.n	800a2aa <_dtoa_r+0x94a>
 800a3be:	4638      	mov	r0, r7
 800a3c0:	e7ba      	b.n	800a338 <_dtoa_r+0x9d8>
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	e7e2      	b.n	800a38c <_dtoa_r+0xa2c>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	db04      	blt.n	800a3d6 <_dtoa_r+0xa76>
 800a3cc:	9906      	ldr	r1, [sp, #24]
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	9904      	ldr	r1, [sp, #16]
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	d122      	bne.n	800a41c <_dtoa_r+0xabc>
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	ddee      	ble.n	800a3b8 <_dtoa_r+0xa58>
 800a3da:	ee18 1a10 	vmov	r1, s16
 800a3de:	2201      	movs	r2, #1
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f000 fea3 	bl	800b12c <__lshift>
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	ee08 0a10 	vmov	s16, r0
 800a3ec:	f000 ff0e 	bl	800b20c <__mcmp>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	dc03      	bgt.n	800a3fc <_dtoa_r+0xa9c>
 800a3f4:	d1e0      	bne.n	800a3b8 <_dtoa_r+0xa58>
 800a3f6:	f01a 0f01 	tst.w	sl, #1
 800a3fa:	d0dd      	beq.n	800a3b8 <_dtoa_r+0xa58>
 800a3fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a400:	d1d7      	bne.n	800a3b2 <_dtoa_r+0xa52>
 800a402:	2339      	movs	r3, #57	; 0x39
 800a404:	f88b 3000 	strb.w	r3, [fp]
 800a408:	462b      	mov	r3, r5
 800a40a:	461d      	mov	r5, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a412:	2a39      	cmp	r2, #57	; 0x39
 800a414:	d071      	beq.n	800a4fa <_dtoa_r+0xb9a>
 800a416:	3201      	adds	r2, #1
 800a418:	701a      	strb	r2, [r3, #0]
 800a41a:	e746      	b.n	800a2aa <_dtoa_r+0x94a>
 800a41c:	2a00      	cmp	r2, #0
 800a41e:	dd07      	ble.n	800a430 <_dtoa_r+0xad0>
 800a420:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a424:	d0ed      	beq.n	800a402 <_dtoa_r+0xaa2>
 800a426:	f10a 0301 	add.w	r3, sl, #1
 800a42a:	f88b 3000 	strb.w	r3, [fp]
 800a42e:	e73c      	b.n	800a2aa <_dtoa_r+0x94a>
 800a430:	9b05      	ldr	r3, [sp, #20]
 800a432:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a436:	4599      	cmp	r9, r3
 800a438:	d047      	beq.n	800a4ca <_dtoa_r+0xb6a>
 800a43a:	ee18 1a10 	vmov	r1, s16
 800a43e:	2300      	movs	r3, #0
 800a440:	220a      	movs	r2, #10
 800a442:	4620      	mov	r0, r4
 800a444:	f000 fc78 	bl	800ad38 <__multadd>
 800a448:	45b8      	cmp	r8, r7
 800a44a:	ee08 0a10 	vmov	s16, r0
 800a44e:	f04f 0300 	mov.w	r3, #0
 800a452:	f04f 020a 	mov.w	r2, #10
 800a456:	4641      	mov	r1, r8
 800a458:	4620      	mov	r0, r4
 800a45a:	d106      	bne.n	800a46a <_dtoa_r+0xb0a>
 800a45c:	f000 fc6c 	bl	800ad38 <__multadd>
 800a460:	4680      	mov	r8, r0
 800a462:	4607      	mov	r7, r0
 800a464:	f109 0901 	add.w	r9, r9, #1
 800a468:	e772      	b.n	800a350 <_dtoa_r+0x9f0>
 800a46a:	f000 fc65 	bl	800ad38 <__multadd>
 800a46e:	4639      	mov	r1, r7
 800a470:	4680      	mov	r8, r0
 800a472:	2300      	movs	r3, #0
 800a474:	220a      	movs	r2, #10
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fc5e 	bl	800ad38 <__multadd>
 800a47c:	4607      	mov	r7, r0
 800a47e:	e7f1      	b.n	800a464 <_dtoa_r+0xb04>
 800a480:	9b03      	ldr	r3, [sp, #12]
 800a482:	9302      	str	r3, [sp, #8]
 800a484:	9d01      	ldr	r5, [sp, #4]
 800a486:	ee18 0a10 	vmov	r0, s16
 800a48a:	4631      	mov	r1, r6
 800a48c:	f7ff f9da 	bl	8009844 <quorem>
 800a490:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a494:	9b01      	ldr	r3, [sp, #4]
 800a496:	f805 ab01 	strb.w	sl, [r5], #1
 800a49a:	1aea      	subs	r2, r5, r3
 800a49c:	9b02      	ldr	r3, [sp, #8]
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	dd09      	ble.n	800a4b6 <_dtoa_r+0xb56>
 800a4a2:	ee18 1a10 	vmov	r1, s16
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	220a      	movs	r2, #10
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 fc44 	bl	800ad38 <__multadd>
 800a4b0:	ee08 0a10 	vmov	s16, r0
 800a4b4:	e7e7      	b.n	800a486 <_dtoa_r+0xb26>
 800a4b6:	9b02      	ldr	r3, [sp, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bfc8      	it	gt
 800a4bc:	461d      	movgt	r5, r3
 800a4be:	9b01      	ldr	r3, [sp, #4]
 800a4c0:	bfd8      	it	le
 800a4c2:	2501      	movle	r5, #1
 800a4c4:	441d      	add	r5, r3
 800a4c6:	f04f 0800 	mov.w	r8, #0
 800a4ca:	ee18 1a10 	vmov	r1, s16
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 fe2b 	bl	800b12c <__lshift>
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	ee08 0a10 	vmov	s16, r0
 800a4dc:	f000 fe96 	bl	800b20c <__mcmp>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	dc91      	bgt.n	800a408 <_dtoa_r+0xaa8>
 800a4e4:	d102      	bne.n	800a4ec <_dtoa_r+0xb8c>
 800a4e6:	f01a 0f01 	tst.w	sl, #1
 800a4ea:	d18d      	bne.n	800a408 <_dtoa_r+0xaa8>
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	461d      	mov	r5, r3
 800a4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4f4:	2a30      	cmp	r2, #48	; 0x30
 800a4f6:	d0fa      	beq.n	800a4ee <_dtoa_r+0xb8e>
 800a4f8:	e6d7      	b.n	800a2aa <_dtoa_r+0x94a>
 800a4fa:	9a01      	ldr	r2, [sp, #4]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d184      	bne.n	800a40a <_dtoa_r+0xaaa>
 800a500:	9b00      	ldr	r3, [sp, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	2331      	movs	r3, #49	; 0x31
 800a508:	7013      	strb	r3, [r2, #0]
 800a50a:	e6ce      	b.n	800a2aa <_dtoa_r+0x94a>
 800a50c:	4b09      	ldr	r3, [pc, #36]	; (800a534 <_dtoa_r+0xbd4>)
 800a50e:	f7ff ba95 	b.w	8009a3c <_dtoa_r+0xdc>
 800a512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a514:	2b00      	cmp	r3, #0
 800a516:	f47f aa6e 	bne.w	80099f6 <_dtoa_r+0x96>
 800a51a:	4b07      	ldr	r3, [pc, #28]	; (800a538 <_dtoa_r+0xbd8>)
 800a51c:	f7ff ba8e 	b.w	8009a3c <_dtoa_r+0xdc>
 800a520:	9b02      	ldr	r3, [sp, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	dcae      	bgt.n	800a484 <_dtoa_r+0xb24>
 800a526:	9b06      	ldr	r3, [sp, #24]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	f73f aea8 	bgt.w	800a27e <_dtoa_r+0x91e>
 800a52e:	e7a9      	b.n	800a484 <_dtoa_r+0xb24>
 800a530:	0800cdcf 	.word	0x0800cdcf
 800a534:	0800ccd4 	.word	0x0800ccd4
 800a538:	0800cd50 	.word	0x0800cd50

0800a53c <rshift>:
 800a53c:	6903      	ldr	r3, [r0, #16]
 800a53e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a546:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a54a:	f100 0414 	add.w	r4, r0, #20
 800a54e:	dd45      	ble.n	800a5dc <rshift+0xa0>
 800a550:	f011 011f 	ands.w	r1, r1, #31
 800a554:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a558:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a55c:	d10c      	bne.n	800a578 <rshift+0x3c>
 800a55e:	f100 0710 	add.w	r7, r0, #16
 800a562:	4629      	mov	r1, r5
 800a564:	42b1      	cmp	r1, r6
 800a566:	d334      	bcc.n	800a5d2 <rshift+0x96>
 800a568:	1a9b      	subs	r3, r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	1eea      	subs	r2, r5, #3
 800a56e:	4296      	cmp	r6, r2
 800a570:	bf38      	it	cc
 800a572:	2300      	movcc	r3, #0
 800a574:	4423      	add	r3, r4
 800a576:	e015      	b.n	800a5a4 <rshift+0x68>
 800a578:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a57c:	f1c1 0820 	rsb	r8, r1, #32
 800a580:	40cf      	lsrs	r7, r1
 800a582:	f105 0e04 	add.w	lr, r5, #4
 800a586:	46a1      	mov	r9, r4
 800a588:	4576      	cmp	r6, lr
 800a58a:	46f4      	mov	ip, lr
 800a58c:	d815      	bhi.n	800a5ba <rshift+0x7e>
 800a58e:	1a9a      	subs	r2, r3, r2
 800a590:	0092      	lsls	r2, r2, #2
 800a592:	3a04      	subs	r2, #4
 800a594:	3501      	adds	r5, #1
 800a596:	42ae      	cmp	r6, r5
 800a598:	bf38      	it	cc
 800a59a:	2200      	movcc	r2, #0
 800a59c:	18a3      	adds	r3, r4, r2
 800a59e:	50a7      	str	r7, [r4, r2]
 800a5a0:	b107      	cbz	r7, 800a5a4 <rshift+0x68>
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	1b1a      	subs	r2, r3, r4
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5ac:	bf08      	it	eq
 800a5ae:	2300      	moveq	r3, #0
 800a5b0:	6102      	str	r2, [r0, #16]
 800a5b2:	bf08      	it	eq
 800a5b4:	6143      	streq	r3, [r0, #20]
 800a5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	f8dc c000 	ldr.w	ip, [ip]
 800a5be:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5c2:	ea4c 0707 	orr.w	r7, ip, r7
 800a5c6:	f849 7b04 	str.w	r7, [r9], #4
 800a5ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5ce:	40cf      	lsrs	r7, r1
 800a5d0:	e7da      	b.n	800a588 <rshift+0x4c>
 800a5d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5da:	e7c3      	b.n	800a564 <rshift+0x28>
 800a5dc:	4623      	mov	r3, r4
 800a5de:	e7e1      	b.n	800a5a4 <rshift+0x68>

0800a5e0 <__hexdig_fun>:
 800a5e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5e4:	2b09      	cmp	r3, #9
 800a5e6:	d802      	bhi.n	800a5ee <__hexdig_fun+0xe>
 800a5e8:	3820      	subs	r0, #32
 800a5ea:	b2c0      	uxtb	r0, r0
 800a5ec:	4770      	bx	lr
 800a5ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5f2:	2b05      	cmp	r3, #5
 800a5f4:	d801      	bhi.n	800a5fa <__hexdig_fun+0x1a>
 800a5f6:	3847      	subs	r0, #71	; 0x47
 800a5f8:	e7f7      	b.n	800a5ea <__hexdig_fun+0xa>
 800a5fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5fe:	2b05      	cmp	r3, #5
 800a600:	d801      	bhi.n	800a606 <__hexdig_fun+0x26>
 800a602:	3827      	subs	r0, #39	; 0x27
 800a604:	e7f1      	b.n	800a5ea <__hexdig_fun+0xa>
 800a606:	2000      	movs	r0, #0
 800a608:	4770      	bx	lr
	...

0800a60c <__gethex>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	ed2d 8b02 	vpush	{d8}
 800a614:	b089      	sub	sp, #36	; 0x24
 800a616:	ee08 0a10 	vmov	s16, r0
 800a61a:	9304      	str	r3, [sp, #16]
 800a61c:	4bb4      	ldr	r3, [pc, #720]	; (800a8f0 <__gethex+0x2e4>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	4618      	mov	r0, r3
 800a624:	468b      	mov	fp, r1
 800a626:	4690      	mov	r8, r2
 800a628:	f7f5 fddc 	bl	80001e4 <strlen>
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	f8db 2000 	ldr.w	r2, [fp]
 800a632:	4403      	add	r3, r0
 800a634:	4682      	mov	sl, r0
 800a636:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	1c93      	adds	r3, r2, #2
 800a63e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a642:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a646:	32fe      	adds	r2, #254	; 0xfe
 800a648:	18d1      	adds	r1, r2, r3
 800a64a:	461f      	mov	r7, r3
 800a64c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a650:	9100      	str	r1, [sp, #0]
 800a652:	2830      	cmp	r0, #48	; 0x30
 800a654:	d0f8      	beq.n	800a648 <__gethex+0x3c>
 800a656:	f7ff ffc3 	bl	800a5e0 <__hexdig_fun>
 800a65a:	4604      	mov	r4, r0
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d13a      	bne.n	800a6d6 <__gethex+0xca>
 800a660:	9901      	ldr	r1, [sp, #4]
 800a662:	4652      	mov	r2, sl
 800a664:	4638      	mov	r0, r7
 800a666:	f7fe fa20 	bl	8008aaa <strncmp>
 800a66a:	4605      	mov	r5, r0
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d168      	bne.n	800a742 <__gethex+0x136>
 800a670:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a674:	eb07 060a 	add.w	r6, r7, sl
 800a678:	f7ff ffb2 	bl	800a5e0 <__hexdig_fun>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d062      	beq.n	800a746 <__gethex+0x13a>
 800a680:	4633      	mov	r3, r6
 800a682:	7818      	ldrb	r0, [r3, #0]
 800a684:	2830      	cmp	r0, #48	; 0x30
 800a686:	461f      	mov	r7, r3
 800a688:	f103 0301 	add.w	r3, r3, #1
 800a68c:	d0f9      	beq.n	800a682 <__gethex+0x76>
 800a68e:	f7ff ffa7 	bl	800a5e0 <__hexdig_fun>
 800a692:	2301      	movs	r3, #1
 800a694:	fab0 f480 	clz	r4, r0
 800a698:	0964      	lsrs	r4, r4, #5
 800a69a:	4635      	mov	r5, r6
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	463a      	mov	r2, r7
 800a6a0:	4616      	mov	r6, r2
 800a6a2:	3201      	adds	r2, #1
 800a6a4:	7830      	ldrb	r0, [r6, #0]
 800a6a6:	f7ff ff9b 	bl	800a5e0 <__hexdig_fun>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d1f8      	bne.n	800a6a0 <__gethex+0x94>
 800a6ae:	9901      	ldr	r1, [sp, #4]
 800a6b0:	4652      	mov	r2, sl
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7fe f9f9 	bl	8008aaa <strncmp>
 800a6b8:	b980      	cbnz	r0, 800a6dc <__gethex+0xd0>
 800a6ba:	b94d      	cbnz	r5, 800a6d0 <__gethex+0xc4>
 800a6bc:	eb06 050a 	add.w	r5, r6, sl
 800a6c0:	462a      	mov	r2, r5
 800a6c2:	4616      	mov	r6, r2
 800a6c4:	3201      	adds	r2, #1
 800a6c6:	7830      	ldrb	r0, [r6, #0]
 800a6c8:	f7ff ff8a 	bl	800a5e0 <__hexdig_fun>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d1f8      	bne.n	800a6c2 <__gethex+0xb6>
 800a6d0:	1bad      	subs	r5, r5, r6
 800a6d2:	00ad      	lsls	r5, r5, #2
 800a6d4:	e004      	b.n	800a6e0 <__gethex+0xd4>
 800a6d6:	2400      	movs	r4, #0
 800a6d8:	4625      	mov	r5, r4
 800a6da:	e7e0      	b.n	800a69e <__gethex+0x92>
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	d1f7      	bne.n	800a6d0 <__gethex+0xc4>
 800a6e0:	7833      	ldrb	r3, [r6, #0]
 800a6e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6e6:	2b50      	cmp	r3, #80	; 0x50
 800a6e8:	d13b      	bne.n	800a762 <__gethex+0x156>
 800a6ea:	7873      	ldrb	r3, [r6, #1]
 800a6ec:	2b2b      	cmp	r3, #43	; 0x2b
 800a6ee:	d02c      	beq.n	800a74a <__gethex+0x13e>
 800a6f0:	2b2d      	cmp	r3, #45	; 0x2d
 800a6f2:	d02e      	beq.n	800a752 <__gethex+0x146>
 800a6f4:	1c71      	adds	r1, r6, #1
 800a6f6:	f04f 0900 	mov.w	r9, #0
 800a6fa:	7808      	ldrb	r0, [r1, #0]
 800a6fc:	f7ff ff70 	bl	800a5e0 <__hexdig_fun>
 800a700:	1e43      	subs	r3, r0, #1
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b18      	cmp	r3, #24
 800a706:	d82c      	bhi.n	800a762 <__gethex+0x156>
 800a708:	f1a0 0210 	sub.w	r2, r0, #16
 800a70c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a710:	f7ff ff66 	bl	800a5e0 <__hexdig_fun>
 800a714:	1e43      	subs	r3, r0, #1
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b18      	cmp	r3, #24
 800a71a:	d91d      	bls.n	800a758 <__gethex+0x14c>
 800a71c:	f1b9 0f00 	cmp.w	r9, #0
 800a720:	d000      	beq.n	800a724 <__gethex+0x118>
 800a722:	4252      	negs	r2, r2
 800a724:	4415      	add	r5, r2
 800a726:	f8cb 1000 	str.w	r1, [fp]
 800a72a:	b1e4      	cbz	r4, 800a766 <__gethex+0x15a>
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bf14      	ite	ne
 800a732:	2700      	movne	r7, #0
 800a734:	2706      	moveq	r7, #6
 800a736:	4638      	mov	r0, r7
 800a738:	b009      	add	sp, #36	; 0x24
 800a73a:	ecbd 8b02 	vpop	{d8}
 800a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a742:	463e      	mov	r6, r7
 800a744:	4625      	mov	r5, r4
 800a746:	2401      	movs	r4, #1
 800a748:	e7ca      	b.n	800a6e0 <__gethex+0xd4>
 800a74a:	f04f 0900 	mov.w	r9, #0
 800a74e:	1cb1      	adds	r1, r6, #2
 800a750:	e7d3      	b.n	800a6fa <__gethex+0xee>
 800a752:	f04f 0901 	mov.w	r9, #1
 800a756:	e7fa      	b.n	800a74e <__gethex+0x142>
 800a758:	230a      	movs	r3, #10
 800a75a:	fb03 0202 	mla	r2, r3, r2, r0
 800a75e:	3a10      	subs	r2, #16
 800a760:	e7d4      	b.n	800a70c <__gethex+0x100>
 800a762:	4631      	mov	r1, r6
 800a764:	e7df      	b.n	800a726 <__gethex+0x11a>
 800a766:	1bf3      	subs	r3, r6, r7
 800a768:	3b01      	subs	r3, #1
 800a76a:	4621      	mov	r1, r4
 800a76c:	2b07      	cmp	r3, #7
 800a76e:	dc0b      	bgt.n	800a788 <__gethex+0x17c>
 800a770:	ee18 0a10 	vmov	r0, s16
 800a774:	f000 fa7e 	bl	800ac74 <_Balloc>
 800a778:	4604      	mov	r4, r0
 800a77a:	b940      	cbnz	r0, 800a78e <__gethex+0x182>
 800a77c:	4b5d      	ldr	r3, [pc, #372]	; (800a8f4 <__gethex+0x2e8>)
 800a77e:	4602      	mov	r2, r0
 800a780:	21de      	movs	r1, #222	; 0xde
 800a782:	485d      	ldr	r0, [pc, #372]	; (800a8f8 <__gethex+0x2ec>)
 800a784:	f001 f9b2 	bl	800baec <__assert_func>
 800a788:	3101      	adds	r1, #1
 800a78a:	105b      	asrs	r3, r3, #1
 800a78c:	e7ee      	b.n	800a76c <__gethex+0x160>
 800a78e:	f100 0914 	add.w	r9, r0, #20
 800a792:	f04f 0b00 	mov.w	fp, #0
 800a796:	f1ca 0301 	rsb	r3, sl, #1
 800a79a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a79e:	f8cd b000 	str.w	fp, [sp]
 800a7a2:	9306      	str	r3, [sp, #24]
 800a7a4:	42b7      	cmp	r7, r6
 800a7a6:	d340      	bcc.n	800a82a <__gethex+0x21e>
 800a7a8:	9802      	ldr	r0, [sp, #8]
 800a7aa:	9b00      	ldr	r3, [sp, #0]
 800a7ac:	f840 3b04 	str.w	r3, [r0], #4
 800a7b0:	eba0 0009 	sub.w	r0, r0, r9
 800a7b4:	1080      	asrs	r0, r0, #2
 800a7b6:	0146      	lsls	r6, r0, #5
 800a7b8:	6120      	str	r0, [r4, #16]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fb4c 	bl	800ae58 <__hi0bits>
 800a7c0:	1a30      	subs	r0, r6, r0
 800a7c2:	f8d8 6000 	ldr.w	r6, [r8]
 800a7c6:	42b0      	cmp	r0, r6
 800a7c8:	dd63      	ble.n	800a892 <__gethex+0x286>
 800a7ca:	1b87      	subs	r7, r0, r6
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fef0 	bl	800b5b4 <__any_on>
 800a7d4:	4682      	mov	sl, r0
 800a7d6:	b1a8      	cbz	r0, 800a804 <__gethex+0x1f8>
 800a7d8:	1e7b      	subs	r3, r7, #1
 800a7da:	1159      	asrs	r1, r3, #5
 800a7dc:	f003 021f 	and.w	r2, r3, #31
 800a7e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a7e4:	f04f 0a01 	mov.w	sl, #1
 800a7e8:	fa0a f202 	lsl.w	r2, sl, r2
 800a7ec:	420a      	tst	r2, r1
 800a7ee:	d009      	beq.n	800a804 <__gethex+0x1f8>
 800a7f0:	4553      	cmp	r3, sl
 800a7f2:	dd05      	ble.n	800a800 <__gethex+0x1f4>
 800a7f4:	1eb9      	subs	r1, r7, #2
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 fedc 	bl	800b5b4 <__any_on>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d145      	bne.n	800a88c <__gethex+0x280>
 800a800:	f04f 0a02 	mov.w	sl, #2
 800a804:	4639      	mov	r1, r7
 800a806:	4620      	mov	r0, r4
 800a808:	f7ff fe98 	bl	800a53c <rshift>
 800a80c:	443d      	add	r5, r7
 800a80e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a812:	42ab      	cmp	r3, r5
 800a814:	da4c      	bge.n	800a8b0 <__gethex+0x2a4>
 800a816:	ee18 0a10 	vmov	r0, s16
 800a81a:	4621      	mov	r1, r4
 800a81c:	f000 fa6a 	bl	800acf4 <_Bfree>
 800a820:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a822:	2300      	movs	r3, #0
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	27a3      	movs	r7, #163	; 0xa3
 800a828:	e785      	b.n	800a736 <__gethex+0x12a>
 800a82a:	1e73      	subs	r3, r6, #1
 800a82c:	9a05      	ldr	r2, [sp, #20]
 800a82e:	9303      	str	r3, [sp, #12]
 800a830:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a834:	4293      	cmp	r3, r2
 800a836:	d019      	beq.n	800a86c <__gethex+0x260>
 800a838:	f1bb 0f20 	cmp.w	fp, #32
 800a83c:	d107      	bne.n	800a84e <__gethex+0x242>
 800a83e:	9b02      	ldr	r3, [sp, #8]
 800a840:	9a00      	ldr	r2, [sp, #0]
 800a842:	f843 2b04 	str.w	r2, [r3], #4
 800a846:	9302      	str	r3, [sp, #8]
 800a848:	2300      	movs	r3, #0
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	469b      	mov	fp, r3
 800a84e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a852:	f7ff fec5 	bl	800a5e0 <__hexdig_fun>
 800a856:	9b00      	ldr	r3, [sp, #0]
 800a858:	f000 000f 	and.w	r0, r0, #15
 800a85c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a860:	4303      	orrs	r3, r0
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	f10b 0b04 	add.w	fp, fp, #4
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	e00d      	b.n	800a888 <__gethex+0x27c>
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	9a06      	ldr	r2, [sp, #24]
 800a870:	4413      	add	r3, r2
 800a872:	42bb      	cmp	r3, r7
 800a874:	d3e0      	bcc.n	800a838 <__gethex+0x22c>
 800a876:	4618      	mov	r0, r3
 800a878:	9901      	ldr	r1, [sp, #4]
 800a87a:	9307      	str	r3, [sp, #28]
 800a87c:	4652      	mov	r2, sl
 800a87e:	f7fe f914 	bl	8008aaa <strncmp>
 800a882:	9b07      	ldr	r3, [sp, #28]
 800a884:	2800      	cmp	r0, #0
 800a886:	d1d7      	bne.n	800a838 <__gethex+0x22c>
 800a888:	461e      	mov	r6, r3
 800a88a:	e78b      	b.n	800a7a4 <__gethex+0x198>
 800a88c:	f04f 0a03 	mov.w	sl, #3
 800a890:	e7b8      	b.n	800a804 <__gethex+0x1f8>
 800a892:	da0a      	bge.n	800a8aa <__gethex+0x29e>
 800a894:	1a37      	subs	r7, r6, r0
 800a896:	4621      	mov	r1, r4
 800a898:	ee18 0a10 	vmov	r0, s16
 800a89c:	463a      	mov	r2, r7
 800a89e:	f000 fc45 	bl	800b12c <__lshift>
 800a8a2:	1bed      	subs	r5, r5, r7
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	f100 0914 	add.w	r9, r0, #20
 800a8aa:	f04f 0a00 	mov.w	sl, #0
 800a8ae:	e7ae      	b.n	800a80e <__gethex+0x202>
 800a8b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a8b4:	42a8      	cmp	r0, r5
 800a8b6:	dd72      	ble.n	800a99e <__gethex+0x392>
 800a8b8:	1b45      	subs	r5, r0, r5
 800a8ba:	42ae      	cmp	r6, r5
 800a8bc:	dc36      	bgt.n	800a92c <__gethex+0x320>
 800a8be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d02a      	beq.n	800a91c <__gethex+0x310>
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d02c      	beq.n	800a924 <__gethex+0x318>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d11c      	bne.n	800a908 <__gethex+0x2fc>
 800a8ce:	42ae      	cmp	r6, r5
 800a8d0:	d11a      	bne.n	800a908 <__gethex+0x2fc>
 800a8d2:	2e01      	cmp	r6, #1
 800a8d4:	d112      	bne.n	800a8fc <__gethex+0x2f0>
 800a8d6:	9a04      	ldr	r2, [sp, #16]
 800a8d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	2301      	movs	r3, #1
 800a8e0:	6123      	str	r3, [r4, #16]
 800a8e2:	f8c9 3000 	str.w	r3, [r9]
 800a8e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8e8:	2762      	movs	r7, #98	; 0x62
 800a8ea:	601c      	str	r4, [r3, #0]
 800a8ec:	e723      	b.n	800a736 <__gethex+0x12a>
 800a8ee:	bf00      	nop
 800a8f0:	0800ce48 	.word	0x0800ce48
 800a8f4:	0800cdcf 	.word	0x0800cdcf
 800a8f8:	0800cde0 	.word	0x0800cde0
 800a8fc:	1e71      	subs	r1, r6, #1
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 fe58 	bl	800b5b4 <__any_on>
 800a904:	2800      	cmp	r0, #0
 800a906:	d1e6      	bne.n	800a8d6 <__gethex+0x2ca>
 800a908:	ee18 0a10 	vmov	r0, s16
 800a90c:	4621      	mov	r1, r4
 800a90e:	f000 f9f1 	bl	800acf4 <_Bfree>
 800a912:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a914:	2300      	movs	r3, #0
 800a916:	6013      	str	r3, [r2, #0]
 800a918:	2750      	movs	r7, #80	; 0x50
 800a91a:	e70c      	b.n	800a736 <__gethex+0x12a>
 800a91c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1f2      	bne.n	800a908 <__gethex+0x2fc>
 800a922:	e7d8      	b.n	800a8d6 <__gethex+0x2ca>
 800a924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1d5      	bne.n	800a8d6 <__gethex+0x2ca>
 800a92a:	e7ed      	b.n	800a908 <__gethex+0x2fc>
 800a92c:	1e6f      	subs	r7, r5, #1
 800a92e:	f1ba 0f00 	cmp.w	sl, #0
 800a932:	d131      	bne.n	800a998 <__gethex+0x38c>
 800a934:	b127      	cbz	r7, 800a940 <__gethex+0x334>
 800a936:	4639      	mov	r1, r7
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 fe3b 	bl	800b5b4 <__any_on>
 800a93e:	4682      	mov	sl, r0
 800a940:	117b      	asrs	r3, r7, #5
 800a942:	2101      	movs	r1, #1
 800a944:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a948:	f007 071f 	and.w	r7, r7, #31
 800a94c:	fa01 f707 	lsl.w	r7, r1, r7
 800a950:	421f      	tst	r7, r3
 800a952:	4629      	mov	r1, r5
 800a954:	4620      	mov	r0, r4
 800a956:	bf18      	it	ne
 800a958:	f04a 0a02 	orrne.w	sl, sl, #2
 800a95c:	1b76      	subs	r6, r6, r5
 800a95e:	f7ff fded 	bl	800a53c <rshift>
 800a962:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a966:	2702      	movs	r7, #2
 800a968:	f1ba 0f00 	cmp.w	sl, #0
 800a96c:	d048      	beq.n	800aa00 <__gethex+0x3f4>
 800a96e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a972:	2b02      	cmp	r3, #2
 800a974:	d015      	beq.n	800a9a2 <__gethex+0x396>
 800a976:	2b03      	cmp	r3, #3
 800a978:	d017      	beq.n	800a9aa <__gethex+0x39e>
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d109      	bne.n	800a992 <__gethex+0x386>
 800a97e:	f01a 0f02 	tst.w	sl, #2
 800a982:	d006      	beq.n	800a992 <__gethex+0x386>
 800a984:	f8d9 0000 	ldr.w	r0, [r9]
 800a988:	ea4a 0a00 	orr.w	sl, sl, r0
 800a98c:	f01a 0f01 	tst.w	sl, #1
 800a990:	d10e      	bne.n	800a9b0 <__gethex+0x3a4>
 800a992:	f047 0710 	orr.w	r7, r7, #16
 800a996:	e033      	b.n	800aa00 <__gethex+0x3f4>
 800a998:	f04f 0a01 	mov.w	sl, #1
 800a99c:	e7d0      	b.n	800a940 <__gethex+0x334>
 800a99e:	2701      	movs	r7, #1
 800a9a0:	e7e2      	b.n	800a968 <__gethex+0x35c>
 800a9a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9a4:	f1c3 0301 	rsb	r3, r3, #1
 800a9a8:	9315      	str	r3, [sp, #84]	; 0x54
 800a9aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0f0      	beq.n	800a992 <__gethex+0x386>
 800a9b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9b4:	f104 0314 	add.w	r3, r4, #20
 800a9b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9c0:	f04f 0c00 	mov.w	ip, #0
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9ce:	d01c      	beq.n	800aa0a <__gethex+0x3fe>
 800a9d0:	3201      	adds	r2, #1
 800a9d2:	6002      	str	r2, [r0, #0]
 800a9d4:	2f02      	cmp	r7, #2
 800a9d6:	f104 0314 	add.w	r3, r4, #20
 800a9da:	d13f      	bne.n	800aa5c <__gethex+0x450>
 800a9dc:	f8d8 2000 	ldr.w	r2, [r8]
 800a9e0:	3a01      	subs	r2, #1
 800a9e2:	42b2      	cmp	r2, r6
 800a9e4:	d10a      	bne.n	800a9fc <__gethex+0x3f0>
 800a9e6:	1171      	asrs	r1, r6, #5
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9ee:	f006 061f 	and.w	r6, r6, #31
 800a9f2:	fa02 f606 	lsl.w	r6, r2, r6
 800a9f6:	421e      	tst	r6, r3
 800a9f8:	bf18      	it	ne
 800a9fa:	4617      	movne	r7, r2
 800a9fc:	f047 0720 	orr.w	r7, r7, #32
 800aa00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa02:	601c      	str	r4, [r3, #0]
 800aa04:	9b04      	ldr	r3, [sp, #16]
 800aa06:	601d      	str	r5, [r3, #0]
 800aa08:	e695      	b.n	800a736 <__gethex+0x12a>
 800aa0a:	4299      	cmp	r1, r3
 800aa0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa10:	d8d8      	bhi.n	800a9c4 <__gethex+0x3b8>
 800aa12:	68a3      	ldr	r3, [r4, #8]
 800aa14:	459b      	cmp	fp, r3
 800aa16:	db19      	blt.n	800aa4c <__gethex+0x440>
 800aa18:	6861      	ldr	r1, [r4, #4]
 800aa1a:	ee18 0a10 	vmov	r0, s16
 800aa1e:	3101      	adds	r1, #1
 800aa20:	f000 f928 	bl	800ac74 <_Balloc>
 800aa24:	4681      	mov	r9, r0
 800aa26:	b918      	cbnz	r0, 800aa30 <__gethex+0x424>
 800aa28:	4b1a      	ldr	r3, [pc, #104]	; (800aa94 <__gethex+0x488>)
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	2184      	movs	r1, #132	; 0x84
 800aa2e:	e6a8      	b.n	800a782 <__gethex+0x176>
 800aa30:	6922      	ldr	r2, [r4, #16]
 800aa32:	3202      	adds	r2, #2
 800aa34:	f104 010c 	add.w	r1, r4, #12
 800aa38:	0092      	lsls	r2, r2, #2
 800aa3a:	300c      	adds	r0, #12
 800aa3c:	f000 f90c 	bl	800ac58 <memcpy>
 800aa40:	4621      	mov	r1, r4
 800aa42:	ee18 0a10 	vmov	r0, s16
 800aa46:	f000 f955 	bl	800acf4 <_Bfree>
 800aa4a:	464c      	mov	r4, r9
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa54:	6122      	str	r2, [r4, #16]
 800aa56:	2201      	movs	r2, #1
 800aa58:	615a      	str	r2, [r3, #20]
 800aa5a:	e7bb      	b.n	800a9d4 <__gethex+0x3c8>
 800aa5c:	6922      	ldr	r2, [r4, #16]
 800aa5e:	455a      	cmp	r2, fp
 800aa60:	dd0b      	ble.n	800aa7a <__gethex+0x46e>
 800aa62:	2101      	movs	r1, #1
 800aa64:	4620      	mov	r0, r4
 800aa66:	f7ff fd69 	bl	800a53c <rshift>
 800aa6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa6e:	3501      	adds	r5, #1
 800aa70:	42ab      	cmp	r3, r5
 800aa72:	f6ff aed0 	blt.w	800a816 <__gethex+0x20a>
 800aa76:	2701      	movs	r7, #1
 800aa78:	e7c0      	b.n	800a9fc <__gethex+0x3f0>
 800aa7a:	f016 061f 	ands.w	r6, r6, #31
 800aa7e:	d0fa      	beq.n	800aa76 <__gethex+0x46a>
 800aa80:	4453      	add	r3, sl
 800aa82:	f1c6 0620 	rsb	r6, r6, #32
 800aa86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa8a:	f000 f9e5 	bl	800ae58 <__hi0bits>
 800aa8e:	42b0      	cmp	r0, r6
 800aa90:	dbe7      	blt.n	800aa62 <__gethex+0x456>
 800aa92:	e7f0      	b.n	800aa76 <__gethex+0x46a>
 800aa94:	0800cdcf 	.word	0x0800cdcf

0800aa98 <L_shift>:
 800aa98:	f1c2 0208 	rsb	r2, r2, #8
 800aa9c:	0092      	lsls	r2, r2, #2
 800aa9e:	b570      	push	{r4, r5, r6, lr}
 800aaa0:	f1c2 0620 	rsb	r6, r2, #32
 800aaa4:	6843      	ldr	r3, [r0, #4]
 800aaa6:	6804      	ldr	r4, [r0, #0]
 800aaa8:	fa03 f506 	lsl.w	r5, r3, r6
 800aaac:	432c      	orrs	r4, r5
 800aaae:	40d3      	lsrs	r3, r2
 800aab0:	6004      	str	r4, [r0, #0]
 800aab2:	f840 3f04 	str.w	r3, [r0, #4]!
 800aab6:	4288      	cmp	r0, r1
 800aab8:	d3f4      	bcc.n	800aaa4 <L_shift+0xc>
 800aaba:	bd70      	pop	{r4, r5, r6, pc}

0800aabc <__match>:
 800aabc:	b530      	push	{r4, r5, lr}
 800aabe:	6803      	ldr	r3, [r0, #0]
 800aac0:	3301      	adds	r3, #1
 800aac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aac6:	b914      	cbnz	r4, 800aace <__match+0x12>
 800aac8:	6003      	str	r3, [r0, #0]
 800aaca:	2001      	movs	r0, #1
 800aacc:	bd30      	pop	{r4, r5, pc}
 800aace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aad2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aad6:	2d19      	cmp	r5, #25
 800aad8:	bf98      	it	ls
 800aada:	3220      	addls	r2, #32
 800aadc:	42a2      	cmp	r2, r4
 800aade:	d0f0      	beq.n	800aac2 <__match+0x6>
 800aae0:	2000      	movs	r0, #0
 800aae2:	e7f3      	b.n	800aacc <__match+0x10>

0800aae4 <__hexnan>:
 800aae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae8:	680b      	ldr	r3, [r1, #0]
 800aaea:	115e      	asrs	r6, r3, #5
 800aaec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aaf0:	f013 031f 	ands.w	r3, r3, #31
 800aaf4:	b087      	sub	sp, #28
 800aaf6:	bf18      	it	ne
 800aaf8:	3604      	addne	r6, #4
 800aafa:	2500      	movs	r5, #0
 800aafc:	1f37      	subs	r7, r6, #4
 800aafe:	4690      	mov	r8, r2
 800ab00:	6802      	ldr	r2, [r0, #0]
 800ab02:	9301      	str	r3, [sp, #4]
 800ab04:	4682      	mov	sl, r0
 800ab06:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab0a:	46b9      	mov	r9, r7
 800ab0c:	463c      	mov	r4, r7
 800ab0e:	9502      	str	r5, [sp, #8]
 800ab10:	46ab      	mov	fp, r5
 800ab12:	7851      	ldrb	r1, [r2, #1]
 800ab14:	1c53      	adds	r3, r2, #1
 800ab16:	9303      	str	r3, [sp, #12]
 800ab18:	b341      	cbz	r1, 800ab6c <__hexnan+0x88>
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	9205      	str	r2, [sp, #20]
 800ab1e:	9104      	str	r1, [sp, #16]
 800ab20:	f7ff fd5e 	bl	800a5e0 <__hexdig_fun>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d14f      	bne.n	800abc8 <__hexnan+0xe4>
 800ab28:	9904      	ldr	r1, [sp, #16]
 800ab2a:	9a05      	ldr	r2, [sp, #20]
 800ab2c:	2920      	cmp	r1, #32
 800ab2e:	d818      	bhi.n	800ab62 <__hexnan+0x7e>
 800ab30:	9b02      	ldr	r3, [sp, #8]
 800ab32:	459b      	cmp	fp, r3
 800ab34:	dd13      	ble.n	800ab5e <__hexnan+0x7a>
 800ab36:	454c      	cmp	r4, r9
 800ab38:	d206      	bcs.n	800ab48 <__hexnan+0x64>
 800ab3a:	2d07      	cmp	r5, #7
 800ab3c:	dc04      	bgt.n	800ab48 <__hexnan+0x64>
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4649      	mov	r1, r9
 800ab42:	4620      	mov	r0, r4
 800ab44:	f7ff ffa8 	bl	800aa98 <L_shift>
 800ab48:	4544      	cmp	r4, r8
 800ab4a:	d950      	bls.n	800abee <__hexnan+0x10a>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f1a4 0904 	sub.w	r9, r4, #4
 800ab52:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab56:	f8cd b008 	str.w	fp, [sp, #8]
 800ab5a:	464c      	mov	r4, r9
 800ab5c:	461d      	mov	r5, r3
 800ab5e:	9a03      	ldr	r2, [sp, #12]
 800ab60:	e7d7      	b.n	800ab12 <__hexnan+0x2e>
 800ab62:	2929      	cmp	r1, #41	; 0x29
 800ab64:	d156      	bne.n	800ac14 <__hexnan+0x130>
 800ab66:	3202      	adds	r2, #2
 800ab68:	f8ca 2000 	str.w	r2, [sl]
 800ab6c:	f1bb 0f00 	cmp.w	fp, #0
 800ab70:	d050      	beq.n	800ac14 <__hexnan+0x130>
 800ab72:	454c      	cmp	r4, r9
 800ab74:	d206      	bcs.n	800ab84 <__hexnan+0xa0>
 800ab76:	2d07      	cmp	r5, #7
 800ab78:	dc04      	bgt.n	800ab84 <__hexnan+0xa0>
 800ab7a:	462a      	mov	r2, r5
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f7ff ff8a 	bl	800aa98 <L_shift>
 800ab84:	4544      	cmp	r4, r8
 800ab86:	d934      	bls.n	800abf2 <__hexnan+0x10e>
 800ab88:	f1a8 0204 	sub.w	r2, r8, #4
 800ab8c:	4623      	mov	r3, r4
 800ab8e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab92:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab96:	429f      	cmp	r7, r3
 800ab98:	d2f9      	bcs.n	800ab8e <__hexnan+0xaa>
 800ab9a:	1b3b      	subs	r3, r7, r4
 800ab9c:	f023 0303 	bic.w	r3, r3, #3
 800aba0:	3304      	adds	r3, #4
 800aba2:	3401      	adds	r4, #1
 800aba4:	3e03      	subs	r6, #3
 800aba6:	42b4      	cmp	r4, r6
 800aba8:	bf88      	it	hi
 800abaa:	2304      	movhi	r3, #4
 800abac:	4443      	add	r3, r8
 800abae:	2200      	movs	r2, #0
 800abb0:	f843 2b04 	str.w	r2, [r3], #4
 800abb4:	429f      	cmp	r7, r3
 800abb6:	d2fb      	bcs.n	800abb0 <__hexnan+0xcc>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	b91b      	cbnz	r3, 800abc4 <__hexnan+0xe0>
 800abbc:	4547      	cmp	r7, r8
 800abbe:	d127      	bne.n	800ac10 <__hexnan+0x12c>
 800abc0:	2301      	movs	r3, #1
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	2005      	movs	r0, #5
 800abc6:	e026      	b.n	800ac16 <__hexnan+0x132>
 800abc8:	3501      	adds	r5, #1
 800abca:	2d08      	cmp	r5, #8
 800abcc:	f10b 0b01 	add.w	fp, fp, #1
 800abd0:	dd06      	ble.n	800abe0 <__hexnan+0xfc>
 800abd2:	4544      	cmp	r4, r8
 800abd4:	d9c3      	bls.n	800ab5e <__hexnan+0x7a>
 800abd6:	2300      	movs	r3, #0
 800abd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800abdc:	2501      	movs	r5, #1
 800abde:	3c04      	subs	r4, #4
 800abe0:	6822      	ldr	r2, [r4, #0]
 800abe2:	f000 000f 	and.w	r0, r0, #15
 800abe6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800abea:	6022      	str	r2, [r4, #0]
 800abec:	e7b7      	b.n	800ab5e <__hexnan+0x7a>
 800abee:	2508      	movs	r5, #8
 800abf0:	e7b5      	b.n	800ab5e <__hexnan+0x7a>
 800abf2:	9b01      	ldr	r3, [sp, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d0df      	beq.n	800abb8 <__hexnan+0xd4>
 800abf8:	f04f 32ff 	mov.w	r2, #4294967295
 800abfc:	f1c3 0320 	rsb	r3, r3, #32
 800ac00:	fa22 f303 	lsr.w	r3, r2, r3
 800ac04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac08:	401a      	ands	r2, r3
 800ac0a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ac0e:	e7d3      	b.n	800abb8 <__hexnan+0xd4>
 800ac10:	3f04      	subs	r7, #4
 800ac12:	e7d1      	b.n	800abb8 <__hexnan+0xd4>
 800ac14:	2004      	movs	r0, #4
 800ac16:	b007      	add	sp, #28
 800ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac1c <_localeconv_r>:
 800ac1c:	4800      	ldr	r0, [pc, #0]	; (800ac20 <_localeconv_r+0x4>)
 800ac1e:	4770      	bx	lr
 800ac20:	20000174 	.word	0x20000174

0800ac24 <malloc>:
 800ac24:	4b02      	ldr	r3, [pc, #8]	; (800ac30 <malloc+0xc>)
 800ac26:	4601      	mov	r1, r0
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f000 bd67 	b.w	800b6fc <_malloc_r>
 800ac2e:	bf00      	nop
 800ac30:	2000001c 	.word	0x2000001c

0800ac34 <__ascii_mbtowc>:
 800ac34:	b082      	sub	sp, #8
 800ac36:	b901      	cbnz	r1, 800ac3a <__ascii_mbtowc+0x6>
 800ac38:	a901      	add	r1, sp, #4
 800ac3a:	b142      	cbz	r2, 800ac4e <__ascii_mbtowc+0x1a>
 800ac3c:	b14b      	cbz	r3, 800ac52 <__ascii_mbtowc+0x1e>
 800ac3e:	7813      	ldrb	r3, [r2, #0]
 800ac40:	600b      	str	r3, [r1, #0]
 800ac42:	7812      	ldrb	r2, [r2, #0]
 800ac44:	1e10      	subs	r0, r2, #0
 800ac46:	bf18      	it	ne
 800ac48:	2001      	movne	r0, #1
 800ac4a:	b002      	add	sp, #8
 800ac4c:	4770      	bx	lr
 800ac4e:	4610      	mov	r0, r2
 800ac50:	e7fb      	b.n	800ac4a <__ascii_mbtowc+0x16>
 800ac52:	f06f 0001 	mvn.w	r0, #1
 800ac56:	e7f8      	b.n	800ac4a <__ascii_mbtowc+0x16>

0800ac58 <memcpy>:
 800ac58:	440a      	add	r2, r1
 800ac5a:	4291      	cmp	r1, r2
 800ac5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac60:	d100      	bne.n	800ac64 <memcpy+0xc>
 800ac62:	4770      	bx	lr
 800ac64:	b510      	push	{r4, lr}
 800ac66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6e:	4291      	cmp	r1, r2
 800ac70:	d1f9      	bne.n	800ac66 <memcpy+0xe>
 800ac72:	bd10      	pop	{r4, pc}

0800ac74 <_Balloc>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac78:	4604      	mov	r4, r0
 800ac7a:	460d      	mov	r5, r1
 800ac7c:	b976      	cbnz	r6, 800ac9c <_Balloc+0x28>
 800ac7e:	2010      	movs	r0, #16
 800ac80:	f7ff ffd0 	bl	800ac24 <malloc>
 800ac84:	4602      	mov	r2, r0
 800ac86:	6260      	str	r0, [r4, #36]	; 0x24
 800ac88:	b920      	cbnz	r0, 800ac94 <_Balloc+0x20>
 800ac8a:	4b18      	ldr	r3, [pc, #96]	; (800acec <_Balloc+0x78>)
 800ac8c:	4818      	ldr	r0, [pc, #96]	; (800acf0 <_Balloc+0x7c>)
 800ac8e:	2166      	movs	r1, #102	; 0x66
 800ac90:	f000 ff2c 	bl	800baec <__assert_func>
 800ac94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac98:	6006      	str	r6, [r0, #0]
 800ac9a:	60c6      	str	r6, [r0, #12]
 800ac9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac9e:	68f3      	ldr	r3, [r6, #12]
 800aca0:	b183      	cbz	r3, 800acc4 <_Balloc+0x50>
 800aca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acaa:	b9b8      	cbnz	r0, 800acdc <_Balloc+0x68>
 800acac:	2101      	movs	r1, #1
 800acae:	fa01 f605 	lsl.w	r6, r1, r5
 800acb2:	1d72      	adds	r2, r6, #5
 800acb4:	0092      	lsls	r2, r2, #2
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 fc9d 	bl	800b5f6 <_calloc_r>
 800acbc:	b160      	cbz	r0, 800acd8 <_Balloc+0x64>
 800acbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acc2:	e00e      	b.n	800ace2 <_Balloc+0x6e>
 800acc4:	2221      	movs	r2, #33	; 0x21
 800acc6:	2104      	movs	r1, #4
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fc94 	bl	800b5f6 <_calloc_r>
 800acce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acd0:	60f0      	str	r0, [r6, #12]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1e4      	bne.n	800aca2 <_Balloc+0x2e>
 800acd8:	2000      	movs	r0, #0
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	6802      	ldr	r2, [r0, #0]
 800acde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ace2:	2300      	movs	r3, #0
 800ace4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ace8:	e7f7      	b.n	800acda <_Balloc+0x66>
 800acea:	bf00      	nop
 800acec:	0800cd5d 	.word	0x0800cd5d
 800acf0:	0800ce5c 	.word	0x0800ce5c

0800acf4 <_Bfree>:
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acf8:	4605      	mov	r5, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	b976      	cbnz	r6, 800ad1c <_Bfree+0x28>
 800acfe:	2010      	movs	r0, #16
 800ad00:	f7ff ff90 	bl	800ac24 <malloc>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6268      	str	r0, [r5, #36]	; 0x24
 800ad08:	b920      	cbnz	r0, 800ad14 <_Bfree+0x20>
 800ad0a:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <_Bfree+0x3c>)
 800ad0c:	4809      	ldr	r0, [pc, #36]	; (800ad34 <_Bfree+0x40>)
 800ad0e:	218a      	movs	r1, #138	; 0x8a
 800ad10:	f000 feec 	bl	800baec <__assert_func>
 800ad14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad18:	6006      	str	r6, [r0, #0]
 800ad1a:	60c6      	str	r6, [r0, #12]
 800ad1c:	b13c      	cbz	r4, 800ad2e <_Bfree+0x3a>
 800ad1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad20:	6862      	ldr	r2, [r4, #4]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad28:	6021      	str	r1, [r4, #0]
 800ad2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	0800cd5d 	.word	0x0800cd5d
 800ad34:	0800ce5c 	.word	0x0800ce5c

0800ad38 <__multadd>:
 800ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3c:	690d      	ldr	r5, [r1, #16]
 800ad3e:	4607      	mov	r7, r0
 800ad40:	460c      	mov	r4, r1
 800ad42:	461e      	mov	r6, r3
 800ad44:	f101 0c14 	add.w	ip, r1, #20
 800ad48:	2000      	movs	r0, #0
 800ad4a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad4e:	b299      	uxth	r1, r3
 800ad50:	fb02 6101 	mla	r1, r2, r1, r6
 800ad54:	0c1e      	lsrs	r6, r3, #16
 800ad56:	0c0b      	lsrs	r3, r1, #16
 800ad58:	fb02 3306 	mla	r3, r2, r6, r3
 800ad5c:	b289      	uxth	r1, r1
 800ad5e:	3001      	adds	r0, #1
 800ad60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad64:	4285      	cmp	r5, r0
 800ad66:	f84c 1b04 	str.w	r1, [ip], #4
 800ad6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad6e:	dcec      	bgt.n	800ad4a <__multadd+0x12>
 800ad70:	b30e      	cbz	r6, 800adb6 <__multadd+0x7e>
 800ad72:	68a3      	ldr	r3, [r4, #8]
 800ad74:	42ab      	cmp	r3, r5
 800ad76:	dc19      	bgt.n	800adac <__multadd+0x74>
 800ad78:	6861      	ldr	r1, [r4, #4]
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	3101      	adds	r1, #1
 800ad7e:	f7ff ff79 	bl	800ac74 <_Balloc>
 800ad82:	4680      	mov	r8, r0
 800ad84:	b928      	cbnz	r0, 800ad92 <__multadd+0x5a>
 800ad86:	4602      	mov	r2, r0
 800ad88:	4b0c      	ldr	r3, [pc, #48]	; (800adbc <__multadd+0x84>)
 800ad8a:	480d      	ldr	r0, [pc, #52]	; (800adc0 <__multadd+0x88>)
 800ad8c:	21b5      	movs	r1, #181	; 0xb5
 800ad8e:	f000 fead 	bl	800baec <__assert_func>
 800ad92:	6922      	ldr	r2, [r4, #16]
 800ad94:	3202      	adds	r2, #2
 800ad96:	f104 010c 	add.w	r1, r4, #12
 800ad9a:	0092      	lsls	r2, r2, #2
 800ad9c:	300c      	adds	r0, #12
 800ad9e:	f7ff ff5b 	bl	800ac58 <memcpy>
 800ada2:	4621      	mov	r1, r4
 800ada4:	4638      	mov	r0, r7
 800ada6:	f7ff ffa5 	bl	800acf4 <_Bfree>
 800adaa:	4644      	mov	r4, r8
 800adac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adb0:	3501      	adds	r5, #1
 800adb2:	615e      	str	r6, [r3, #20]
 800adb4:	6125      	str	r5, [r4, #16]
 800adb6:	4620      	mov	r0, r4
 800adb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adbc:	0800cdcf 	.word	0x0800cdcf
 800adc0:	0800ce5c 	.word	0x0800ce5c

0800adc4 <__s2b>:
 800adc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc8:	460c      	mov	r4, r1
 800adca:	4615      	mov	r5, r2
 800adcc:	461f      	mov	r7, r3
 800adce:	2209      	movs	r2, #9
 800add0:	3308      	adds	r3, #8
 800add2:	4606      	mov	r6, r0
 800add4:	fb93 f3f2 	sdiv	r3, r3, r2
 800add8:	2100      	movs	r1, #0
 800adda:	2201      	movs	r2, #1
 800addc:	429a      	cmp	r2, r3
 800adde:	db09      	blt.n	800adf4 <__s2b+0x30>
 800ade0:	4630      	mov	r0, r6
 800ade2:	f7ff ff47 	bl	800ac74 <_Balloc>
 800ade6:	b940      	cbnz	r0, 800adfa <__s2b+0x36>
 800ade8:	4602      	mov	r2, r0
 800adea:	4b19      	ldr	r3, [pc, #100]	; (800ae50 <__s2b+0x8c>)
 800adec:	4819      	ldr	r0, [pc, #100]	; (800ae54 <__s2b+0x90>)
 800adee:	21ce      	movs	r1, #206	; 0xce
 800adf0:	f000 fe7c 	bl	800baec <__assert_func>
 800adf4:	0052      	lsls	r2, r2, #1
 800adf6:	3101      	adds	r1, #1
 800adf8:	e7f0      	b.n	800addc <__s2b+0x18>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	6143      	str	r3, [r0, #20]
 800adfe:	2d09      	cmp	r5, #9
 800ae00:	f04f 0301 	mov.w	r3, #1
 800ae04:	6103      	str	r3, [r0, #16]
 800ae06:	dd16      	ble.n	800ae36 <__s2b+0x72>
 800ae08:	f104 0909 	add.w	r9, r4, #9
 800ae0c:	46c8      	mov	r8, r9
 800ae0e:	442c      	add	r4, r5
 800ae10:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae14:	4601      	mov	r1, r0
 800ae16:	3b30      	subs	r3, #48	; 0x30
 800ae18:	220a      	movs	r2, #10
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ff8c 	bl	800ad38 <__multadd>
 800ae20:	45a0      	cmp	r8, r4
 800ae22:	d1f5      	bne.n	800ae10 <__s2b+0x4c>
 800ae24:	f1a5 0408 	sub.w	r4, r5, #8
 800ae28:	444c      	add	r4, r9
 800ae2a:	1b2d      	subs	r5, r5, r4
 800ae2c:	1963      	adds	r3, r4, r5
 800ae2e:	42bb      	cmp	r3, r7
 800ae30:	db04      	blt.n	800ae3c <__s2b+0x78>
 800ae32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae36:	340a      	adds	r4, #10
 800ae38:	2509      	movs	r5, #9
 800ae3a:	e7f6      	b.n	800ae2a <__s2b+0x66>
 800ae3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae40:	4601      	mov	r1, r0
 800ae42:	3b30      	subs	r3, #48	; 0x30
 800ae44:	220a      	movs	r2, #10
 800ae46:	4630      	mov	r0, r6
 800ae48:	f7ff ff76 	bl	800ad38 <__multadd>
 800ae4c:	e7ee      	b.n	800ae2c <__s2b+0x68>
 800ae4e:	bf00      	nop
 800ae50:	0800cdcf 	.word	0x0800cdcf
 800ae54:	0800ce5c 	.word	0x0800ce5c

0800ae58 <__hi0bits>:
 800ae58:	0c03      	lsrs	r3, r0, #16
 800ae5a:	041b      	lsls	r3, r3, #16
 800ae5c:	b9d3      	cbnz	r3, 800ae94 <__hi0bits+0x3c>
 800ae5e:	0400      	lsls	r0, r0, #16
 800ae60:	2310      	movs	r3, #16
 800ae62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae66:	bf04      	itt	eq
 800ae68:	0200      	lsleq	r0, r0, #8
 800ae6a:	3308      	addeq	r3, #8
 800ae6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae70:	bf04      	itt	eq
 800ae72:	0100      	lsleq	r0, r0, #4
 800ae74:	3304      	addeq	r3, #4
 800ae76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae7a:	bf04      	itt	eq
 800ae7c:	0080      	lsleq	r0, r0, #2
 800ae7e:	3302      	addeq	r3, #2
 800ae80:	2800      	cmp	r0, #0
 800ae82:	db05      	blt.n	800ae90 <__hi0bits+0x38>
 800ae84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae88:	f103 0301 	add.w	r3, r3, #1
 800ae8c:	bf08      	it	eq
 800ae8e:	2320      	moveq	r3, #32
 800ae90:	4618      	mov	r0, r3
 800ae92:	4770      	bx	lr
 800ae94:	2300      	movs	r3, #0
 800ae96:	e7e4      	b.n	800ae62 <__hi0bits+0xa>

0800ae98 <__lo0bits>:
 800ae98:	6803      	ldr	r3, [r0, #0]
 800ae9a:	f013 0207 	ands.w	r2, r3, #7
 800ae9e:	4601      	mov	r1, r0
 800aea0:	d00b      	beq.n	800aeba <__lo0bits+0x22>
 800aea2:	07da      	lsls	r2, r3, #31
 800aea4:	d423      	bmi.n	800aeee <__lo0bits+0x56>
 800aea6:	0798      	lsls	r0, r3, #30
 800aea8:	bf49      	itett	mi
 800aeaa:	085b      	lsrmi	r3, r3, #1
 800aeac:	089b      	lsrpl	r3, r3, #2
 800aeae:	2001      	movmi	r0, #1
 800aeb0:	600b      	strmi	r3, [r1, #0]
 800aeb2:	bf5c      	itt	pl
 800aeb4:	600b      	strpl	r3, [r1, #0]
 800aeb6:	2002      	movpl	r0, #2
 800aeb8:	4770      	bx	lr
 800aeba:	b298      	uxth	r0, r3
 800aebc:	b9a8      	cbnz	r0, 800aeea <__lo0bits+0x52>
 800aebe:	0c1b      	lsrs	r3, r3, #16
 800aec0:	2010      	movs	r0, #16
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	b90a      	cbnz	r2, 800aeca <__lo0bits+0x32>
 800aec6:	3008      	adds	r0, #8
 800aec8:	0a1b      	lsrs	r3, r3, #8
 800aeca:	071a      	lsls	r2, r3, #28
 800aecc:	bf04      	itt	eq
 800aece:	091b      	lsreq	r3, r3, #4
 800aed0:	3004      	addeq	r0, #4
 800aed2:	079a      	lsls	r2, r3, #30
 800aed4:	bf04      	itt	eq
 800aed6:	089b      	lsreq	r3, r3, #2
 800aed8:	3002      	addeq	r0, #2
 800aeda:	07da      	lsls	r2, r3, #31
 800aedc:	d403      	bmi.n	800aee6 <__lo0bits+0x4e>
 800aede:	085b      	lsrs	r3, r3, #1
 800aee0:	f100 0001 	add.w	r0, r0, #1
 800aee4:	d005      	beq.n	800aef2 <__lo0bits+0x5a>
 800aee6:	600b      	str	r3, [r1, #0]
 800aee8:	4770      	bx	lr
 800aeea:	4610      	mov	r0, r2
 800aeec:	e7e9      	b.n	800aec2 <__lo0bits+0x2a>
 800aeee:	2000      	movs	r0, #0
 800aef0:	4770      	bx	lr
 800aef2:	2020      	movs	r0, #32
 800aef4:	4770      	bx	lr
	...

0800aef8 <__i2b>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	460c      	mov	r4, r1
 800aefc:	2101      	movs	r1, #1
 800aefe:	f7ff feb9 	bl	800ac74 <_Balloc>
 800af02:	4602      	mov	r2, r0
 800af04:	b928      	cbnz	r0, 800af12 <__i2b+0x1a>
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <__i2b+0x24>)
 800af08:	4805      	ldr	r0, [pc, #20]	; (800af20 <__i2b+0x28>)
 800af0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af0e:	f000 fded 	bl	800baec <__assert_func>
 800af12:	2301      	movs	r3, #1
 800af14:	6144      	str	r4, [r0, #20]
 800af16:	6103      	str	r3, [r0, #16]
 800af18:	bd10      	pop	{r4, pc}
 800af1a:	bf00      	nop
 800af1c:	0800cdcf 	.word	0x0800cdcf
 800af20:	0800ce5c 	.word	0x0800ce5c

0800af24 <__multiply>:
 800af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	4691      	mov	r9, r2
 800af2a:	690a      	ldr	r2, [r1, #16]
 800af2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af30:	429a      	cmp	r2, r3
 800af32:	bfb8      	it	lt
 800af34:	460b      	movlt	r3, r1
 800af36:	460c      	mov	r4, r1
 800af38:	bfbc      	itt	lt
 800af3a:	464c      	movlt	r4, r9
 800af3c:	4699      	movlt	r9, r3
 800af3e:	6927      	ldr	r7, [r4, #16]
 800af40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af44:	68a3      	ldr	r3, [r4, #8]
 800af46:	6861      	ldr	r1, [r4, #4]
 800af48:	eb07 060a 	add.w	r6, r7, sl
 800af4c:	42b3      	cmp	r3, r6
 800af4e:	b085      	sub	sp, #20
 800af50:	bfb8      	it	lt
 800af52:	3101      	addlt	r1, #1
 800af54:	f7ff fe8e 	bl	800ac74 <_Balloc>
 800af58:	b930      	cbnz	r0, 800af68 <__multiply+0x44>
 800af5a:	4602      	mov	r2, r0
 800af5c:	4b44      	ldr	r3, [pc, #272]	; (800b070 <__multiply+0x14c>)
 800af5e:	4845      	ldr	r0, [pc, #276]	; (800b074 <__multiply+0x150>)
 800af60:	f240 115d 	movw	r1, #349	; 0x15d
 800af64:	f000 fdc2 	bl	800baec <__assert_func>
 800af68:	f100 0514 	add.w	r5, r0, #20
 800af6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af70:	462b      	mov	r3, r5
 800af72:	2200      	movs	r2, #0
 800af74:	4543      	cmp	r3, r8
 800af76:	d321      	bcc.n	800afbc <__multiply+0x98>
 800af78:	f104 0314 	add.w	r3, r4, #20
 800af7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af80:	f109 0314 	add.w	r3, r9, #20
 800af84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af88:	9202      	str	r2, [sp, #8]
 800af8a:	1b3a      	subs	r2, r7, r4
 800af8c:	3a15      	subs	r2, #21
 800af8e:	f022 0203 	bic.w	r2, r2, #3
 800af92:	3204      	adds	r2, #4
 800af94:	f104 0115 	add.w	r1, r4, #21
 800af98:	428f      	cmp	r7, r1
 800af9a:	bf38      	it	cc
 800af9c:	2204      	movcc	r2, #4
 800af9e:	9201      	str	r2, [sp, #4]
 800afa0:	9a02      	ldr	r2, [sp, #8]
 800afa2:	9303      	str	r3, [sp, #12]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d80c      	bhi.n	800afc2 <__multiply+0x9e>
 800afa8:	2e00      	cmp	r6, #0
 800afaa:	dd03      	ble.n	800afb4 <__multiply+0x90>
 800afac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d05a      	beq.n	800b06a <__multiply+0x146>
 800afb4:	6106      	str	r6, [r0, #16]
 800afb6:	b005      	add	sp, #20
 800afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	f843 2b04 	str.w	r2, [r3], #4
 800afc0:	e7d8      	b.n	800af74 <__multiply+0x50>
 800afc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800afc6:	f1ba 0f00 	cmp.w	sl, #0
 800afca:	d024      	beq.n	800b016 <__multiply+0xf2>
 800afcc:	f104 0e14 	add.w	lr, r4, #20
 800afd0:	46a9      	mov	r9, r5
 800afd2:	f04f 0c00 	mov.w	ip, #0
 800afd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800afda:	f8d9 1000 	ldr.w	r1, [r9]
 800afde:	fa1f fb82 	uxth.w	fp, r2
 800afe2:	b289      	uxth	r1, r1
 800afe4:	fb0a 110b 	mla	r1, sl, fp, r1
 800afe8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800afec:	f8d9 2000 	ldr.w	r2, [r9]
 800aff0:	4461      	add	r1, ip
 800aff2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aff6:	fb0a c20b 	mla	r2, sl, fp, ip
 800affa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800affe:	b289      	uxth	r1, r1
 800b000:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b004:	4577      	cmp	r7, lr
 800b006:	f849 1b04 	str.w	r1, [r9], #4
 800b00a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b00e:	d8e2      	bhi.n	800afd6 <__multiply+0xb2>
 800b010:	9a01      	ldr	r2, [sp, #4]
 800b012:	f845 c002 	str.w	ip, [r5, r2]
 800b016:	9a03      	ldr	r2, [sp, #12]
 800b018:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b01c:	3304      	adds	r3, #4
 800b01e:	f1b9 0f00 	cmp.w	r9, #0
 800b022:	d020      	beq.n	800b066 <__multiply+0x142>
 800b024:	6829      	ldr	r1, [r5, #0]
 800b026:	f104 0c14 	add.w	ip, r4, #20
 800b02a:	46ae      	mov	lr, r5
 800b02c:	f04f 0a00 	mov.w	sl, #0
 800b030:	f8bc b000 	ldrh.w	fp, [ip]
 800b034:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b038:	fb09 220b 	mla	r2, r9, fp, r2
 800b03c:	4492      	add	sl, r2
 800b03e:	b289      	uxth	r1, r1
 800b040:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b044:	f84e 1b04 	str.w	r1, [lr], #4
 800b048:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b04c:	f8be 1000 	ldrh.w	r1, [lr]
 800b050:	0c12      	lsrs	r2, r2, #16
 800b052:	fb09 1102 	mla	r1, r9, r2, r1
 800b056:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b05a:	4567      	cmp	r7, ip
 800b05c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b060:	d8e6      	bhi.n	800b030 <__multiply+0x10c>
 800b062:	9a01      	ldr	r2, [sp, #4]
 800b064:	50a9      	str	r1, [r5, r2]
 800b066:	3504      	adds	r5, #4
 800b068:	e79a      	b.n	800afa0 <__multiply+0x7c>
 800b06a:	3e01      	subs	r6, #1
 800b06c:	e79c      	b.n	800afa8 <__multiply+0x84>
 800b06e:	bf00      	nop
 800b070:	0800cdcf 	.word	0x0800cdcf
 800b074:	0800ce5c 	.word	0x0800ce5c

0800b078 <__pow5mult>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	4615      	mov	r5, r2
 800b07e:	f012 0203 	ands.w	r2, r2, #3
 800b082:	4606      	mov	r6, r0
 800b084:	460f      	mov	r7, r1
 800b086:	d007      	beq.n	800b098 <__pow5mult+0x20>
 800b088:	4c25      	ldr	r4, [pc, #148]	; (800b120 <__pow5mult+0xa8>)
 800b08a:	3a01      	subs	r2, #1
 800b08c:	2300      	movs	r3, #0
 800b08e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b092:	f7ff fe51 	bl	800ad38 <__multadd>
 800b096:	4607      	mov	r7, r0
 800b098:	10ad      	asrs	r5, r5, #2
 800b09a:	d03d      	beq.n	800b118 <__pow5mult+0xa0>
 800b09c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b09e:	b97c      	cbnz	r4, 800b0c0 <__pow5mult+0x48>
 800b0a0:	2010      	movs	r0, #16
 800b0a2:	f7ff fdbf 	bl	800ac24 <malloc>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b0aa:	b928      	cbnz	r0, 800b0b8 <__pow5mult+0x40>
 800b0ac:	4b1d      	ldr	r3, [pc, #116]	; (800b124 <__pow5mult+0xac>)
 800b0ae:	481e      	ldr	r0, [pc, #120]	; (800b128 <__pow5mult+0xb0>)
 800b0b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0b4:	f000 fd1a 	bl	800baec <__assert_func>
 800b0b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0bc:	6004      	str	r4, [r0, #0]
 800b0be:	60c4      	str	r4, [r0, #12]
 800b0c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0c8:	b94c      	cbnz	r4, 800b0de <__pow5mult+0x66>
 800b0ca:	f240 2171 	movw	r1, #625	; 0x271
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f7ff ff12 	bl	800aef8 <__i2b>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0da:	4604      	mov	r4, r0
 800b0dc:	6003      	str	r3, [r0, #0]
 800b0de:	f04f 0900 	mov.w	r9, #0
 800b0e2:	07eb      	lsls	r3, r5, #31
 800b0e4:	d50a      	bpl.n	800b0fc <__pow5mult+0x84>
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	4622      	mov	r2, r4
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ff1a 	bl	800af24 <__multiply>
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	4680      	mov	r8, r0
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff fdfd 	bl	800acf4 <_Bfree>
 800b0fa:	4647      	mov	r7, r8
 800b0fc:	106d      	asrs	r5, r5, #1
 800b0fe:	d00b      	beq.n	800b118 <__pow5mult+0xa0>
 800b100:	6820      	ldr	r0, [r4, #0]
 800b102:	b938      	cbnz	r0, 800b114 <__pow5mult+0x9c>
 800b104:	4622      	mov	r2, r4
 800b106:	4621      	mov	r1, r4
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff ff0b 	bl	800af24 <__multiply>
 800b10e:	6020      	str	r0, [r4, #0]
 800b110:	f8c0 9000 	str.w	r9, [r0]
 800b114:	4604      	mov	r4, r0
 800b116:	e7e4      	b.n	800b0e2 <__pow5mult+0x6a>
 800b118:	4638      	mov	r0, r7
 800b11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11e:	bf00      	nop
 800b120:	0800cfa8 	.word	0x0800cfa8
 800b124:	0800cd5d 	.word	0x0800cd5d
 800b128:	0800ce5c 	.word	0x0800ce5c

0800b12c <__lshift>:
 800b12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b130:	460c      	mov	r4, r1
 800b132:	6849      	ldr	r1, [r1, #4]
 800b134:	6923      	ldr	r3, [r4, #16]
 800b136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b13a:	68a3      	ldr	r3, [r4, #8]
 800b13c:	4607      	mov	r7, r0
 800b13e:	4691      	mov	r9, r2
 800b140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b144:	f108 0601 	add.w	r6, r8, #1
 800b148:	42b3      	cmp	r3, r6
 800b14a:	db0b      	blt.n	800b164 <__lshift+0x38>
 800b14c:	4638      	mov	r0, r7
 800b14e:	f7ff fd91 	bl	800ac74 <_Balloc>
 800b152:	4605      	mov	r5, r0
 800b154:	b948      	cbnz	r0, 800b16a <__lshift+0x3e>
 800b156:	4602      	mov	r2, r0
 800b158:	4b2a      	ldr	r3, [pc, #168]	; (800b204 <__lshift+0xd8>)
 800b15a:	482b      	ldr	r0, [pc, #172]	; (800b208 <__lshift+0xdc>)
 800b15c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b160:	f000 fcc4 	bl	800baec <__assert_func>
 800b164:	3101      	adds	r1, #1
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	e7ee      	b.n	800b148 <__lshift+0x1c>
 800b16a:	2300      	movs	r3, #0
 800b16c:	f100 0114 	add.w	r1, r0, #20
 800b170:	f100 0210 	add.w	r2, r0, #16
 800b174:	4618      	mov	r0, r3
 800b176:	4553      	cmp	r3, sl
 800b178:	db37      	blt.n	800b1ea <__lshift+0xbe>
 800b17a:	6920      	ldr	r0, [r4, #16]
 800b17c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b180:	f104 0314 	add.w	r3, r4, #20
 800b184:	f019 091f 	ands.w	r9, r9, #31
 800b188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b18c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b190:	d02f      	beq.n	800b1f2 <__lshift+0xc6>
 800b192:	f1c9 0e20 	rsb	lr, r9, #32
 800b196:	468a      	mov	sl, r1
 800b198:	f04f 0c00 	mov.w	ip, #0
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	fa02 f209 	lsl.w	r2, r2, r9
 800b1a2:	ea42 020c 	orr.w	r2, r2, ip
 800b1a6:	f84a 2b04 	str.w	r2, [sl], #4
 800b1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ae:	4298      	cmp	r0, r3
 800b1b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b1b4:	d8f2      	bhi.n	800b19c <__lshift+0x70>
 800b1b6:	1b03      	subs	r3, r0, r4
 800b1b8:	3b15      	subs	r3, #21
 800b1ba:	f023 0303 	bic.w	r3, r3, #3
 800b1be:	3304      	adds	r3, #4
 800b1c0:	f104 0215 	add.w	r2, r4, #21
 800b1c4:	4290      	cmp	r0, r2
 800b1c6:	bf38      	it	cc
 800b1c8:	2304      	movcc	r3, #4
 800b1ca:	f841 c003 	str.w	ip, [r1, r3]
 800b1ce:	f1bc 0f00 	cmp.w	ip, #0
 800b1d2:	d001      	beq.n	800b1d8 <__lshift+0xac>
 800b1d4:	f108 0602 	add.w	r6, r8, #2
 800b1d8:	3e01      	subs	r6, #1
 800b1da:	4638      	mov	r0, r7
 800b1dc:	612e      	str	r6, [r5, #16]
 800b1de:	4621      	mov	r1, r4
 800b1e0:	f7ff fd88 	bl	800acf4 <_Bfree>
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	e7c1      	b.n	800b176 <__lshift+0x4a>
 800b1f2:	3904      	subs	r1, #4
 800b1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1fc:	4298      	cmp	r0, r3
 800b1fe:	d8f9      	bhi.n	800b1f4 <__lshift+0xc8>
 800b200:	e7ea      	b.n	800b1d8 <__lshift+0xac>
 800b202:	bf00      	nop
 800b204:	0800cdcf 	.word	0x0800cdcf
 800b208:	0800ce5c 	.word	0x0800ce5c

0800b20c <__mcmp>:
 800b20c:	b530      	push	{r4, r5, lr}
 800b20e:	6902      	ldr	r2, [r0, #16]
 800b210:	690c      	ldr	r4, [r1, #16]
 800b212:	1b12      	subs	r2, r2, r4
 800b214:	d10e      	bne.n	800b234 <__mcmp+0x28>
 800b216:	f100 0314 	add.w	r3, r0, #20
 800b21a:	3114      	adds	r1, #20
 800b21c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b220:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b224:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b228:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b22c:	42a5      	cmp	r5, r4
 800b22e:	d003      	beq.n	800b238 <__mcmp+0x2c>
 800b230:	d305      	bcc.n	800b23e <__mcmp+0x32>
 800b232:	2201      	movs	r2, #1
 800b234:	4610      	mov	r0, r2
 800b236:	bd30      	pop	{r4, r5, pc}
 800b238:	4283      	cmp	r3, r0
 800b23a:	d3f3      	bcc.n	800b224 <__mcmp+0x18>
 800b23c:	e7fa      	b.n	800b234 <__mcmp+0x28>
 800b23e:	f04f 32ff 	mov.w	r2, #4294967295
 800b242:	e7f7      	b.n	800b234 <__mcmp+0x28>

0800b244 <__mdiff>:
 800b244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b248:	460c      	mov	r4, r1
 800b24a:	4606      	mov	r6, r0
 800b24c:	4611      	mov	r1, r2
 800b24e:	4620      	mov	r0, r4
 800b250:	4690      	mov	r8, r2
 800b252:	f7ff ffdb 	bl	800b20c <__mcmp>
 800b256:	1e05      	subs	r5, r0, #0
 800b258:	d110      	bne.n	800b27c <__mdiff+0x38>
 800b25a:	4629      	mov	r1, r5
 800b25c:	4630      	mov	r0, r6
 800b25e:	f7ff fd09 	bl	800ac74 <_Balloc>
 800b262:	b930      	cbnz	r0, 800b272 <__mdiff+0x2e>
 800b264:	4b3a      	ldr	r3, [pc, #232]	; (800b350 <__mdiff+0x10c>)
 800b266:	4602      	mov	r2, r0
 800b268:	f240 2132 	movw	r1, #562	; 0x232
 800b26c:	4839      	ldr	r0, [pc, #228]	; (800b354 <__mdiff+0x110>)
 800b26e:	f000 fc3d 	bl	800baec <__assert_func>
 800b272:	2301      	movs	r3, #1
 800b274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27c:	bfa4      	itt	ge
 800b27e:	4643      	movge	r3, r8
 800b280:	46a0      	movge	r8, r4
 800b282:	4630      	mov	r0, r6
 800b284:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b288:	bfa6      	itte	ge
 800b28a:	461c      	movge	r4, r3
 800b28c:	2500      	movge	r5, #0
 800b28e:	2501      	movlt	r5, #1
 800b290:	f7ff fcf0 	bl	800ac74 <_Balloc>
 800b294:	b920      	cbnz	r0, 800b2a0 <__mdiff+0x5c>
 800b296:	4b2e      	ldr	r3, [pc, #184]	; (800b350 <__mdiff+0x10c>)
 800b298:	4602      	mov	r2, r0
 800b29a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b29e:	e7e5      	b.n	800b26c <__mdiff+0x28>
 800b2a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2a4:	6926      	ldr	r6, [r4, #16]
 800b2a6:	60c5      	str	r5, [r0, #12]
 800b2a8:	f104 0914 	add.w	r9, r4, #20
 800b2ac:	f108 0514 	add.w	r5, r8, #20
 800b2b0:	f100 0e14 	add.w	lr, r0, #20
 800b2b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b2b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2bc:	f108 0210 	add.w	r2, r8, #16
 800b2c0:	46f2      	mov	sl, lr
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2cc:	fa1f f883 	uxth.w	r8, r3
 800b2d0:	fa11 f18b 	uxtah	r1, r1, fp
 800b2d4:	0c1b      	lsrs	r3, r3, #16
 800b2d6:	eba1 0808 	sub.w	r8, r1, r8
 800b2da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2e2:	fa1f f888 	uxth.w	r8, r8
 800b2e6:	1419      	asrs	r1, r3, #16
 800b2e8:	454e      	cmp	r6, r9
 800b2ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2ee:	f84a 3b04 	str.w	r3, [sl], #4
 800b2f2:	d8e7      	bhi.n	800b2c4 <__mdiff+0x80>
 800b2f4:	1b33      	subs	r3, r6, r4
 800b2f6:	3b15      	subs	r3, #21
 800b2f8:	f023 0303 	bic.w	r3, r3, #3
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	3415      	adds	r4, #21
 800b300:	42a6      	cmp	r6, r4
 800b302:	bf38      	it	cc
 800b304:	2304      	movcc	r3, #4
 800b306:	441d      	add	r5, r3
 800b308:	4473      	add	r3, lr
 800b30a:	469e      	mov	lr, r3
 800b30c:	462e      	mov	r6, r5
 800b30e:	4566      	cmp	r6, ip
 800b310:	d30e      	bcc.n	800b330 <__mdiff+0xec>
 800b312:	f10c 0203 	add.w	r2, ip, #3
 800b316:	1b52      	subs	r2, r2, r5
 800b318:	f022 0203 	bic.w	r2, r2, #3
 800b31c:	3d03      	subs	r5, #3
 800b31e:	45ac      	cmp	ip, r5
 800b320:	bf38      	it	cc
 800b322:	2200      	movcc	r2, #0
 800b324:	441a      	add	r2, r3
 800b326:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b32a:	b17b      	cbz	r3, 800b34c <__mdiff+0x108>
 800b32c:	6107      	str	r7, [r0, #16]
 800b32e:	e7a3      	b.n	800b278 <__mdiff+0x34>
 800b330:	f856 8b04 	ldr.w	r8, [r6], #4
 800b334:	fa11 f288 	uxtah	r2, r1, r8
 800b338:	1414      	asrs	r4, r2, #16
 800b33a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b33e:	b292      	uxth	r2, r2
 800b340:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b344:	f84e 2b04 	str.w	r2, [lr], #4
 800b348:	1421      	asrs	r1, r4, #16
 800b34a:	e7e0      	b.n	800b30e <__mdiff+0xca>
 800b34c:	3f01      	subs	r7, #1
 800b34e:	e7ea      	b.n	800b326 <__mdiff+0xe2>
 800b350:	0800cdcf 	.word	0x0800cdcf
 800b354:	0800ce5c 	.word	0x0800ce5c

0800b358 <__ulp>:
 800b358:	b082      	sub	sp, #8
 800b35a:	ed8d 0b00 	vstr	d0, [sp]
 800b35e:	9b01      	ldr	r3, [sp, #4]
 800b360:	4912      	ldr	r1, [pc, #72]	; (800b3ac <__ulp+0x54>)
 800b362:	4019      	ands	r1, r3
 800b364:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b368:	2900      	cmp	r1, #0
 800b36a:	dd05      	ble.n	800b378 <__ulp+0x20>
 800b36c:	2200      	movs	r2, #0
 800b36e:	460b      	mov	r3, r1
 800b370:	ec43 2b10 	vmov	d0, r2, r3
 800b374:	b002      	add	sp, #8
 800b376:	4770      	bx	lr
 800b378:	4249      	negs	r1, r1
 800b37a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b37e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b382:	f04f 0200 	mov.w	r2, #0
 800b386:	f04f 0300 	mov.w	r3, #0
 800b38a:	da04      	bge.n	800b396 <__ulp+0x3e>
 800b38c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b390:	fa41 f300 	asr.w	r3, r1, r0
 800b394:	e7ec      	b.n	800b370 <__ulp+0x18>
 800b396:	f1a0 0114 	sub.w	r1, r0, #20
 800b39a:	291e      	cmp	r1, #30
 800b39c:	bfda      	itte	le
 800b39e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b3a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b3a6:	2101      	movgt	r1, #1
 800b3a8:	460a      	mov	r2, r1
 800b3aa:	e7e1      	b.n	800b370 <__ulp+0x18>
 800b3ac:	7ff00000 	.word	0x7ff00000

0800b3b0 <__b2d>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	6905      	ldr	r5, [r0, #16]
 800b3b4:	f100 0714 	add.w	r7, r0, #20
 800b3b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b3bc:	1f2e      	subs	r6, r5, #4
 800b3be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f7ff fd48 	bl	800ae58 <__hi0bits>
 800b3c8:	f1c0 0320 	rsb	r3, r0, #32
 800b3cc:	280a      	cmp	r0, #10
 800b3ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b44c <__b2d+0x9c>
 800b3d2:	600b      	str	r3, [r1, #0]
 800b3d4:	dc14      	bgt.n	800b400 <__b2d+0x50>
 800b3d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b3da:	fa24 f10e 	lsr.w	r1, r4, lr
 800b3de:	42b7      	cmp	r7, r6
 800b3e0:	ea41 030c 	orr.w	r3, r1, ip
 800b3e4:	bf34      	ite	cc
 800b3e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3ea:	2100      	movcs	r1, #0
 800b3ec:	3015      	adds	r0, #21
 800b3ee:	fa04 f000 	lsl.w	r0, r4, r0
 800b3f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3f6:	ea40 0201 	orr.w	r2, r0, r1
 800b3fa:	ec43 2b10 	vmov	d0, r2, r3
 800b3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b400:	42b7      	cmp	r7, r6
 800b402:	bf3a      	itte	cc
 800b404:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b408:	f1a5 0608 	subcc.w	r6, r5, #8
 800b40c:	2100      	movcs	r1, #0
 800b40e:	380b      	subs	r0, #11
 800b410:	d017      	beq.n	800b442 <__b2d+0x92>
 800b412:	f1c0 0c20 	rsb	ip, r0, #32
 800b416:	fa04 f500 	lsl.w	r5, r4, r0
 800b41a:	42be      	cmp	r6, r7
 800b41c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b420:	ea45 0504 	orr.w	r5, r5, r4
 800b424:	bf8c      	ite	hi
 800b426:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b42a:	2400      	movls	r4, #0
 800b42c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b430:	fa01 f000 	lsl.w	r0, r1, r0
 800b434:	fa24 f40c 	lsr.w	r4, r4, ip
 800b438:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b43c:	ea40 0204 	orr.w	r2, r0, r4
 800b440:	e7db      	b.n	800b3fa <__b2d+0x4a>
 800b442:	ea44 030c 	orr.w	r3, r4, ip
 800b446:	460a      	mov	r2, r1
 800b448:	e7d7      	b.n	800b3fa <__b2d+0x4a>
 800b44a:	bf00      	nop
 800b44c:	3ff00000 	.word	0x3ff00000

0800b450 <__d2b>:
 800b450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b454:	4689      	mov	r9, r1
 800b456:	2101      	movs	r1, #1
 800b458:	ec57 6b10 	vmov	r6, r7, d0
 800b45c:	4690      	mov	r8, r2
 800b45e:	f7ff fc09 	bl	800ac74 <_Balloc>
 800b462:	4604      	mov	r4, r0
 800b464:	b930      	cbnz	r0, 800b474 <__d2b+0x24>
 800b466:	4602      	mov	r2, r0
 800b468:	4b25      	ldr	r3, [pc, #148]	; (800b500 <__d2b+0xb0>)
 800b46a:	4826      	ldr	r0, [pc, #152]	; (800b504 <__d2b+0xb4>)
 800b46c:	f240 310a 	movw	r1, #778	; 0x30a
 800b470:	f000 fb3c 	bl	800baec <__assert_func>
 800b474:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b47c:	bb35      	cbnz	r5, 800b4cc <__d2b+0x7c>
 800b47e:	2e00      	cmp	r6, #0
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	d028      	beq.n	800b4d6 <__d2b+0x86>
 800b484:	4668      	mov	r0, sp
 800b486:	9600      	str	r6, [sp, #0]
 800b488:	f7ff fd06 	bl	800ae98 <__lo0bits>
 800b48c:	9900      	ldr	r1, [sp, #0]
 800b48e:	b300      	cbz	r0, 800b4d2 <__d2b+0x82>
 800b490:	9a01      	ldr	r2, [sp, #4]
 800b492:	f1c0 0320 	rsb	r3, r0, #32
 800b496:	fa02 f303 	lsl.w	r3, r2, r3
 800b49a:	430b      	orrs	r3, r1
 800b49c:	40c2      	lsrs	r2, r0
 800b49e:	6163      	str	r3, [r4, #20]
 800b4a0:	9201      	str	r2, [sp, #4]
 800b4a2:	9b01      	ldr	r3, [sp, #4]
 800b4a4:	61a3      	str	r3, [r4, #24]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bf14      	ite	ne
 800b4aa:	2202      	movne	r2, #2
 800b4ac:	2201      	moveq	r2, #1
 800b4ae:	6122      	str	r2, [r4, #16]
 800b4b0:	b1d5      	cbz	r5, 800b4e8 <__d2b+0x98>
 800b4b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4b6:	4405      	add	r5, r0
 800b4b8:	f8c9 5000 	str.w	r5, [r9]
 800b4bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4c0:	f8c8 0000 	str.w	r0, [r8]
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	b003      	add	sp, #12
 800b4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4d0:	e7d5      	b.n	800b47e <__d2b+0x2e>
 800b4d2:	6161      	str	r1, [r4, #20]
 800b4d4:	e7e5      	b.n	800b4a2 <__d2b+0x52>
 800b4d6:	a801      	add	r0, sp, #4
 800b4d8:	f7ff fcde 	bl	800ae98 <__lo0bits>
 800b4dc:	9b01      	ldr	r3, [sp, #4]
 800b4de:	6163      	str	r3, [r4, #20]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	6122      	str	r2, [r4, #16]
 800b4e4:	3020      	adds	r0, #32
 800b4e6:	e7e3      	b.n	800b4b0 <__d2b+0x60>
 800b4e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4f0:	f8c9 0000 	str.w	r0, [r9]
 800b4f4:	6918      	ldr	r0, [r3, #16]
 800b4f6:	f7ff fcaf 	bl	800ae58 <__hi0bits>
 800b4fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4fe:	e7df      	b.n	800b4c0 <__d2b+0x70>
 800b500:	0800cdcf 	.word	0x0800cdcf
 800b504:	0800ce5c 	.word	0x0800ce5c

0800b508 <__ratio>:
 800b508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	4688      	mov	r8, r1
 800b50e:	4669      	mov	r1, sp
 800b510:	4681      	mov	r9, r0
 800b512:	f7ff ff4d 	bl	800b3b0 <__b2d>
 800b516:	a901      	add	r1, sp, #4
 800b518:	4640      	mov	r0, r8
 800b51a:	ec55 4b10 	vmov	r4, r5, d0
 800b51e:	f7ff ff47 	bl	800b3b0 <__b2d>
 800b522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b526:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b52a:	eba3 0c02 	sub.w	ip, r3, r2
 800b52e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b532:	1a9b      	subs	r3, r3, r2
 800b534:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b538:	ec51 0b10 	vmov	r0, r1, d0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	bfd6      	itet	le
 800b540:	460a      	movle	r2, r1
 800b542:	462a      	movgt	r2, r5
 800b544:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b548:	468b      	mov	fp, r1
 800b54a:	462f      	mov	r7, r5
 800b54c:	bfd4      	ite	le
 800b54e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b552:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b556:	4620      	mov	r0, r4
 800b558:	ee10 2a10 	vmov	r2, s0
 800b55c:	465b      	mov	r3, fp
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f5 f984 	bl	800086c <__aeabi_ddiv>
 800b564:	ec41 0b10 	vmov	d0, r0, r1
 800b568:	b003      	add	sp, #12
 800b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b56e <__copybits>:
 800b56e:	3901      	subs	r1, #1
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	1149      	asrs	r1, r1, #5
 800b574:	6914      	ldr	r4, [r2, #16]
 800b576:	3101      	adds	r1, #1
 800b578:	f102 0314 	add.w	r3, r2, #20
 800b57c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b580:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b584:	1f05      	subs	r5, r0, #4
 800b586:	42a3      	cmp	r3, r4
 800b588:	d30c      	bcc.n	800b5a4 <__copybits+0x36>
 800b58a:	1aa3      	subs	r3, r4, r2
 800b58c:	3b11      	subs	r3, #17
 800b58e:	f023 0303 	bic.w	r3, r3, #3
 800b592:	3211      	adds	r2, #17
 800b594:	42a2      	cmp	r2, r4
 800b596:	bf88      	it	hi
 800b598:	2300      	movhi	r3, #0
 800b59a:	4418      	add	r0, r3
 800b59c:	2300      	movs	r3, #0
 800b59e:	4288      	cmp	r0, r1
 800b5a0:	d305      	bcc.n	800b5ae <__copybits+0x40>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5ac:	e7eb      	b.n	800b586 <__copybits+0x18>
 800b5ae:	f840 3b04 	str.w	r3, [r0], #4
 800b5b2:	e7f4      	b.n	800b59e <__copybits+0x30>

0800b5b4 <__any_on>:
 800b5b4:	f100 0214 	add.w	r2, r0, #20
 800b5b8:	6900      	ldr	r0, [r0, #16]
 800b5ba:	114b      	asrs	r3, r1, #5
 800b5bc:	4298      	cmp	r0, r3
 800b5be:	b510      	push	{r4, lr}
 800b5c0:	db11      	blt.n	800b5e6 <__any_on+0x32>
 800b5c2:	dd0a      	ble.n	800b5da <__any_on+0x26>
 800b5c4:	f011 011f 	ands.w	r1, r1, #31
 800b5c8:	d007      	beq.n	800b5da <__any_on+0x26>
 800b5ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5ce:	fa24 f001 	lsr.w	r0, r4, r1
 800b5d2:	fa00 f101 	lsl.w	r1, r0, r1
 800b5d6:	428c      	cmp	r4, r1
 800b5d8:	d10b      	bne.n	800b5f2 <__any_on+0x3e>
 800b5da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d803      	bhi.n	800b5ea <__any_on+0x36>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	bd10      	pop	{r4, pc}
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	e7f7      	b.n	800b5da <__any_on+0x26>
 800b5ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5ee:	2900      	cmp	r1, #0
 800b5f0:	d0f5      	beq.n	800b5de <__any_on+0x2a>
 800b5f2:	2001      	movs	r0, #1
 800b5f4:	e7f6      	b.n	800b5e4 <__any_on+0x30>

0800b5f6 <_calloc_r>:
 800b5f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5f8:	fba1 2402 	umull	r2, r4, r1, r2
 800b5fc:	b94c      	cbnz	r4, 800b612 <_calloc_r+0x1c>
 800b5fe:	4611      	mov	r1, r2
 800b600:	9201      	str	r2, [sp, #4]
 800b602:	f000 f87b 	bl	800b6fc <_malloc_r>
 800b606:	9a01      	ldr	r2, [sp, #4]
 800b608:	4605      	mov	r5, r0
 800b60a:	b930      	cbnz	r0, 800b61a <_calloc_r+0x24>
 800b60c:	4628      	mov	r0, r5
 800b60e:	b003      	add	sp, #12
 800b610:	bd30      	pop	{r4, r5, pc}
 800b612:	220c      	movs	r2, #12
 800b614:	6002      	str	r2, [r0, #0]
 800b616:	2500      	movs	r5, #0
 800b618:	e7f8      	b.n	800b60c <_calloc_r+0x16>
 800b61a:	4621      	mov	r1, r4
 800b61c:	f7fc fb54 	bl	8007cc8 <memset>
 800b620:	e7f4      	b.n	800b60c <_calloc_r+0x16>
	...

0800b624 <_free_r>:
 800b624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b626:	2900      	cmp	r1, #0
 800b628:	d044      	beq.n	800b6b4 <_free_r+0x90>
 800b62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62e:	9001      	str	r0, [sp, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	f1a1 0404 	sub.w	r4, r1, #4
 800b636:	bfb8      	it	lt
 800b638:	18e4      	addlt	r4, r4, r3
 800b63a:	f000 faa1 	bl	800bb80 <__malloc_lock>
 800b63e:	4a1e      	ldr	r2, [pc, #120]	; (800b6b8 <_free_r+0x94>)
 800b640:	9801      	ldr	r0, [sp, #4]
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	b933      	cbnz	r3, 800b654 <_free_r+0x30>
 800b646:	6063      	str	r3, [r4, #4]
 800b648:	6014      	str	r4, [r2, #0]
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b650:	f000 ba9c 	b.w	800bb8c <__malloc_unlock>
 800b654:	42a3      	cmp	r3, r4
 800b656:	d908      	bls.n	800b66a <_free_r+0x46>
 800b658:	6825      	ldr	r5, [r4, #0]
 800b65a:	1961      	adds	r1, r4, r5
 800b65c:	428b      	cmp	r3, r1
 800b65e:	bf01      	itttt	eq
 800b660:	6819      	ldreq	r1, [r3, #0]
 800b662:	685b      	ldreq	r3, [r3, #4]
 800b664:	1949      	addeq	r1, r1, r5
 800b666:	6021      	streq	r1, [r4, #0]
 800b668:	e7ed      	b.n	800b646 <_free_r+0x22>
 800b66a:	461a      	mov	r2, r3
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	b10b      	cbz	r3, 800b674 <_free_r+0x50>
 800b670:	42a3      	cmp	r3, r4
 800b672:	d9fa      	bls.n	800b66a <_free_r+0x46>
 800b674:	6811      	ldr	r1, [r2, #0]
 800b676:	1855      	adds	r5, r2, r1
 800b678:	42a5      	cmp	r5, r4
 800b67a:	d10b      	bne.n	800b694 <_free_r+0x70>
 800b67c:	6824      	ldr	r4, [r4, #0]
 800b67e:	4421      	add	r1, r4
 800b680:	1854      	adds	r4, r2, r1
 800b682:	42a3      	cmp	r3, r4
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	d1e0      	bne.n	800b64a <_free_r+0x26>
 800b688:	681c      	ldr	r4, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	4421      	add	r1, r4
 800b690:	6011      	str	r1, [r2, #0]
 800b692:	e7da      	b.n	800b64a <_free_r+0x26>
 800b694:	d902      	bls.n	800b69c <_free_r+0x78>
 800b696:	230c      	movs	r3, #12
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	e7d6      	b.n	800b64a <_free_r+0x26>
 800b69c:	6825      	ldr	r5, [r4, #0]
 800b69e:	1961      	adds	r1, r4, r5
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	bf04      	itt	eq
 800b6a4:	6819      	ldreq	r1, [r3, #0]
 800b6a6:	685b      	ldreq	r3, [r3, #4]
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	bf04      	itt	eq
 800b6ac:	1949      	addeq	r1, r1, r5
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	6054      	str	r4, [r2, #4]
 800b6b2:	e7ca      	b.n	800b64a <_free_r+0x26>
 800b6b4:	b003      	add	sp, #12
 800b6b6:	bd30      	pop	{r4, r5, pc}
 800b6b8:	20000470 	.word	0x20000470

0800b6bc <sbrk_aligned>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4e0e      	ldr	r6, [pc, #56]	; (800b6f8 <sbrk_aligned+0x3c>)
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	6831      	ldr	r1, [r6, #0]
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	b911      	cbnz	r1, 800b6ce <sbrk_aligned+0x12>
 800b6c8:	f000 f9f2 	bl	800bab0 <_sbrk_r>
 800b6cc:	6030      	str	r0, [r6, #0]
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f000 f9ed 	bl	800bab0 <_sbrk_r>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	d00a      	beq.n	800b6f0 <sbrk_aligned+0x34>
 800b6da:	1cc4      	adds	r4, r0, #3
 800b6dc:	f024 0403 	bic.w	r4, r4, #3
 800b6e0:	42a0      	cmp	r0, r4
 800b6e2:	d007      	beq.n	800b6f4 <sbrk_aligned+0x38>
 800b6e4:	1a21      	subs	r1, r4, r0
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f9e2 	bl	800bab0 <_sbrk_r>
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d101      	bne.n	800b6f4 <sbrk_aligned+0x38>
 800b6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}
 800b6f8:	20000474 	.word	0x20000474

0800b6fc <_malloc_r>:
 800b6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b700:	1ccd      	adds	r5, r1, #3
 800b702:	f025 0503 	bic.w	r5, r5, #3
 800b706:	3508      	adds	r5, #8
 800b708:	2d0c      	cmp	r5, #12
 800b70a:	bf38      	it	cc
 800b70c:	250c      	movcc	r5, #12
 800b70e:	2d00      	cmp	r5, #0
 800b710:	4607      	mov	r7, r0
 800b712:	db01      	blt.n	800b718 <_malloc_r+0x1c>
 800b714:	42a9      	cmp	r1, r5
 800b716:	d905      	bls.n	800b724 <_malloc_r+0x28>
 800b718:	230c      	movs	r3, #12
 800b71a:	603b      	str	r3, [r7, #0]
 800b71c:	2600      	movs	r6, #0
 800b71e:	4630      	mov	r0, r6
 800b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b724:	4e2e      	ldr	r6, [pc, #184]	; (800b7e0 <_malloc_r+0xe4>)
 800b726:	f000 fa2b 	bl	800bb80 <__malloc_lock>
 800b72a:	6833      	ldr	r3, [r6, #0]
 800b72c:	461c      	mov	r4, r3
 800b72e:	bb34      	cbnz	r4, 800b77e <_malloc_r+0x82>
 800b730:	4629      	mov	r1, r5
 800b732:	4638      	mov	r0, r7
 800b734:	f7ff ffc2 	bl	800b6bc <sbrk_aligned>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	4604      	mov	r4, r0
 800b73c:	d14d      	bne.n	800b7da <_malloc_r+0xde>
 800b73e:	6834      	ldr	r4, [r6, #0]
 800b740:	4626      	mov	r6, r4
 800b742:	2e00      	cmp	r6, #0
 800b744:	d140      	bne.n	800b7c8 <_malloc_r+0xcc>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	4631      	mov	r1, r6
 800b74a:	4638      	mov	r0, r7
 800b74c:	eb04 0803 	add.w	r8, r4, r3
 800b750:	f000 f9ae 	bl	800bab0 <_sbrk_r>
 800b754:	4580      	cmp	r8, r0
 800b756:	d13a      	bne.n	800b7ce <_malloc_r+0xd2>
 800b758:	6821      	ldr	r1, [r4, #0]
 800b75a:	3503      	adds	r5, #3
 800b75c:	1a6d      	subs	r5, r5, r1
 800b75e:	f025 0503 	bic.w	r5, r5, #3
 800b762:	3508      	adds	r5, #8
 800b764:	2d0c      	cmp	r5, #12
 800b766:	bf38      	it	cc
 800b768:	250c      	movcc	r5, #12
 800b76a:	4629      	mov	r1, r5
 800b76c:	4638      	mov	r0, r7
 800b76e:	f7ff ffa5 	bl	800b6bc <sbrk_aligned>
 800b772:	3001      	adds	r0, #1
 800b774:	d02b      	beq.n	800b7ce <_malloc_r+0xd2>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	442b      	add	r3, r5
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	e00e      	b.n	800b79c <_malloc_r+0xa0>
 800b77e:	6822      	ldr	r2, [r4, #0]
 800b780:	1b52      	subs	r2, r2, r5
 800b782:	d41e      	bmi.n	800b7c2 <_malloc_r+0xc6>
 800b784:	2a0b      	cmp	r2, #11
 800b786:	d916      	bls.n	800b7b6 <_malloc_r+0xba>
 800b788:	1961      	adds	r1, r4, r5
 800b78a:	42a3      	cmp	r3, r4
 800b78c:	6025      	str	r5, [r4, #0]
 800b78e:	bf18      	it	ne
 800b790:	6059      	strne	r1, [r3, #4]
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	bf08      	it	eq
 800b796:	6031      	streq	r1, [r6, #0]
 800b798:	5162      	str	r2, [r4, r5]
 800b79a:	604b      	str	r3, [r1, #4]
 800b79c:	4638      	mov	r0, r7
 800b79e:	f104 060b 	add.w	r6, r4, #11
 800b7a2:	f000 f9f3 	bl	800bb8c <__malloc_unlock>
 800b7a6:	f026 0607 	bic.w	r6, r6, #7
 800b7aa:	1d23      	adds	r3, r4, #4
 800b7ac:	1af2      	subs	r2, r6, r3
 800b7ae:	d0b6      	beq.n	800b71e <_malloc_r+0x22>
 800b7b0:	1b9b      	subs	r3, r3, r6
 800b7b2:	50a3      	str	r3, [r4, r2]
 800b7b4:	e7b3      	b.n	800b71e <_malloc_r+0x22>
 800b7b6:	6862      	ldr	r2, [r4, #4]
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	bf0c      	ite	eq
 800b7bc:	6032      	streq	r2, [r6, #0]
 800b7be:	605a      	strne	r2, [r3, #4]
 800b7c0:	e7ec      	b.n	800b79c <_malloc_r+0xa0>
 800b7c2:	4623      	mov	r3, r4
 800b7c4:	6864      	ldr	r4, [r4, #4]
 800b7c6:	e7b2      	b.n	800b72e <_malloc_r+0x32>
 800b7c8:	4634      	mov	r4, r6
 800b7ca:	6876      	ldr	r6, [r6, #4]
 800b7cc:	e7b9      	b.n	800b742 <_malloc_r+0x46>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	603b      	str	r3, [r7, #0]
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f000 f9da 	bl	800bb8c <__malloc_unlock>
 800b7d8:	e7a1      	b.n	800b71e <_malloc_r+0x22>
 800b7da:	6025      	str	r5, [r4, #0]
 800b7dc:	e7de      	b.n	800b79c <_malloc_r+0xa0>
 800b7de:	bf00      	nop
 800b7e0:	20000470 	.word	0x20000470

0800b7e4 <__ssputs_r>:
 800b7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e8:	688e      	ldr	r6, [r1, #8]
 800b7ea:	429e      	cmp	r6, r3
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	4690      	mov	r8, r2
 800b7f2:	461f      	mov	r7, r3
 800b7f4:	d838      	bhi.n	800b868 <__ssputs_r+0x84>
 800b7f6:	898a      	ldrh	r2, [r1, #12]
 800b7f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7fc:	d032      	beq.n	800b864 <__ssputs_r+0x80>
 800b7fe:	6825      	ldr	r5, [r4, #0]
 800b800:	6909      	ldr	r1, [r1, #16]
 800b802:	eba5 0901 	sub.w	r9, r5, r1
 800b806:	6965      	ldr	r5, [r4, #20]
 800b808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b80c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b810:	3301      	adds	r3, #1
 800b812:	444b      	add	r3, r9
 800b814:	106d      	asrs	r5, r5, #1
 800b816:	429d      	cmp	r5, r3
 800b818:	bf38      	it	cc
 800b81a:	461d      	movcc	r5, r3
 800b81c:	0553      	lsls	r3, r2, #21
 800b81e:	d531      	bpl.n	800b884 <__ssputs_r+0xa0>
 800b820:	4629      	mov	r1, r5
 800b822:	f7ff ff6b 	bl	800b6fc <_malloc_r>
 800b826:	4606      	mov	r6, r0
 800b828:	b950      	cbnz	r0, 800b840 <__ssputs_r+0x5c>
 800b82a:	230c      	movs	r3, #12
 800b82c:	f8ca 3000 	str.w	r3, [sl]
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b836:	81a3      	strh	r3, [r4, #12]
 800b838:	f04f 30ff 	mov.w	r0, #4294967295
 800b83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b840:	6921      	ldr	r1, [r4, #16]
 800b842:	464a      	mov	r2, r9
 800b844:	f7ff fa08 	bl	800ac58 <memcpy>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b852:	81a3      	strh	r3, [r4, #12]
 800b854:	6126      	str	r6, [r4, #16]
 800b856:	6165      	str	r5, [r4, #20]
 800b858:	444e      	add	r6, r9
 800b85a:	eba5 0509 	sub.w	r5, r5, r9
 800b85e:	6026      	str	r6, [r4, #0]
 800b860:	60a5      	str	r5, [r4, #8]
 800b862:	463e      	mov	r6, r7
 800b864:	42be      	cmp	r6, r7
 800b866:	d900      	bls.n	800b86a <__ssputs_r+0x86>
 800b868:	463e      	mov	r6, r7
 800b86a:	6820      	ldr	r0, [r4, #0]
 800b86c:	4632      	mov	r2, r6
 800b86e:	4641      	mov	r1, r8
 800b870:	f000 f96c 	bl	800bb4c <memmove>
 800b874:	68a3      	ldr	r3, [r4, #8]
 800b876:	1b9b      	subs	r3, r3, r6
 800b878:	60a3      	str	r3, [r4, #8]
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	4433      	add	r3, r6
 800b87e:	6023      	str	r3, [r4, #0]
 800b880:	2000      	movs	r0, #0
 800b882:	e7db      	b.n	800b83c <__ssputs_r+0x58>
 800b884:	462a      	mov	r2, r5
 800b886:	f000 f987 	bl	800bb98 <_realloc_r>
 800b88a:	4606      	mov	r6, r0
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d1e1      	bne.n	800b854 <__ssputs_r+0x70>
 800b890:	6921      	ldr	r1, [r4, #16]
 800b892:	4650      	mov	r0, sl
 800b894:	f7ff fec6 	bl	800b624 <_free_r>
 800b898:	e7c7      	b.n	800b82a <__ssputs_r+0x46>
	...

0800b89c <_svfiprintf_r>:
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	4698      	mov	r8, r3
 800b8a2:	898b      	ldrh	r3, [r1, #12]
 800b8a4:	061b      	lsls	r3, r3, #24
 800b8a6:	b09d      	sub	sp, #116	; 0x74
 800b8a8:	4607      	mov	r7, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	d50e      	bpl.n	800b8ce <_svfiprintf_r+0x32>
 800b8b0:	690b      	ldr	r3, [r1, #16]
 800b8b2:	b963      	cbnz	r3, 800b8ce <_svfiprintf_r+0x32>
 800b8b4:	2140      	movs	r1, #64	; 0x40
 800b8b6:	f7ff ff21 	bl	800b6fc <_malloc_r>
 800b8ba:	6028      	str	r0, [r5, #0]
 800b8bc:	6128      	str	r0, [r5, #16]
 800b8be:	b920      	cbnz	r0, 800b8ca <_svfiprintf_r+0x2e>
 800b8c0:	230c      	movs	r3, #12
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	e0d1      	b.n	800ba6e <_svfiprintf_r+0x1d2>
 800b8ca:	2340      	movs	r3, #64	; 0x40
 800b8cc:	616b      	str	r3, [r5, #20]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d2:	2320      	movs	r3, #32
 800b8d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8dc:	2330      	movs	r3, #48	; 0x30
 800b8de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba88 <_svfiprintf_r+0x1ec>
 800b8e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8e6:	f04f 0901 	mov.w	r9, #1
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	469a      	mov	sl, r3
 800b8ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8f2:	b10a      	cbz	r2, 800b8f8 <_svfiprintf_r+0x5c>
 800b8f4:	2a25      	cmp	r2, #37	; 0x25
 800b8f6:	d1f9      	bne.n	800b8ec <_svfiprintf_r+0x50>
 800b8f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b8fc:	d00b      	beq.n	800b916 <_svfiprintf_r+0x7a>
 800b8fe:	465b      	mov	r3, fp
 800b900:	4622      	mov	r2, r4
 800b902:	4629      	mov	r1, r5
 800b904:	4638      	mov	r0, r7
 800b906:	f7ff ff6d 	bl	800b7e4 <__ssputs_r>
 800b90a:	3001      	adds	r0, #1
 800b90c:	f000 80aa 	beq.w	800ba64 <_svfiprintf_r+0x1c8>
 800b910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b912:	445a      	add	r2, fp
 800b914:	9209      	str	r2, [sp, #36]	; 0x24
 800b916:	f89a 3000 	ldrb.w	r3, [sl]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 80a2 	beq.w	800ba64 <_svfiprintf_r+0x1c8>
 800b920:	2300      	movs	r3, #0
 800b922:	f04f 32ff 	mov.w	r2, #4294967295
 800b926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b92a:	f10a 0a01 	add.w	sl, sl, #1
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	9307      	str	r3, [sp, #28]
 800b932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b936:	931a      	str	r3, [sp, #104]	; 0x68
 800b938:	4654      	mov	r4, sl
 800b93a:	2205      	movs	r2, #5
 800b93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b940:	4851      	ldr	r0, [pc, #324]	; (800ba88 <_svfiprintf_r+0x1ec>)
 800b942:	f7f4 fc5d 	bl	8000200 <memchr>
 800b946:	9a04      	ldr	r2, [sp, #16]
 800b948:	b9d8      	cbnz	r0, 800b982 <_svfiprintf_r+0xe6>
 800b94a:	06d0      	lsls	r0, r2, #27
 800b94c:	bf44      	itt	mi
 800b94e:	2320      	movmi	r3, #32
 800b950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b954:	0711      	lsls	r1, r2, #28
 800b956:	bf44      	itt	mi
 800b958:	232b      	movmi	r3, #43	; 0x2b
 800b95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b95e:	f89a 3000 	ldrb.w	r3, [sl]
 800b962:	2b2a      	cmp	r3, #42	; 0x2a
 800b964:	d015      	beq.n	800b992 <_svfiprintf_r+0xf6>
 800b966:	9a07      	ldr	r2, [sp, #28]
 800b968:	4654      	mov	r4, sl
 800b96a:	2000      	movs	r0, #0
 800b96c:	f04f 0c0a 	mov.w	ip, #10
 800b970:	4621      	mov	r1, r4
 800b972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b976:	3b30      	subs	r3, #48	; 0x30
 800b978:	2b09      	cmp	r3, #9
 800b97a:	d94e      	bls.n	800ba1a <_svfiprintf_r+0x17e>
 800b97c:	b1b0      	cbz	r0, 800b9ac <_svfiprintf_r+0x110>
 800b97e:	9207      	str	r2, [sp, #28]
 800b980:	e014      	b.n	800b9ac <_svfiprintf_r+0x110>
 800b982:	eba0 0308 	sub.w	r3, r0, r8
 800b986:	fa09 f303 	lsl.w	r3, r9, r3
 800b98a:	4313      	orrs	r3, r2
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	46a2      	mov	sl, r4
 800b990:	e7d2      	b.n	800b938 <_svfiprintf_r+0x9c>
 800b992:	9b03      	ldr	r3, [sp, #12]
 800b994:	1d19      	adds	r1, r3, #4
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	9103      	str	r1, [sp, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	bfbb      	ittet	lt
 800b99e:	425b      	neglt	r3, r3
 800b9a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b9a4:	9307      	strge	r3, [sp, #28]
 800b9a6:	9307      	strlt	r3, [sp, #28]
 800b9a8:	bfb8      	it	lt
 800b9aa:	9204      	strlt	r2, [sp, #16]
 800b9ac:	7823      	ldrb	r3, [r4, #0]
 800b9ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b9b0:	d10c      	bne.n	800b9cc <_svfiprintf_r+0x130>
 800b9b2:	7863      	ldrb	r3, [r4, #1]
 800b9b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b9b6:	d135      	bne.n	800ba24 <_svfiprintf_r+0x188>
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	1d1a      	adds	r2, r3, #4
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	9203      	str	r2, [sp, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	bfb8      	it	lt
 800b9c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9c8:	3402      	adds	r4, #2
 800b9ca:	9305      	str	r3, [sp, #20]
 800b9cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba98 <_svfiprintf_r+0x1fc>
 800b9d0:	7821      	ldrb	r1, [r4, #0]
 800b9d2:	2203      	movs	r2, #3
 800b9d4:	4650      	mov	r0, sl
 800b9d6:	f7f4 fc13 	bl	8000200 <memchr>
 800b9da:	b140      	cbz	r0, 800b9ee <_svfiprintf_r+0x152>
 800b9dc:	2340      	movs	r3, #64	; 0x40
 800b9de:	eba0 000a 	sub.w	r0, r0, sl
 800b9e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b9e6:	9b04      	ldr	r3, [sp, #16]
 800b9e8:	4303      	orrs	r3, r0
 800b9ea:	3401      	adds	r4, #1
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f2:	4826      	ldr	r0, [pc, #152]	; (800ba8c <_svfiprintf_r+0x1f0>)
 800b9f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9f8:	2206      	movs	r2, #6
 800b9fa:	f7f4 fc01 	bl	8000200 <memchr>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d038      	beq.n	800ba74 <_svfiprintf_r+0x1d8>
 800ba02:	4b23      	ldr	r3, [pc, #140]	; (800ba90 <_svfiprintf_r+0x1f4>)
 800ba04:	bb1b      	cbnz	r3, 800ba4e <_svfiprintf_r+0x1b2>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	3307      	adds	r3, #7
 800ba0a:	f023 0307 	bic.w	r3, r3, #7
 800ba0e:	3308      	adds	r3, #8
 800ba10:	9303      	str	r3, [sp, #12]
 800ba12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba14:	4433      	add	r3, r6
 800ba16:	9309      	str	r3, [sp, #36]	; 0x24
 800ba18:	e767      	b.n	800b8ea <_svfiprintf_r+0x4e>
 800ba1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba1e:	460c      	mov	r4, r1
 800ba20:	2001      	movs	r0, #1
 800ba22:	e7a5      	b.n	800b970 <_svfiprintf_r+0xd4>
 800ba24:	2300      	movs	r3, #0
 800ba26:	3401      	adds	r4, #1
 800ba28:	9305      	str	r3, [sp, #20]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	f04f 0c0a 	mov.w	ip, #10
 800ba30:	4620      	mov	r0, r4
 800ba32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba36:	3a30      	subs	r2, #48	; 0x30
 800ba38:	2a09      	cmp	r2, #9
 800ba3a:	d903      	bls.n	800ba44 <_svfiprintf_r+0x1a8>
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d0c5      	beq.n	800b9cc <_svfiprintf_r+0x130>
 800ba40:	9105      	str	r1, [sp, #20]
 800ba42:	e7c3      	b.n	800b9cc <_svfiprintf_r+0x130>
 800ba44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba48:	4604      	mov	r4, r0
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e7f0      	b.n	800ba30 <_svfiprintf_r+0x194>
 800ba4e:	ab03      	add	r3, sp, #12
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	462a      	mov	r2, r5
 800ba54:	4b0f      	ldr	r3, [pc, #60]	; (800ba94 <_svfiprintf_r+0x1f8>)
 800ba56:	a904      	add	r1, sp, #16
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f7fc f9dd 	bl	8007e18 <_printf_float>
 800ba5e:	1c42      	adds	r2, r0, #1
 800ba60:	4606      	mov	r6, r0
 800ba62:	d1d6      	bne.n	800ba12 <_svfiprintf_r+0x176>
 800ba64:	89ab      	ldrh	r3, [r5, #12]
 800ba66:	065b      	lsls	r3, r3, #25
 800ba68:	f53f af2c 	bmi.w	800b8c4 <_svfiprintf_r+0x28>
 800ba6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba6e:	b01d      	add	sp, #116	; 0x74
 800ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba74:	ab03      	add	r3, sp, #12
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	462a      	mov	r2, r5
 800ba7a:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <_svfiprintf_r+0x1f8>)
 800ba7c:	a904      	add	r1, sp, #16
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f7fc fc6e 	bl	8008360 <_printf_i>
 800ba84:	e7eb      	b.n	800ba5e <_svfiprintf_r+0x1c2>
 800ba86:	bf00      	nop
 800ba88:	0800cfb4 	.word	0x0800cfb4
 800ba8c:	0800cfbe 	.word	0x0800cfbe
 800ba90:	08007e19 	.word	0x08007e19
 800ba94:	0800b7e5 	.word	0x0800b7e5
 800ba98:	0800cfba 	.word	0x0800cfba
 800ba9c:	00000000 	.word	0x00000000

0800baa0 <nan>:
 800baa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800baa8 <nan+0x8>
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	00000000 	.word	0x00000000
 800baac:	7ff80000 	.word	0x7ff80000

0800bab0 <_sbrk_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4d06      	ldr	r5, [pc, #24]	; (800bacc <_sbrk_r+0x1c>)
 800bab4:	2300      	movs	r3, #0
 800bab6:	4604      	mov	r4, r0
 800bab8:	4608      	mov	r0, r1
 800baba:	602b      	str	r3, [r5, #0]
 800babc:	f7f6 fe00 	bl	80026c0 <_sbrk>
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	d102      	bne.n	800baca <_sbrk_r+0x1a>
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	b103      	cbz	r3, 800baca <_sbrk_r+0x1a>
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	bd38      	pop	{r3, r4, r5, pc}
 800bacc:	20000478 	.word	0x20000478

0800bad0 <__ascii_wctomb>:
 800bad0:	b149      	cbz	r1, 800bae6 <__ascii_wctomb+0x16>
 800bad2:	2aff      	cmp	r2, #255	; 0xff
 800bad4:	bf85      	ittet	hi
 800bad6:	238a      	movhi	r3, #138	; 0x8a
 800bad8:	6003      	strhi	r3, [r0, #0]
 800bada:	700a      	strbls	r2, [r1, #0]
 800badc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bae0:	bf98      	it	ls
 800bae2:	2001      	movls	r0, #1
 800bae4:	4770      	bx	lr
 800bae6:	4608      	mov	r0, r1
 800bae8:	4770      	bx	lr
	...

0800baec <__assert_func>:
 800baec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baee:	4614      	mov	r4, r2
 800baf0:	461a      	mov	r2, r3
 800baf2:	4b09      	ldr	r3, [pc, #36]	; (800bb18 <__assert_func+0x2c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4605      	mov	r5, r0
 800baf8:	68d8      	ldr	r0, [r3, #12]
 800bafa:	b14c      	cbz	r4, 800bb10 <__assert_func+0x24>
 800bafc:	4b07      	ldr	r3, [pc, #28]	; (800bb1c <__assert_func+0x30>)
 800bafe:	9100      	str	r1, [sp, #0]
 800bb00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb04:	4906      	ldr	r1, [pc, #24]	; (800bb20 <__assert_func+0x34>)
 800bb06:	462b      	mov	r3, r5
 800bb08:	f000 f80e 	bl	800bb28 <fiprintf>
 800bb0c:	f000 fa8c 	bl	800c028 <abort>
 800bb10:	4b04      	ldr	r3, [pc, #16]	; (800bb24 <__assert_func+0x38>)
 800bb12:	461c      	mov	r4, r3
 800bb14:	e7f3      	b.n	800bafe <__assert_func+0x12>
 800bb16:	bf00      	nop
 800bb18:	2000001c 	.word	0x2000001c
 800bb1c:	0800cfc5 	.word	0x0800cfc5
 800bb20:	0800cfd2 	.word	0x0800cfd2
 800bb24:	0800d000 	.word	0x0800d000

0800bb28 <fiprintf>:
 800bb28:	b40e      	push	{r1, r2, r3}
 800bb2a:	b503      	push	{r0, r1, lr}
 800bb2c:	4601      	mov	r1, r0
 800bb2e:	ab03      	add	r3, sp, #12
 800bb30:	4805      	ldr	r0, [pc, #20]	; (800bb48 <fiprintf+0x20>)
 800bb32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb36:	6800      	ldr	r0, [r0, #0]
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	f000 f885 	bl	800bc48 <_vfiprintf_r>
 800bb3e:	b002      	add	sp, #8
 800bb40:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb44:	b003      	add	sp, #12
 800bb46:	4770      	bx	lr
 800bb48:	2000001c 	.word	0x2000001c

0800bb4c <memmove>:
 800bb4c:	4288      	cmp	r0, r1
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	eb01 0402 	add.w	r4, r1, r2
 800bb54:	d902      	bls.n	800bb5c <memmove+0x10>
 800bb56:	4284      	cmp	r4, r0
 800bb58:	4623      	mov	r3, r4
 800bb5a:	d807      	bhi.n	800bb6c <memmove+0x20>
 800bb5c:	1e43      	subs	r3, r0, #1
 800bb5e:	42a1      	cmp	r1, r4
 800bb60:	d008      	beq.n	800bb74 <memmove+0x28>
 800bb62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb6a:	e7f8      	b.n	800bb5e <memmove+0x12>
 800bb6c:	4402      	add	r2, r0
 800bb6e:	4601      	mov	r1, r0
 800bb70:	428a      	cmp	r2, r1
 800bb72:	d100      	bne.n	800bb76 <memmove+0x2a>
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb7e:	e7f7      	b.n	800bb70 <memmove+0x24>

0800bb80 <__malloc_lock>:
 800bb80:	4801      	ldr	r0, [pc, #4]	; (800bb88 <__malloc_lock+0x8>)
 800bb82:	f000 bc11 	b.w	800c3a8 <__retarget_lock_acquire_recursive>
 800bb86:	bf00      	nop
 800bb88:	2000047c 	.word	0x2000047c

0800bb8c <__malloc_unlock>:
 800bb8c:	4801      	ldr	r0, [pc, #4]	; (800bb94 <__malloc_unlock+0x8>)
 800bb8e:	f000 bc0c 	b.w	800c3aa <__retarget_lock_release_recursive>
 800bb92:	bf00      	nop
 800bb94:	2000047c 	.word	0x2000047c

0800bb98 <_realloc_r>:
 800bb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	4614      	mov	r4, r2
 800bba0:	460e      	mov	r6, r1
 800bba2:	b921      	cbnz	r1, 800bbae <_realloc_r+0x16>
 800bba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bba8:	4611      	mov	r1, r2
 800bbaa:	f7ff bda7 	b.w	800b6fc <_malloc_r>
 800bbae:	b92a      	cbnz	r2, 800bbbc <_realloc_r+0x24>
 800bbb0:	f7ff fd38 	bl	800b624 <_free_r>
 800bbb4:	4625      	mov	r5, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbbc:	f000 fc5c 	bl	800c478 <_malloc_usable_size_r>
 800bbc0:	4284      	cmp	r4, r0
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	d802      	bhi.n	800bbcc <_realloc_r+0x34>
 800bbc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbca:	d812      	bhi.n	800bbf2 <_realloc_r+0x5a>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4640      	mov	r0, r8
 800bbd0:	f7ff fd94 	bl	800b6fc <_malloc_r>
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d0ed      	beq.n	800bbb6 <_realloc_r+0x1e>
 800bbda:	42bc      	cmp	r4, r7
 800bbdc:	4622      	mov	r2, r4
 800bbde:	4631      	mov	r1, r6
 800bbe0:	bf28      	it	cs
 800bbe2:	463a      	movcs	r2, r7
 800bbe4:	f7ff f838 	bl	800ac58 <memcpy>
 800bbe8:	4631      	mov	r1, r6
 800bbea:	4640      	mov	r0, r8
 800bbec:	f7ff fd1a 	bl	800b624 <_free_r>
 800bbf0:	e7e1      	b.n	800bbb6 <_realloc_r+0x1e>
 800bbf2:	4635      	mov	r5, r6
 800bbf4:	e7df      	b.n	800bbb6 <_realloc_r+0x1e>

0800bbf6 <__sfputc_r>:
 800bbf6:	6893      	ldr	r3, [r2, #8]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	b410      	push	{r4}
 800bbfe:	6093      	str	r3, [r2, #8]
 800bc00:	da08      	bge.n	800bc14 <__sfputc_r+0x1e>
 800bc02:	6994      	ldr	r4, [r2, #24]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	db01      	blt.n	800bc0c <__sfputc_r+0x16>
 800bc08:	290a      	cmp	r1, #10
 800bc0a:	d103      	bne.n	800bc14 <__sfputc_r+0x1e>
 800bc0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc10:	f000 b94a 	b.w	800bea8 <__swbuf_r>
 800bc14:	6813      	ldr	r3, [r2, #0]
 800bc16:	1c58      	adds	r0, r3, #1
 800bc18:	6010      	str	r0, [r2, #0]
 800bc1a:	7019      	strb	r1, [r3, #0]
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <__sfputs_r>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	4606      	mov	r6, r0
 800bc28:	460f      	mov	r7, r1
 800bc2a:	4614      	mov	r4, r2
 800bc2c:	18d5      	adds	r5, r2, r3
 800bc2e:	42ac      	cmp	r4, r5
 800bc30:	d101      	bne.n	800bc36 <__sfputs_r+0x12>
 800bc32:	2000      	movs	r0, #0
 800bc34:	e007      	b.n	800bc46 <__sfputs_r+0x22>
 800bc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3a:	463a      	mov	r2, r7
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff ffda 	bl	800bbf6 <__sfputc_r>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d1f3      	bne.n	800bc2e <__sfputs_r+0xa>
 800bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc48 <_vfiprintf_r>:
 800bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4c:	460d      	mov	r5, r1
 800bc4e:	b09d      	sub	sp, #116	; 0x74
 800bc50:	4614      	mov	r4, r2
 800bc52:	4698      	mov	r8, r3
 800bc54:	4606      	mov	r6, r0
 800bc56:	b118      	cbz	r0, 800bc60 <_vfiprintf_r+0x18>
 800bc58:	6983      	ldr	r3, [r0, #24]
 800bc5a:	b90b      	cbnz	r3, 800bc60 <_vfiprintf_r+0x18>
 800bc5c:	f000 fb06 	bl	800c26c <__sinit>
 800bc60:	4b89      	ldr	r3, [pc, #548]	; (800be88 <_vfiprintf_r+0x240>)
 800bc62:	429d      	cmp	r5, r3
 800bc64:	d11b      	bne.n	800bc9e <_vfiprintf_r+0x56>
 800bc66:	6875      	ldr	r5, [r6, #4]
 800bc68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc6a:	07d9      	lsls	r1, r3, #31
 800bc6c:	d405      	bmi.n	800bc7a <_vfiprintf_r+0x32>
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	059a      	lsls	r2, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_vfiprintf_r+0x32>
 800bc74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc76:	f000 fb97 	bl	800c3a8 <__retarget_lock_acquire_recursive>
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	071b      	lsls	r3, r3, #28
 800bc7e:	d501      	bpl.n	800bc84 <_vfiprintf_r+0x3c>
 800bc80:	692b      	ldr	r3, [r5, #16]
 800bc82:	b9eb      	cbnz	r3, 800bcc0 <_vfiprintf_r+0x78>
 800bc84:	4629      	mov	r1, r5
 800bc86:	4630      	mov	r0, r6
 800bc88:	f000 f960 	bl	800bf4c <__swsetup_r>
 800bc8c:	b1c0      	cbz	r0, 800bcc0 <_vfiprintf_r+0x78>
 800bc8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc90:	07dc      	lsls	r4, r3, #31
 800bc92:	d50e      	bpl.n	800bcb2 <_vfiprintf_r+0x6a>
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	b01d      	add	sp, #116	; 0x74
 800bc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	4b7b      	ldr	r3, [pc, #492]	; (800be8c <_vfiprintf_r+0x244>)
 800bca0:	429d      	cmp	r5, r3
 800bca2:	d101      	bne.n	800bca8 <_vfiprintf_r+0x60>
 800bca4:	68b5      	ldr	r5, [r6, #8]
 800bca6:	e7df      	b.n	800bc68 <_vfiprintf_r+0x20>
 800bca8:	4b79      	ldr	r3, [pc, #484]	; (800be90 <_vfiprintf_r+0x248>)
 800bcaa:	429d      	cmp	r5, r3
 800bcac:	bf08      	it	eq
 800bcae:	68f5      	ldreq	r5, [r6, #12]
 800bcb0:	e7da      	b.n	800bc68 <_vfiprintf_r+0x20>
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	0598      	lsls	r0, r3, #22
 800bcb6:	d4ed      	bmi.n	800bc94 <_vfiprintf_r+0x4c>
 800bcb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcba:	f000 fb76 	bl	800c3aa <__retarget_lock_release_recursive>
 800bcbe:	e7e9      	b.n	800bc94 <_vfiprintf_r+0x4c>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc4:	2320      	movs	r3, #32
 800bcc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcce:	2330      	movs	r3, #48	; 0x30
 800bcd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be94 <_vfiprintf_r+0x24c>
 800bcd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcd8:	f04f 0901 	mov.w	r9, #1
 800bcdc:	4623      	mov	r3, r4
 800bcde:	469a      	mov	sl, r3
 800bce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bce4:	b10a      	cbz	r2, 800bcea <_vfiprintf_r+0xa2>
 800bce6:	2a25      	cmp	r2, #37	; 0x25
 800bce8:	d1f9      	bne.n	800bcde <_vfiprintf_r+0x96>
 800bcea:	ebba 0b04 	subs.w	fp, sl, r4
 800bcee:	d00b      	beq.n	800bd08 <_vfiprintf_r+0xc0>
 800bcf0:	465b      	mov	r3, fp
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f7ff ff94 	bl	800bc24 <__sfputs_r>
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	f000 80aa 	beq.w	800be56 <_vfiprintf_r+0x20e>
 800bd02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd04:	445a      	add	r2, fp
 800bd06:	9209      	str	r2, [sp, #36]	; 0x24
 800bd08:	f89a 3000 	ldrb.w	r3, [sl]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 80a2 	beq.w	800be56 <_vfiprintf_r+0x20e>
 800bd12:	2300      	movs	r3, #0
 800bd14:	f04f 32ff 	mov.w	r2, #4294967295
 800bd18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd1c:	f10a 0a01 	add.w	sl, sl, #1
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	9307      	str	r3, [sp, #28]
 800bd24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd28:	931a      	str	r3, [sp, #104]	; 0x68
 800bd2a:	4654      	mov	r4, sl
 800bd2c:	2205      	movs	r2, #5
 800bd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd32:	4858      	ldr	r0, [pc, #352]	; (800be94 <_vfiprintf_r+0x24c>)
 800bd34:	f7f4 fa64 	bl	8000200 <memchr>
 800bd38:	9a04      	ldr	r2, [sp, #16]
 800bd3a:	b9d8      	cbnz	r0, 800bd74 <_vfiprintf_r+0x12c>
 800bd3c:	06d1      	lsls	r1, r2, #27
 800bd3e:	bf44      	itt	mi
 800bd40:	2320      	movmi	r3, #32
 800bd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd46:	0713      	lsls	r3, r2, #28
 800bd48:	bf44      	itt	mi
 800bd4a:	232b      	movmi	r3, #43	; 0x2b
 800bd4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd50:	f89a 3000 	ldrb.w	r3, [sl]
 800bd54:	2b2a      	cmp	r3, #42	; 0x2a
 800bd56:	d015      	beq.n	800bd84 <_vfiprintf_r+0x13c>
 800bd58:	9a07      	ldr	r2, [sp, #28]
 800bd5a:	4654      	mov	r4, sl
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f04f 0c0a 	mov.w	ip, #10
 800bd62:	4621      	mov	r1, r4
 800bd64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd68:	3b30      	subs	r3, #48	; 0x30
 800bd6a:	2b09      	cmp	r3, #9
 800bd6c:	d94e      	bls.n	800be0c <_vfiprintf_r+0x1c4>
 800bd6e:	b1b0      	cbz	r0, 800bd9e <_vfiprintf_r+0x156>
 800bd70:	9207      	str	r2, [sp, #28]
 800bd72:	e014      	b.n	800bd9e <_vfiprintf_r+0x156>
 800bd74:	eba0 0308 	sub.w	r3, r0, r8
 800bd78:	fa09 f303 	lsl.w	r3, r9, r3
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	9304      	str	r3, [sp, #16]
 800bd80:	46a2      	mov	sl, r4
 800bd82:	e7d2      	b.n	800bd2a <_vfiprintf_r+0xe2>
 800bd84:	9b03      	ldr	r3, [sp, #12]
 800bd86:	1d19      	adds	r1, r3, #4
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	9103      	str	r1, [sp, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	bfbb      	ittet	lt
 800bd90:	425b      	neglt	r3, r3
 800bd92:	f042 0202 	orrlt.w	r2, r2, #2
 800bd96:	9307      	strge	r3, [sp, #28]
 800bd98:	9307      	strlt	r3, [sp, #28]
 800bd9a:	bfb8      	it	lt
 800bd9c:	9204      	strlt	r2, [sp, #16]
 800bd9e:	7823      	ldrb	r3, [r4, #0]
 800bda0:	2b2e      	cmp	r3, #46	; 0x2e
 800bda2:	d10c      	bne.n	800bdbe <_vfiprintf_r+0x176>
 800bda4:	7863      	ldrb	r3, [r4, #1]
 800bda6:	2b2a      	cmp	r3, #42	; 0x2a
 800bda8:	d135      	bne.n	800be16 <_vfiprintf_r+0x1ce>
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	1d1a      	adds	r2, r3, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	9203      	str	r2, [sp, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	bfb8      	it	lt
 800bdb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdba:	3402      	adds	r4, #2
 800bdbc:	9305      	str	r3, [sp, #20]
 800bdbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bea4 <_vfiprintf_r+0x25c>
 800bdc2:	7821      	ldrb	r1, [r4, #0]
 800bdc4:	2203      	movs	r2, #3
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	f7f4 fa1a 	bl	8000200 <memchr>
 800bdcc:	b140      	cbz	r0, 800bde0 <_vfiprintf_r+0x198>
 800bdce:	2340      	movs	r3, #64	; 0x40
 800bdd0:	eba0 000a 	sub.w	r0, r0, sl
 800bdd4:	fa03 f000 	lsl.w	r0, r3, r0
 800bdd8:	9b04      	ldr	r3, [sp, #16]
 800bdda:	4303      	orrs	r3, r0
 800bddc:	3401      	adds	r4, #1
 800bdde:	9304      	str	r3, [sp, #16]
 800bde0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde4:	482c      	ldr	r0, [pc, #176]	; (800be98 <_vfiprintf_r+0x250>)
 800bde6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdea:	2206      	movs	r2, #6
 800bdec:	f7f4 fa08 	bl	8000200 <memchr>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d03f      	beq.n	800be74 <_vfiprintf_r+0x22c>
 800bdf4:	4b29      	ldr	r3, [pc, #164]	; (800be9c <_vfiprintf_r+0x254>)
 800bdf6:	bb1b      	cbnz	r3, 800be40 <_vfiprintf_r+0x1f8>
 800bdf8:	9b03      	ldr	r3, [sp, #12]
 800bdfa:	3307      	adds	r3, #7
 800bdfc:	f023 0307 	bic.w	r3, r3, #7
 800be00:	3308      	adds	r3, #8
 800be02:	9303      	str	r3, [sp, #12]
 800be04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be06:	443b      	add	r3, r7
 800be08:	9309      	str	r3, [sp, #36]	; 0x24
 800be0a:	e767      	b.n	800bcdc <_vfiprintf_r+0x94>
 800be0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be10:	460c      	mov	r4, r1
 800be12:	2001      	movs	r0, #1
 800be14:	e7a5      	b.n	800bd62 <_vfiprintf_r+0x11a>
 800be16:	2300      	movs	r3, #0
 800be18:	3401      	adds	r4, #1
 800be1a:	9305      	str	r3, [sp, #20]
 800be1c:	4619      	mov	r1, r3
 800be1e:	f04f 0c0a 	mov.w	ip, #10
 800be22:	4620      	mov	r0, r4
 800be24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be28:	3a30      	subs	r2, #48	; 0x30
 800be2a:	2a09      	cmp	r2, #9
 800be2c:	d903      	bls.n	800be36 <_vfiprintf_r+0x1ee>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0c5      	beq.n	800bdbe <_vfiprintf_r+0x176>
 800be32:	9105      	str	r1, [sp, #20]
 800be34:	e7c3      	b.n	800bdbe <_vfiprintf_r+0x176>
 800be36:	fb0c 2101 	mla	r1, ip, r1, r2
 800be3a:	4604      	mov	r4, r0
 800be3c:	2301      	movs	r3, #1
 800be3e:	e7f0      	b.n	800be22 <_vfiprintf_r+0x1da>
 800be40:	ab03      	add	r3, sp, #12
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	462a      	mov	r2, r5
 800be46:	4b16      	ldr	r3, [pc, #88]	; (800bea0 <_vfiprintf_r+0x258>)
 800be48:	a904      	add	r1, sp, #16
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7fb ffe4 	bl	8007e18 <_printf_float>
 800be50:	4607      	mov	r7, r0
 800be52:	1c78      	adds	r0, r7, #1
 800be54:	d1d6      	bne.n	800be04 <_vfiprintf_r+0x1bc>
 800be56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be58:	07d9      	lsls	r1, r3, #31
 800be5a:	d405      	bmi.n	800be68 <_vfiprintf_r+0x220>
 800be5c:	89ab      	ldrh	r3, [r5, #12]
 800be5e:	059a      	lsls	r2, r3, #22
 800be60:	d402      	bmi.n	800be68 <_vfiprintf_r+0x220>
 800be62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be64:	f000 faa1 	bl	800c3aa <__retarget_lock_release_recursive>
 800be68:	89ab      	ldrh	r3, [r5, #12]
 800be6a:	065b      	lsls	r3, r3, #25
 800be6c:	f53f af12 	bmi.w	800bc94 <_vfiprintf_r+0x4c>
 800be70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be72:	e711      	b.n	800bc98 <_vfiprintf_r+0x50>
 800be74:	ab03      	add	r3, sp, #12
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	462a      	mov	r2, r5
 800be7a:	4b09      	ldr	r3, [pc, #36]	; (800bea0 <_vfiprintf_r+0x258>)
 800be7c:	a904      	add	r1, sp, #16
 800be7e:	4630      	mov	r0, r6
 800be80:	f7fc fa6e 	bl	8008360 <_printf_i>
 800be84:	e7e4      	b.n	800be50 <_vfiprintf_r+0x208>
 800be86:	bf00      	nop
 800be88:	0800d024 	.word	0x0800d024
 800be8c:	0800d044 	.word	0x0800d044
 800be90:	0800d004 	.word	0x0800d004
 800be94:	0800cfb4 	.word	0x0800cfb4
 800be98:	0800cfbe 	.word	0x0800cfbe
 800be9c:	08007e19 	.word	0x08007e19
 800bea0:	0800bc25 	.word	0x0800bc25
 800bea4:	0800cfba 	.word	0x0800cfba

0800bea8 <__swbuf_r>:
 800bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beaa:	460e      	mov	r6, r1
 800beac:	4614      	mov	r4, r2
 800beae:	4605      	mov	r5, r0
 800beb0:	b118      	cbz	r0, 800beba <__swbuf_r+0x12>
 800beb2:	6983      	ldr	r3, [r0, #24]
 800beb4:	b90b      	cbnz	r3, 800beba <__swbuf_r+0x12>
 800beb6:	f000 f9d9 	bl	800c26c <__sinit>
 800beba:	4b21      	ldr	r3, [pc, #132]	; (800bf40 <__swbuf_r+0x98>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	d12b      	bne.n	800bf18 <__swbuf_r+0x70>
 800bec0:	686c      	ldr	r4, [r5, #4]
 800bec2:	69a3      	ldr	r3, [r4, #24]
 800bec4:	60a3      	str	r3, [r4, #8]
 800bec6:	89a3      	ldrh	r3, [r4, #12]
 800bec8:	071a      	lsls	r2, r3, #28
 800beca:	d52f      	bpl.n	800bf2c <__swbuf_r+0x84>
 800becc:	6923      	ldr	r3, [r4, #16]
 800bece:	b36b      	cbz	r3, 800bf2c <__swbuf_r+0x84>
 800bed0:	6923      	ldr	r3, [r4, #16]
 800bed2:	6820      	ldr	r0, [r4, #0]
 800bed4:	1ac0      	subs	r0, r0, r3
 800bed6:	6963      	ldr	r3, [r4, #20]
 800bed8:	b2f6      	uxtb	r6, r6
 800beda:	4283      	cmp	r3, r0
 800bedc:	4637      	mov	r7, r6
 800bede:	dc04      	bgt.n	800beea <__swbuf_r+0x42>
 800bee0:	4621      	mov	r1, r4
 800bee2:	4628      	mov	r0, r5
 800bee4:	f000 f92e 	bl	800c144 <_fflush_r>
 800bee8:	bb30      	cbnz	r0, 800bf38 <__swbuf_r+0x90>
 800beea:	68a3      	ldr	r3, [r4, #8]
 800beec:	3b01      	subs	r3, #1
 800beee:	60a3      	str	r3, [r4, #8]
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	6022      	str	r2, [r4, #0]
 800bef6:	701e      	strb	r6, [r3, #0]
 800bef8:	6963      	ldr	r3, [r4, #20]
 800befa:	3001      	adds	r0, #1
 800befc:	4283      	cmp	r3, r0
 800befe:	d004      	beq.n	800bf0a <__swbuf_r+0x62>
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	07db      	lsls	r3, r3, #31
 800bf04:	d506      	bpl.n	800bf14 <__swbuf_r+0x6c>
 800bf06:	2e0a      	cmp	r6, #10
 800bf08:	d104      	bne.n	800bf14 <__swbuf_r+0x6c>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f000 f919 	bl	800c144 <_fflush_r>
 800bf12:	b988      	cbnz	r0, 800bf38 <__swbuf_r+0x90>
 800bf14:	4638      	mov	r0, r7
 800bf16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf18:	4b0a      	ldr	r3, [pc, #40]	; (800bf44 <__swbuf_r+0x9c>)
 800bf1a:	429c      	cmp	r4, r3
 800bf1c:	d101      	bne.n	800bf22 <__swbuf_r+0x7a>
 800bf1e:	68ac      	ldr	r4, [r5, #8]
 800bf20:	e7cf      	b.n	800bec2 <__swbuf_r+0x1a>
 800bf22:	4b09      	ldr	r3, [pc, #36]	; (800bf48 <__swbuf_r+0xa0>)
 800bf24:	429c      	cmp	r4, r3
 800bf26:	bf08      	it	eq
 800bf28:	68ec      	ldreq	r4, [r5, #12]
 800bf2a:	e7ca      	b.n	800bec2 <__swbuf_r+0x1a>
 800bf2c:	4621      	mov	r1, r4
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f000 f80c 	bl	800bf4c <__swsetup_r>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d0cb      	beq.n	800bed0 <__swbuf_r+0x28>
 800bf38:	f04f 37ff 	mov.w	r7, #4294967295
 800bf3c:	e7ea      	b.n	800bf14 <__swbuf_r+0x6c>
 800bf3e:	bf00      	nop
 800bf40:	0800d024 	.word	0x0800d024
 800bf44:	0800d044 	.word	0x0800d044
 800bf48:	0800d004 	.word	0x0800d004

0800bf4c <__swsetup_r>:
 800bf4c:	4b32      	ldr	r3, [pc, #200]	; (800c018 <__swsetup_r+0xcc>)
 800bf4e:	b570      	push	{r4, r5, r6, lr}
 800bf50:	681d      	ldr	r5, [r3, #0]
 800bf52:	4606      	mov	r6, r0
 800bf54:	460c      	mov	r4, r1
 800bf56:	b125      	cbz	r5, 800bf62 <__swsetup_r+0x16>
 800bf58:	69ab      	ldr	r3, [r5, #24]
 800bf5a:	b913      	cbnz	r3, 800bf62 <__swsetup_r+0x16>
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	f000 f985 	bl	800c26c <__sinit>
 800bf62:	4b2e      	ldr	r3, [pc, #184]	; (800c01c <__swsetup_r+0xd0>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	d10f      	bne.n	800bf88 <__swsetup_r+0x3c>
 800bf68:	686c      	ldr	r4, [r5, #4]
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf70:	0719      	lsls	r1, r3, #28
 800bf72:	d42c      	bmi.n	800bfce <__swsetup_r+0x82>
 800bf74:	06dd      	lsls	r5, r3, #27
 800bf76:	d411      	bmi.n	800bf9c <__swsetup_r+0x50>
 800bf78:	2309      	movs	r3, #9
 800bf7a:	6033      	str	r3, [r6, #0]
 800bf7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	f04f 30ff 	mov.w	r0, #4294967295
 800bf86:	e03e      	b.n	800c006 <__swsetup_r+0xba>
 800bf88:	4b25      	ldr	r3, [pc, #148]	; (800c020 <__swsetup_r+0xd4>)
 800bf8a:	429c      	cmp	r4, r3
 800bf8c:	d101      	bne.n	800bf92 <__swsetup_r+0x46>
 800bf8e:	68ac      	ldr	r4, [r5, #8]
 800bf90:	e7eb      	b.n	800bf6a <__swsetup_r+0x1e>
 800bf92:	4b24      	ldr	r3, [pc, #144]	; (800c024 <__swsetup_r+0xd8>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	bf08      	it	eq
 800bf98:	68ec      	ldreq	r4, [r5, #12]
 800bf9a:	e7e6      	b.n	800bf6a <__swsetup_r+0x1e>
 800bf9c:	0758      	lsls	r0, r3, #29
 800bf9e:	d512      	bpl.n	800bfc6 <__swsetup_r+0x7a>
 800bfa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfa2:	b141      	cbz	r1, 800bfb6 <__swsetup_r+0x6a>
 800bfa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	d002      	beq.n	800bfb2 <__swsetup_r+0x66>
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff fb39 	bl	800b624 <_free_r>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	6363      	str	r3, [r4, #52]	; 0x34
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfbc:	81a3      	strh	r3, [r4, #12]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	6063      	str	r3, [r4, #4]
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	f043 0308 	orr.w	r3, r3, #8
 800bfcc:	81a3      	strh	r3, [r4, #12]
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	b94b      	cbnz	r3, 800bfe6 <__swsetup_r+0x9a>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfdc:	d003      	beq.n	800bfe6 <__swsetup_r+0x9a>
 800bfde:	4621      	mov	r1, r4
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f000 fa09 	bl	800c3f8 <__smakebuf_r>
 800bfe6:	89a0      	ldrh	r0, [r4, #12]
 800bfe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfec:	f010 0301 	ands.w	r3, r0, #1
 800bff0:	d00a      	beq.n	800c008 <__swsetup_r+0xbc>
 800bff2:	2300      	movs	r3, #0
 800bff4:	60a3      	str	r3, [r4, #8]
 800bff6:	6963      	ldr	r3, [r4, #20]
 800bff8:	425b      	negs	r3, r3
 800bffa:	61a3      	str	r3, [r4, #24]
 800bffc:	6923      	ldr	r3, [r4, #16]
 800bffe:	b943      	cbnz	r3, 800c012 <__swsetup_r+0xc6>
 800c000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c004:	d1ba      	bne.n	800bf7c <__swsetup_r+0x30>
 800c006:	bd70      	pop	{r4, r5, r6, pc}
 800c008:	0781      	lsls	r1, r0, #30
 800c00a:	bf58      	it	pl
 800c00c:	6963      	ldrpl	r3, [r4, #20]
 800c00e:	60a3      	str	r3, [r4, #8]
 800c010:	e7f4      	b.n	800bffc <__swsetup_r+0xb0>
 800c012:	2000      	movs	r0, #0
 800c014:	e7f7      	b.n	800c006 <__swsetup_r+0xba>
 800c016:	bf00      	nop
 800c018:	2000001c 	.word	0x2000001c
 800c01c:	0800d024 	.word	0x0800d024
 800c020:	0800d044 	.word	0x0800d044
 800c024:	0800d004 	.word	0x0800d004

0800c028 <abort>:
 800c028:	b508      	push	{r3, lr}
 800c02a:	2006      	movs	r0, #6
 800c02c:	f000 fa54 	bl	800c4d8 <raise>
 800c030:	2001      	movs	r0, #1
 800c032:	f7f6 facd 	bl	80025d0 <_exit>
	...

0800c038 <__sflush_r>:
 800c038:	898a      	ldrh	r2, [r1, #12]
 800c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	4605      	mov	r5, r0
 800c040:	0710      	lsls	r0, r2, #28
 800c042:	460c      	mov	r4, r1
 800c044:	d458      	bmi.n	800c0f8 <__sflush_r+0xc0>
 800c046:	684b      	ldr	r3, [r1, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dc05      	bgt.n	800c058 <__sflush_r+0x20>
 800c04c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c04e:	2b00      	cmp	r3, #0
 800c050:	dc02      	bgt.n	800c058 <__sflush_r+0x20>
 800c052:	2000      	movs	r0, #0
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c05a:	2e00      	cmp	r6, #0
 800c05c:	d0f9      	beq.n	800c052 <__sflush_r+0x1a>
 800c05e:	2300      	movs	r3, #0
 800c060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c064:	682f      	ldr	r7, [r5, #0]
 800c066:	602b      	str	r3, [r5, #0]
 800c068:	d032      	beq.n	800c0d0 <__sflush_r+0x98>
 800c06a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	075a      	lsls	r2, r3, #29
 800c070:	d505      	bpl.n	800c07e <__sflush_r+0x46>
 800c072:	6863      	ldr	r3, [r4, #4]
 800c074:	1ac0      	subs	r0, r0, r3
 800c076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c078:	b10b      	cbz	r3, 800c07e <__sflush_r+0x46>
 800c07a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c07c:	1ac0      	subs	r0, r0, r3
 800c07e:	2300      	movs	r3, #0
 800c080:	4602      	mov	r2, r0
 800c082:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c084:	6a21      	ldr	r1, [r4, #32]
 800c086:	4628      	mov	r0, r5
 800c088:	47b0      	blx	r6
 800c08a:	1c43      	adds	r3, r0, #1
 800c08c:	89a3      	ldrh	r3, [r4, #12]
 800c08e:	d106      	bne.n	800c09e <__sflush_r+0x66>
 800c090:	6829      	ldr	r1, [r5, #0]
 800c092:	291d      	cmp	r1, #29
 800c094:	d82c      	bhi.n	800c0f0 <__sflush_r+0xb8>
 800c096:	4a2a      	ldr	r2, [pc, #168]	; (800c140 <__sflush_r+0x108>)
 800c098:	40ca      	lsrs	r2, r1
 800c09a:	07d6      	lsls	r6, r2, #31
 800c09c:	d528      	bpl.n	800c0f0 <__sflush_r+0xb8>
 800c09e:	2200      	movs	r2, #0
 800c0a0:	6062      	str	r2, [r4, #4]
 800c0a2:	04d9      	lsls	r1, r3, #19
 800c0a4:	6922      	ldr	r2, [r4, #16]
 800c0a6:	6022      	str	r2, [r4, #0]
 800c0a8:	d504      	bpl.n	800c0b4 <__sflush_r+0x7c>
 800c0aa:	1c42      	adds	r2, r0, #1
 800c0ac:	d101      	bne.n	800c0b2 <__sflush_r+0x7a>
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	b903      	cbnz	r3, 800c0b4 <__sflush_r+0x7c>
 800c0b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0b6:	602f      	str	r7, [r5, #0]
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	d0ca      	beq.n	800c052 <__sflush_r+0x1a>
 800c0bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0c0:	4299      	cmp	r1, r3
 800c0c2:	d002      	beq.n	800c0ca <__sflush_r+0x92>
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f7ff faad 	bl	800b624 <_free_r>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c0ce:	e7c1      	b.n	800c054 <__sflush_r+0x1c>
 800c0d0:	6a21      	ldr	r1, [r4, #32]
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	47b0      	blx	r6
 800c0d8:	1c41      	adds	r1, r0, #1
 800c0da:	d1c7      	bne.n	800c06c <__sflush_r+0x34>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d0c4      	beq.n	800c06c <__sflush_r+0x34>
 800c0e2:	2b1d      	cmp	r3, #29
 800c0e4:	d001      	beq.n	800c0ea <__sflush_r+0xb2>
 800c0e6:	2b16      	cmp	r3, #22
 800c0e8:	d101      	bne.n	800c0ee <__sflush_r+0xb6>
 800c0ea:	602f      	str	r7, [r5, #0]
 800c0ec:	e7b1      	b.n	800c052 <__sflush_r+0x1a>
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0f4:	81a3      	strh	r3, [r4, #12]
 800c0f6:	e7ad      	b.n	800c054 <__sflush_r+0x1c>
 800c0f8:	690f      	ldr	r7, [r1, #16]
 800c0fa:	2f00      	cmp	r7, #0
 800c0fc:	d0a9      	beq.n	800c052 <__sflush_r+0x1a>
 800c0fe:	0793      	lsls	r3, r2, #30
 800c100:	680e      	ldr	r6, [r1, #0]
 800c102:	bf08      	it	eq
 800c104:	694b      	ldreq	r3, [r1, #20]
 800c106:	600f      	str	r7, [r1, #0]
 800c108:	bf18      	it	ne
 800c10a:	2300      	movne	r3, #0
 800c10c:	eba6 0807 	sub.w	r8, r6, r7
 800c110:	608b      	str	r3, [r1, #8]
 800c112:	f1b8 0f00 	cmp.w	r8, #0
 800c116:	dd9c      	ble.n	800c052 <__sflush_r+0x1a>
 800c118:	6a21      	ldr	r1, [r4, #32]
 800c11a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c11c:	4643      	mov	r3, r8
 800c11e:	463a      	mov	r2, r7
 800c120:	4628      	mov	r0, r5
 800c122:	47b0      	blx	r6
 800c124:	2800      	cmp	r0, #0
 800c126:	dc06      	bgt.n	800c136 <__sflush_r+0xfe>
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	f04f 30ff 	mov.w	r0, #4294967295
 800c134:	e78e      	b.n	800c054 <__sflush_r+0x1c>
 800c136:	4407      	add	r7, r0
 800c138:	eba8 0800 	sub.w	r8, r8, r0
 800c13c:	e7e9      	b.n	800c112 <__sflush_r+0xda>
 800c13e:	bf00      	nop
 800c140:	20400001 	.word	0x20400001

0800c144 <_fflush_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	690b      	ldr	r3, [r1, #16]
 800c148:	4605      	mov	r5, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	b913      	cbnz	r3, 800c154 <_fflush_r+0x10>
 800c14e:	2500      	movs	r5, #0
 800c150:	4628      	mov	r0, r5
 800c152:	bd38      	pop	{r3, r4, r5, pc}
 800c154:	b118      	cbz	r0, 800c15e <_fflush_r+0x1a>
 800c156:	6983      	ldr	r3, [r0, #24]
 800c158:	b90b      	cbnz	r3, 800c15e <_fflush_r+0x1a>
 800c15a:	f000 f887 	bl	800c26c <__sinit>
 800c15e:	4b14      	ldr	r3, [pc, #80]	; (800c1b0 <_fflush_r+0x6c>)
 800c160:	429c      	cmp	r4, r3
 800c162:	d11b      	bne.n	800c19c <_fflush_r+0x58>
 800c164:	686c      	ldr	r4, [r5, #4]
 800c166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d0ef      	beq.n	800c14e <_fflush_r+0xa>
 800c16e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c170:	07d0      	lsls	r0, r2, #31
 800c172:	d404      	bmi.n	800c17e <_fflush_r+0x3a>
 800c174:	0599      	lsls	r1, r3, #22
 800c176:	d402      	bmi.n	800c17e <_fflush_r+0x3a>
 800c178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c17a:	f000 f915 	bl	800c3a8 <__retarget_lock_acquire_recursive>
 800c17e:	4628      	mov	r0, r5
 800c180:	4621      	mov	r1, r4
 800c182:	f7ff ff59 	bl	800c038 <__sflush_r>
 800c186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c188:	07da      	lsls	r2, r3, #31
 800c18a:	4605      	mov	r5, r0
 800c18c:	d4e0      	bmi.n	800c150 <_fflush_r+0xc>
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	059b      	lsls	r3, r3, #22
 800c192:	d4dd      	bmi.n	800c150 <_fflush_r+0xc>
 800c194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c196:	f000 f908 	bl	800c3aa <__retarget_lock_release_recursive>
 800c19a:	e7d9      	b.n	800c150 <_fflush_r+0xc>
 800c19c:	4b05      	ldr	r3, [pc, #20]	; (800c1b4 <_fflush_r+0x70>)
 800c19e:	429c      	cmp	r4, r3
 800c1a0:	d101      	bne.n	800c1a6 <_fflush_r+0x62>
 800c1a2:	68ac      	ldr	r4, [r5, #8]
 800c1a4:	e7df      	b.n	800c166 <_fflush_r+0x22>
 800c1a6:	4b04      	ldr	r3, [pc, #16]	; (800c1b8 <_fflush_r+0x74>)
 800c1a8:	429c      	cmp	r4, r3
 800c1aa:	bf08      	it	eq
 800c1ac:	68ec      	ldreq	r4, [r5, #12]
 800c1ae:	e7da      	b.n	800c166 <_fflush_r+0x22>
 800c1b0:	0800d024 	.word	0x0800d024
 800c1b4:	0800d044 	.word	0x0800d044
 800c1b8:	0800d004 	.word	0x0800d004

0800c1bc <std>:
 800c1bc:	2300      	movs	r3, #0
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c1c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1ca:	6083      	str	r3, [r0, #8]
 800c1cc:	8181      	strh	r1, [r0, #12]
 800c1ce:	6643      	str	r3, [r0, #100]	; 0x64
 800c1d0:	81c2      	strh	r2, [r0, #14]
 800c1d2:	6183      	str	r3, [r0, #24]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	2208      	movs	r2, #8
 800c1d8:	305c      	adds	r0, #92	; 0x5c
 800c1da:	f7fb fd75 	bl	8007cc8 <memset>
 800c1de:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <std+0x38>)
 800c1e0:	6263      	str	r3, [r4, #36]	; 0x24
 800c1e2:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <std+0x3c>)
 800c1e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1e6:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <std+0x40>)
 800c1e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1ea:	4b05      	ldr	r3, [pc, #20]	; (800c200 <std+0x44>)
 800c1ec:	6224      	str	r4, [r4, #32]
 800c1ee:	6323      	str	r3, [r4, #48]	; 0x30
 800c1f0:	bd10      	pop	{r4, pc}
 800c1f2:	bf00      	nop
 800c1f4:	0800c511 	.word	0x0800c511
 800c1f8:	0800c533 	.word	0x0800c533
 800c1fc:	0800c56b 	.word	0x0800c56b
 800c200:	0800c58f 	.word	0x0800c58f

0800c204 <_cleanup_r>:
 800c204:	4901      	ldr	r1, [pc, #4]	; (800c20c <_cleanup_r+0x8>)
 800c206:	f000 b8af 	b.w	800c368 <_fwalk_reent>
 800c20a:	bf00      	nop
 800c20c:	0800c145 	.word	0x0800c145

0800c210 <__sfmoreglue>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	2268      	movs	r2, #104	; 0x68
 800c214:	1e4d      	subs	r5, r1, #1
 800c216:	4355      	muls	r5, r2
 800c218:	460e      	mov	r6, r1
 800c21a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c21e:	f7ff fa6d 	bl	800b6fc <_malloc_r>
 800c222:	4604      	mov	r4, r0
 800c224:	b140      	cbz	r0, 800c238 <__sfmoreglue+0x28>
 800c226:	2100      	movs	r1, #0
 800c228:	e9c0 1600 	strd	r1, r6, [r0]
 800c22c:	300c      	adds	r0, #12
 800c22e:	60a0      	str	r0, [r4, #8]
 800c230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c234:	f7fb fd48 	bl	8007cc8 <memset>
 800c238:	4620      	mov	r0, r4
 800c23a:	bd70      	pop	{r4, r5, r6, pc}

0800c23c <__sfp_lock_acquire>:
 800c23c:	4801      	ldr	r0, [pc, #4]	; (800c244 <__sfp_lock_acquire+0x8>)
 800c23e:	f000 b8b3 	b.w	800c3a8 <__retarget_lock_acquire_recursive>
 800c242:	bf00      	nop
 800c244:	2000047d 	.word	0x2000047d

0800c248 <__sfp_lock_release>:
 800c248:	4801      	ldr	r0, [pc, #4]	; (800c250 <__sfp_lock_release+0x8>)
 800c24a:	f000 b8ae 	b.w	800c3aa <__retarget_lock_release_recursive>
 800c24e:	bf00      	nop
 800c250:	2000047d 	.word	0x2000047d

0800c254 <__sinit_lock_acquire>:
 800c254:	4801      	ldr	r0, [pc, #4]	; (800c25c <__sinit_lock_acquire+0x8>)
 800c256:	f000 b8a7 	b.w	800c3a8 <__retarget_lock_acquire_recursive>
 800c25a:	bf00      	nop
 800c25c:	2000047e 	.word	0x2000047e

0800c260 <__sinit_lock_release>:
 800c260:	4801      	ldr	r0, [pc, #4]	; (800c268 <__sinit_lock_release+0x8>)
 800c262:	f000 b8a2 	b.w	800c3aa <__retarget_lock_release_recursive>
 800c266:	bf00      	nop
 800c268:	2000047e 	.word	0x2000047e

0800c26c <__sinit>:
 800c26c:	b510      	push	{r4, lr}
 800c26e:	4604      	mov	r4, r0
 800c270:	f7ff fff0 	bl	800c254 <__sinit_lock_acquire>
 800c274:	69a3      	ldr	r3, [r4, #24]
 800c276:	b11b      	cbz	r3, 800c280 <__sinit+0x14>
 800c278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c27c:	f7ff bff0 	b.w	800c260 <__sinit_lock_release>
 800c280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c284:	6523      	str	r3, [r4, #80]	; 0x50
 800c286:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <__sinit+0x68>)
 800c288:	4a13      	ldr	r2, [pc, #76]	; (800c2d8 <__sinit+0x6c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c28e:	42a3      	cmp	r3, r4
 800c290:	bf04      	itt	eq
 800c292:	2301      	moveq	r3, #1
 800c294:	61a3      	streq	r3, [r4, #24]
 800c296:	4620      	mov	r0, r4
 800c298:	f000 f820 	bl	800c2dc <__sfp>
 800c29c:	6060      	str	r0, [r4, #4]
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 f81c 	bl	800c2dc <__sfp>
 800c2a4:	60a0      	str	r0, [r4, #8]
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f000 f818 	bl	800c2dc <__sfp>
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	60e0      	str	r0, [r4, #12]
 800c2b0:	2104      	movs	r1, #4
 800c2b2:	6860      	ldr	r0, [r4, #4]
 800c2b4:	f7ff ff82 	bl	800c1bc <std>
 800c2b8:	68a0      	ldr	r0, [r4, #8]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	2109      	movs	r1, #9
 800c2be:	f7ff ff7d 	bl	800c1bc <std>
 800c2c2:	68e0      	ldr	r0, [r4, #12]
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	2112      	movs	r1, #18
 800c2c8:	f7ff ff78 	bl	800c1bc <std>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	61a3      	str	r3, [r4, #24]
 800c2d0:	e7d2      	b.n	800c278 <__sinit+0xc>
 800c2d2:	bf00      	nop
 800c2d4:	0800ccc0 	.word	0x0800ccc0
 800c2d8:	0800c205 	.word	0x0800c205

0800c2dc <__sfp>:
 800c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2de:	4607      	mov	r7, r0
 800c2e0:	f7ff ffac 	bl	800c23c <__sfp_lock_acquire>
 800c2e4:	4b1e      	ldr	r3, [pc, #120]	; (800c360 <__sfp+0x84>)
 800c2e6:	681e      	ldr	r6, [r3, #0]
 800c2e8:	69b3      	ldr	r3, [r6, #24]
 800c2ea:	b913      	cbnz	r3, 800c2f2 <__sfp+0x16>
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f7ff ffbd 	bl	800c26c <__sinit>
 800c2f2:	3648      	adds	r6, #72	; 0x48
 800c2f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	d503      	bpl.n	800c304 <__sfp+0x28>
 800c2fc:	6833      	ldr	r3, [r6, #0]
 800c2fe:	b30b      	cbz	r3, 800c344 <__sfp+0x68>
 800c300:	6836      	ldr	r6, [r6, #0]
 800c302:	e7f7      	b.n	800c2f4 <__sfp+0x18>
 800c304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c308:	b9d5      	cbnz	r5, 800c340 <__sfp+0x64>
 800c30a:	4b16      	ldr	r3, [pc, #88]	; (800c364 <__sfp+0x88>)
 800c30c:	60e3      	str	r3, [r4, #12]
 800c30e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c312:	6665      	str	r5, [r4, #100]	; 0x64
 800c314:	f000 f847 	bl	800c3a6 <__retarget_lock_init_recursive>
 800c318:	f7ff ff96 	bl	800c248 <__sfp_lock_release>
 800c31c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c320:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c324:	6025      	str	r5, [r4, #0]
 800c326:	61a5      	str	r5, [r4, #24]
 800c328:	2208      	movs	r2, #8
 800c32a:	4629      	mov	r1, r5
 800c32c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c330:	f7fb fcca 	bl	8007cc8 <memset>
 800c334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c33c:	4620      	mov	r0, r4
 800c33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c340:	3468      	adds	r4, #104	; 0x68
 800c342:	e7d9      	b.n	800c2f8 <__sfp+0x1c>
 800c344:	2104      	movs	r1, #4
 800c346:	4638      	mov	r0, r7
 800c348:	f7ff ff62 	bl	800c210 <__sfmoreglue>
 800c34c:	4604      	mov	r4, r0
 800c34e:	6030      	str	r0, [r6, #0]
 800c350:	2800      	cmp	r0, #0
 800c352:	d1d5      	bne.n	800c300 <__sfp+0x24>
 800c354:	f7ff ff78 	bl	800c248 <__sfp_lock_release>
 800c358:	230c      	movs	r3, #12
 800c35a:	603b      	str	r3, [r7, #0]
 800c35c:	e7ee      	b.n	800c33c <__sfp+0x60>
 800c35e:	bf00      	nop
 800c360:	0800ccc0 	.word	0x0800ccc0
 800c364:	ffff0001 	.word	0xffff0001

0800c368 <_fwalk_reent>:
 800c368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c36c:	4606      	mov	r6, r0
 800c36e:	4688      	mov	r8, r1
 800c370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c374:	2700      	movs	r7, #0
 800c376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c37a:	f1b9 0901 	subs.w	r9, r9, #1
 800c37e:	d505      	bpl.n	800c38c <_fwalk_reent+0x24>
 800c380:	6824      	ldr	r4, [r4, #0]
 800c382:	2c00      	cmp	r4, #0
 800c384:	d1f7      	bne.n	800c376 <_fwalk_reent+0xe>
 800c386:	4638      	mov	r0, r7
 800c388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c38c:	89ab      	ldrh	r3, [r5, #12]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d907      	bls.n	800c3a2 <_fwalk_reent+0x3a>
 800c392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c396:	3301      	adds	r3, #1
 800c398:	d003      	beq.n	800c3a2 <_fwalk_reent+0x3a>
 800c39a:	4629      	mov	r1, r5
 800c39c:	4630      	mov	r0, r6
 800c39e:	47c0      	blx	r8
 800c3a0:	4307      	orrs	r7, r0
 800c3a2:	3568      	adds	r5, #104	; 0x68
 800c3a4:	e7e9      	b.n	800c37a <_fwalk_reent+0x12>

0800c3a6 <__retarget_lock_init_recursive>:
 800c3a6:	4770      	bx	lr

0800c3a8 <__retarget_lock_acquire_recursive>:
 800c3a8:	4770      	bx	lr

0800c3aa <__retarget_lock_release_recursive>:
 800c3aa:	4770      	bx	lr

0800c3ac <__swhatbuf_r>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	460e      	mov	r6, r1
 800c3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	b096      	sub	sp, #88	; 0x58
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	461d      	mov	r5, r3
 800c3bc:	da08      	bge.n	800c3d0 <__swhatbuf_r+0x24>
 800c3be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	602a      	str	r2, [r5, #0]
 800c3c6:	061a      	lsls	r2, r3, #24
 800c3c8:	d410      	bmi.n	800c3ec <__swhatbuf_r+0x40>
 800c3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ce:	e00e      	b.n	800c3ee <__swhatbuf_r+0x42>
 800c3d0:	466a      	mov	r2, sp
 800c3d2:	f000 f903 	bl	800c5dc <_fstat_r>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	dbf1      	blt.n	800c3be <__swhatbuf_r+0x12>
 800c3da:	9a01      	ldr	r2, [sp, #4]
 800c3dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3e4:	425a      	negs	r2, r3
 800c3e6:	415a      	adcs	r2, r3
 800c3e8:	602a      	str	r2, [r5, #0]
 800c3ea:	e7ee      	b.n	800c3ca <__swhatbuf_r+0x1e>
 800c3ec:	2340      	movs	r3, #64	; 0x40
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	b016      	add	sp, #88	; 0x58
 800c3f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3f8 <__smakebuf_r>:
 800c3f8:	898b      	ldrh	r3, [r1, #12]
 800c3fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3fc:	079d      	lsls	r5, r3, #30
 800c3fe:	4606      	mov	r6, r0
 800c400:	460c      	mov	r4, r1
 800c402:	d507      	bpl.n	800c414 <__smakebuf_r+0x1c>
 800c404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	6123      	str	r3, [r4, #16]
 800c40c:	2301      	movs	r3, #1
 800c40e:	6163      	str	r3, [r4, #20]
 800c410:	b002      	add	sp, #8
 800c412:	bd70      	pop	{r4, r5, r6, pc}
 800c414:	ab01      	add	r3, sp, #4
 800c416:	466a      	mov	r2, sp
 800c418:	f7ff ffc8 	bl	800c3ac <__swhatbuf_r>
 800c41c:	9900      	ldr	r1, [sp, #0]
 800c41e:	4605      	mov	r5, r0
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff f96b 	bl	800b6fc <_malloc_r>
 800c426:	b948      	cbnz	r0, 800c43c <__smakebuf_r+0x44>
 800c428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c42c:	059a      	lsls	r2, r3, #22
 800c42e:	d4ef      	bmi.n	800c410 <__smakebuf_r+0x18>
 800c430:	f023 0303 	bic.w	r3, r3, #3
 800c434:	f043 0302 	orr.w	r3, r3, #2
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	e7e3      	b.n	800c404 <__smakebuf_r+0xc>
 800c43c:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <__smakebuf_r+0x7c>)
 800c43e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	6020      	str	r0, [r4, #0]
 800c444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c448:	81a3      	strh	r3, [r4, #12]
 800c44a:	9b00      	ldr	r3, [sp, #0]
 800c44c:	6163      	str	r3, [r4, #20]
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	6120      	str	r0, [r4, #16]
 800c452:	b15b      	cbz	r3, 800c46c <__smakebuf_r+0x74>
 800c454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c458:	4630      	mov	r0, r6
 800c45a:	f000 f8d1 	bl	800c600 <_isatty_r>
 800c45e:	b128      	cbz	r0, 800c46c <__smakebuf_r+0x74>
 800c460:	89a3      	ldrh	r3, [r4, #12]
 800c462:	f023 0303 	bic.w	r3, r3, #3
 800c466:	f043 0301 	orr.w	r3, r3, #1
 800c46a:	81a3      	strh	r3, [r4, #12]
 800c46c:	89a0      	ldrh	r0, [r4, #12]
 800c46e:	4305      	orrs	r5, r0
 800c470:	81a5      	strh	r5, [r4, #12]
 800c472:	e7cd      	b.n	800c410 <__smakebuf_r+0x18>
 800c474:	0800c205 	.word	0x0800c205

0800c478 <_malloc_usable_size_r>:
 800c478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c47c:	1f18      	subs	r0, r3, #4
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bfbc      	itt	lt
 800c482:	580b      	ldrlt	r3, [r1, r0]
 800c484:	18c0      	addlt	r0, r0, r3
 800c486:	4770      	bx	lr

0800c488 <_raise_r>:
 800c488:	291f      	cmp	r1, #31
 800c48a:	b538      	push	{r3, r4, r5, lr}
 800c48c:	4604      	mov	r4, r0
 800c48e:	460d      	mov	r5, r1
 800c490:	d904      	bls.n	800c49c <_raise_r+0x14>
 800c492:	2316      	movs	r3, #22
 800c494:	6003      	str	r3, [r0, #0]
 800c496:	f04f 30ff 	mov.w	r0, #4294967295
 800c49a:	bd38      	pop	{r3, r4, r5, pc}
 800c49c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c49e:	b112      	cbz	r2, 800c4a6 <_raise_r+0x1e>
 800c4a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4a4:	b94b      	cbnz	r3, 800c4ba <_raise_r+0x32>
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f000 f830 	bl	800c50c <_getpid_r>
 800c4ac:	462a      	mov	r2, r5
 800c4ae:	4601      	mov	r1, r0
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4b6:	f000 b817 	b.w	800c4e8 <_kill_r>
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d00a      	beq.n	800c4d4 <_raise_r+0x4c>
 800c4be:	1c59      	adds	r1, r3, #1
 800c4c0:	d103      	bne.n	800c4ca <_raise_r+0x42>
 800c4c2:	2316      	movs	r3, #22
 800c4c4:	6003      	str	r3, [r0, #0]
 800c4c6:	2001      	movs	r0, #1
 800c4c8:	e7e7      	b.n	800c49a <_raise_r+0x12>
 800c4ca:	2400      	movs	r4, #0
 800c4cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	4798      	blx	r3
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e7e0      	b.n	800c49a <_raise_r+0x12>

0800c4d8 <raise>:
 800c4d8:	4b02      	ldr	r3, [pc, #8]	; (800c4e4 <raise+0xc>)
 800c4da:	4601      	mov	r1, r0
 800c4dc:	6818      	ldr	r0, [r3, #0]
 800c4de:	f7ff bfd3 	b.w	800c488 <_raise_r>
 800c4e2:	bf00      	nop
 800c4e4:	2000001c 	.word	0x2000001c

0800c4e8 <_kill_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	4d07      	ldr	r5, [pc, #28]	; (800c508 <_kill_r+0x20>)
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	4608      	mov	r0, r1
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	602b      	str	r3, [r5, #0]
 800c4f6:	f7f6 f85b 	bl	80025b0 <_kill>
 800c4fa:	1c43      	adds	r3, r0, #1
 800c4fc:	d102      	bne.n	800c504 <_kill_r+0x1c>
 800c4fe:	682b      	ldr	r3, [r5, #0]
 800c500:	b103      	cbz	r3, 800c504 <_kill_r+0x1c>
 800c502:	6023      	str	r3, [r4, #0]
 800c504:	bd38      	pop	{r3, r4, r5, pc}
 800c506:	bf00      	nop
 800c508:	20000478 	.word	0x20000478

0800c50c <_getpid_r>:
 800c50c:	f7f6 b848 	b.w	80025a0 <_getpid>

0800c510 <__sread>:
 800c510:	b510      	push	{r4, lr}
 800c512:	460c      	mov	r4, r1
 800c514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c518:	f000 f894 	bl	800c644 <_read_r>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	bfab      	itete	ge
 800c520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c522:	89a3      	ldrhlt	r3, [r4, #12]
 800c524:	181b      	addge	r3, r3, r0
 800c526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c52a:	bfac      	ite	ge
 800c52c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c52e:	81a3      	strhlt	r3, [r4, #12]
 800c530:	bd10      	pop	{r4, pc}

0800c532 <__swrite>:
 800c532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c536:	461f      	mov	r7, r3
 800c538:	898b      	ldrh	r3, [r1, #12]
 800c53a:	05db      	lsls	r3, r3, #23
 800c53c:	4605      	mov	r5, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	4616      	mov	r6, r2
 800c542:	d505      	bpl.n	800c550 <__swrite+0x1e>
 800c544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c548:	2302      	movs	r3, #2
 800c54a:	2200      	movs	r2, #0
 800c54c:	f000 f868 	bl	800c620 <_lseek_r>
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c55a:	81a3      	strh	r3, [r4, #12]
 800c55c:	4632      	mov	r2, r6
 800c55e:	463b      	mov	r3, r7
 800c560:	4628      	mov	r0, r5
 800c562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c566:	f000 b817 	b.w	800c598 <_write_r>

0800c56a <__sseek>:
 800c56a:	b510      	push	{r4, lr}
 800c56c:	460c      	mov	r4, r1
 800c56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c572:	f000 f855 	bl	800c620 <_lseek_r>
 800c576:	1c43      	adds	r3, r0, #1
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	bf15      	itete	ne
 800c57c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c57e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c586:	81a3      	strheq	r3, [r4, #12]
 800c588:	bf18      	it	ne
 800c58a:	81a3      	strhne	r3, [r4, #12]
 800c58c:	bd10      	pop	{r4, pc}

0800c58e <__sclose>:
 800c58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c592:	f000 b813 	b.w	800c5bc <_close_r>
	...

0800c598 <_write_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d07      	ldr	r5, [pc, #28]	; (800c5b8 <_write_r+0x20>)
 800c59c:	4604      	mov	r4, r0
 800c59e:	4608      	mov	r0, r1
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	602a      	str	r2, [r5, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f7f6 f839 	bl	800261e <_write>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d102      	bne.n	800c5b6 <_write_r+0x1e>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	b103      	cbz	r3, 800c5b6 <_write_r+0x1e>
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	20000478 	.word	0x20000478

0800c5bc <_close_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4d06      	ldr	r5, [pc, #24]	; (800c5d8 <_close_r+0x1c>)
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	602b      	str	r3, [r5, #0]
 800c5c8:	f7f6 f845 	bl	8002656 <_close>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d102      	bne.n	800c5d6 <_close_r+0x1a>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	b103      	cbz	r3, 800c5d6 <_close_r+0x1a>
 800c5d4:	6023      	str	r3, [r4, #0]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	20000478 	.word	0x20000478

0800c5dc <_fstat_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d07      	ldr	r5, [pc, #28]	; (800c5fc <_fstat_r+0x20>)
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	4608      	mov	r0, r1
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	602b      	str	r3, [r5, #0]
 800c5ea:	f7f6 f840 	bl	800266e <_fstat>
 800c5ee:	1c43      	adds	r3, r0, #1
 800c5f0:	d102      	bne.n	800c5f8 <_fstat_r+0x1c>
 800c5f2:	682b      	ldr	r3, [r5, #0]
 800c5f4:	b103      	cbz	r3, 800c5f8 <_fstat_r+0x1c>
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	bd38      	pop	{r3, r4, r5, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20000478 	.word	0x20000478

0800c600 <_isatty_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	; (800c61c <_isatty_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f6 f83f 	bl	800268e <_isatty>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_isatty_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_isatty_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	20000478 	.word	0x20000478

0800c620 <_lseek_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4d07      	ldr	r5, [pc, #28]	; (800c640 <_lseek_r+0x20>)
 800c624:	4604      	mov	r4, r0
 800c626:	4608      	mov	r0, r1
 800c628:	4611      	mov	r1, r2
 800c62a:	2200      	movs	r2, #0
 800c62c:	602a      	str	r2, [r5, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	f7f6 f838 	bl	80026a4 <_lseek>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d102      	bne.n	800c63e <_lseek_r+0x1e>
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	b103      	cbz	r3, 800c63e <_lseek_r+0x1e>
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	20000478 	.word	0x20000478

0800c644 <_read_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d07      	ldr	r5, [pc, #28]	; (800c664 <_read_r+0x20>)
 800c648:	4604      	mov	r4, r0
 800c64a:	4608      	mov	r0, r1
 800c64c:	4611      	mov	r1, r2
 800c64e:	2200      	movs	r2, #0
 800c650:	602a      	str	r2, [r5, #0]
 800c652:	461a      	mov	r2, r3
 800c654:	f7f5 ffc6 	bl	80025e4 <_read>
 800c658:	1c43      	adds	r3, r0, #1
 800c65a:	d102      	bne.n	800c662 <_read_r+0x1e>
 800c65c:	682b      	ldr	r3, [r5, #0]
 800c65e:	b103      	cbz	r3, 800c662 <_read_r+0x1e>
 800c660:	6023      	str	r3, [r4, #0]
 800c662:	bd38      	pop	{r3, r4, r5, pc}
 800c664:	20000478 	.word	0x20000478

0800c668 <_init>:
 800c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66a:	bf00      	nop
 800c66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c66e:	bc08      	pop	{r3}
 800c670:	469e      	mov	lr, r3
 800c672:	4770      	bx	lr

0800c674 <_fini>:
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	bf00      	nop
 800c678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67a:	bc08      	pop	{r3}
 800c67c:	469e      	mov	lr, r3
 800c67e:	4770      	bx	lr
