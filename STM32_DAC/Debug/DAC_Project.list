
DAC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800a880  0800a880  0001a880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae44  0800ae44  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae44  0800ae44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae4c  0800ae4c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae4c  0800ae4c  0001ae4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae50  0800ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ae54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001f8  0800b04c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800b04c  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5af  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a1  00000000  00000000  0002e7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027436  00000000  00000000  00031f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd53  00000000  00000000  000593c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed683  00000000  00000000  00067119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015479c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004504  00000000  00000000  001547ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a868 	.word	0x0800a868

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800a868 	.word	0x0800a868

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 ba29 	b.w	8001318 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f8b7 	bl	8001048 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f8aa 	bl	8001048 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f899 	bl	8001048 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f88b 	bl	8001048 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b9de 	b.w	8001318 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f870 	bl	8001048 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_f2lz>:
 8000f74:	ee07 0a90 	vmov	s15, r0
 8000f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d401      	bmi.n	8000f86 <__aeabi_f2lz+0x12>
 8000f82:	f000 b823 	b.w	8000fcc <__aeabi_f2ulz>
 8000f86:	eef1 7a67 	vneg.f32	s15, s15
 8000f8a:	b508      	push	{r3, lr}
 8000f8c:	ee17 0a90 	vmov	r0, s15
 8000f90:	f000 f81c 	bl	8000fcc <__aeabi_f2ulz>
 8000f94:	4240      	negs	r0, r0
 8000f96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f9a:	bd08      	pop	{r3, pc}

08000f9c <__aeabi_d2lz>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	460d      	mov	r5, r1
 8000fa6:	f7ff fd99 	bl	8000adc <__aeabi_dcmplt>
 8000faa:	b928      	cbnz	r0, 8000fb8 <__aeabi_d2lz+0x1c>
 8000fac:	4620      	mov	r0, r4
 8000fae:	4629      	mov	r1, r5
 8000fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fb4:	f000 b82a 	b.w	800100c <__aeabi_d2ulz>
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fbe:	f000 f825 	bl	800100c <__aeabi_d2ulz>
 8000fc2:	4240      	negs	r0, r0
 8000fc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc8:	bd38      	pop	{r3, r4, r5, pc}
 8000fca:	bf00      	nop

08000fcc <__aeabi_f2ulz>:
 8000fcc:	b5d0      	push	{r4, r6, r7, lr}
 8000fce:	f7ff fabb 	bl	8000548 <__aeabi_f2d>
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__aeabi_f2ulz+0x38>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4606      	mov	r6, r0
 8000fd8:	460f      	mov	r7, r1
 8000fda:	f7ff fb0d 	bl	80005f8 <__aeabi_dmul>
 8000fde:	f7ff fde3 	bl	8000ba8 <__aeabi_d2uiz>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	f7ff fa8e 	bl	8000504 <__aeabi_ui2d>
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <__aeabi_f2ulz+0x3c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	f7ff fb04 	bl	80005f8 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	4639      	mov	r1, r7
 8000ff8:	f7ff f946 	bl	8000288 <__aeabi_dsub>
 8000ffc:	f7ff fdd4 	bl	8000ba8 <__aeabi_d2uiz>
 8001000:	4621      	mov	r1, r4
 8001002:	bdd0      	pop	{r4, r6, r7, pc}
 8001004:	3df00000 	.word	0x3df00000
 8001008:	41f00000 	.word	0x41f00000

0800100c <__aeabi_d2ulz>:
 800100c:	b5d0      	push	{r4, r6, r7, lr}
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__aeabi_d2ulz+0x34>)
 8001010:	2200      	movs	r2, #0
 8001012:	4606      	mov	r6, r0
 8001014:	460f      	mov	r7, r1
 8001016:	f7ff faef 	bl	80005f8 <__aeabi_dmul>
 800101a:	f7ff fdc5 	bl	8000ba8 <__aeabi_d2uiz>
 800101e:	4604      	mov	r4, r0
 8001020:	f7ff fa70 	bl	8000504 <__aeabi_ui2d>
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <__aeabi_d2ulz+0x38>)
 8001026:	2200      	movs	r2, #0
 8001028:	f7ff fae6 	bl	80005f8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4630      	mov	r0, r6
 8001032:	4639      	mov	r1, r7
 8001034:	f7ff f928 	bl	8000288 <__aeabi_dsub>
 8001038:	f7ff fdb6 	bl	8000ba8 <__aeabi_d2uiz>
 800103c:	4621      	mov	r1, r4
 800103e:	bdd0      	pop	{r4, r6, r7, pc}
 8001040:	3df00000 	.word	0x3df00000
 8001044:	41f00000 	.word	0x41f00000

08001048 <__udivmoddi4>:
 8001048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800104c:	9d08      	ldr	r5, [sp, #32]
 800104e:	4604      	mov	r4, r0
 8001050:	468e      	mov	lr, r1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d14d      	bne.n	80010f2 <__udivmoddi4+0xaa>
 8001056:	428a      	cmp	r2, r1
 8001058:	4694      	mov	ip, r2
 800105a:	d969      	bls.n	8001130 <__udivmoddi4+0xe8>
 800105c:	fab2 f282 	clz	r2, r2
 8001060:	b152      	cbz	r2, 8001078 <__udivmoddi4+0x30>
 8001062:	fa01 f302 	lsl.w	r3, r1, r2
 8001066:	f1c2 0120 	rsb	r1, r2, #32
 800106a:	fa20 f101 	lsr.w	r1, r0, r1
 800106e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001072:	ea41 0e03 	orr.w	lr, r1, r3
 8001076:	4094      	lsls	r4, r2
 8001078:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800107c:	0c21      	lsrs	r1, r4, #16
 800107e:	fbbe f6f8 	udiv	r6, lr, r8
 8001082:	fa1f f78c 	uxth.w	r7, ip
 8001086:	fb08 e316 	mls	r3, r8, r6, lr
 800108a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800108e:	fb06 f107 	mul.w	r1, r6, r7
 8001092:	4299      	cmp	r1, r3
 8001094:	d90a      	bls.n	80010ac <__udivmoddi4+0x64>
 8001096:	eb1c 0303 	adds.w	r3, ip, r3
 800109a:	f106 30ff 	add.w	r0, r6, #4294967295
 800109e:	f080 811f 	bcs.w	80012e0 <__udivmoddi4+0x298>
 80010a2:	4299      	cmp	r1, r3
 80010a4:	f240 811c 	bls.w	80012e0 <__udivmoddi4+0x298>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	1a5b      	subs	r3, r3, r1
 80010ae:	b2a4      	uxth	r4, r4
 80010b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80010b4:	fb08 3310 	mls	r3, r8, r0, r3
 80010b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010bc:	fb00 f707 	mul.w	r7, r0, r7
 80010c0:	42a7      	cmp	r7, r4
 80010c2:	d90a      	bls.n	80010da <__udivmoddi4+0x92>
 80010c4:	eb1c 0404 	adds.w	r4, ip, r4
 80010c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80010cc:	f080 810a 	bcs.w	80012e4 <__udivmoddi4+0x29c>
 80010d0:	42a7      	cmp	r7, r4
 80010d2:	f240 8107 	bls.w	80012e4 <__udivmoddi4+0x29c>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010de:	1be4      	subs	r4, r4, r7
 80010e0:	2600      	movs	r6, #0
 80010e2:	b11d      	cbz	r5, 80010ec <__udivmoddi4+0xa4>
 80010e4:	40d4      	lsrs	r4, r2
 80010e6:	2300      	movs	r3, #0
 80010e8:	e9c5 4300 	strd	r4, r3, [r5]
 80010ec:	4631      	mov	r1, r6
 80010ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f2:	428b      	cmp	r3, r1
 80010f4:	d909      	bls.n	800110a <__udivmoddi4+0xc2>
 80010f6:	2d00      	cmp	r5, #0
 80010f8:	f000 80ef 	beq.w	80012da <__udivmoddi4+0x292>
 80010fc:	2600      	movs	r6, #0
 80010fe:	e9c5 0100 	strd	r0, r1, [r5]
 8001102:	4630      	mov	r0, r6
 8001104:	4631      	mov	r1, r6
 8001106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110a:	fab3 f683 	clz	r6, r3
 800110e:	2e00      	cmp	r6, #0
 8001110:	d14a      	bne.n	80011a8 <__udivmoddi4+0x160>
 8001112:	428b      	cmp	r3, r1
 8001114:	d302      	bcc.n	800111c <__udivmoddi4+0xd4>
 8001116:	4282      	cmp	r2, r0
 8001118:	f200 80f9 	bhi.w	800130e <__udivmoddi4+0x2c6>
 800111c:	1a84      	subs	r4, r0, r2
 800111e:	eb61 0303 	sbc.w	r3, r1, r3
 8001122:	2001      	movs	r0, #1
 8001124:	469e      	mov	lr, r3
 8001126:	2d00      	cmp	r5, #0
 8001128:	d0e0      	beq.n	80010ec <__udivmoddi4+0xa4>
 800112a:	e9c5 4e00 	strd	r4, lr, [r5]
 800112e:	e7dd      	b.n	80010ec <__udivmoddi4+0xa4>
 8001130:	b902      	cbnz	r2, 8001134 <__udivmoddi4+0xec>
 8001132:	deff      	udf	#255	; 0xff
 8001134:	fab2 f282 	clz	r2, r2
 8001138:	2a00      	cmp	r2, #0
 800113a:	f040 8092 	bne.w	8001262 <__udivmoddi4+0x21a>
 800113e:	eba1 010c 	sub.w	r1, r1, ip
 8001142:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001146:	fa1f fe8c 	uxth.w	lr, ip
 800114a:	2601      	movs	r6, #1
 800114c:	0c20      	lsrs	r0, r4, #16
 800114e:	fbb1 f3f7 	udiv	r3, r1, r7
 8001152:	fb07 1113 	mls	r1, r7, r3, r1
 8001156:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800115a:	fb0e f003 	mul.w	r0, lr, r3
 800115e:	4288      	cmp	r0, r1
 8001160:	d908      	bls.n	8001174 <__udivmoddi4+0x12c>
 8001162:	eb1c 0101 	adds.w	r1, ip, r1
 8001166:	f103 38ff 	add.w	r8, r3, #4294967295
 800116a:	d202      	bcs.n	8001172 <__udivmoddi4+0x12a>
 800116c:	4288      	cmp	r0, r1
 800116e:	f200 80cb 	bhi.w	8001308 <__udivmoddi4+0x2c0>
 8001172:	4643      	mov	r3, r8
 8001174:	1a09      	subs	r1, r1, r0
 8001176:	b2a4      	uxth	r4, r4
 8001178:	fbb1 f0f7 	udiv	r0, r1, r7
 800117c:	fb07 1110 	mls	r1, r7, r0, r1
 8001180:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001184:	fb0e fe00 	mul.w	lr, lr, r0
 8001188:	45a6      	cmp	lr, r4
 800118a:	d908      	bls.n	800119e <__udivmoddi4+0x156>
 800118c:	eb1c 0404 	adds.w	r4, ip, r4
 8001190:	f100 31ff 	add.w	r1, r0, #4294967295
 8001194:	d202      	bcs.n	800119c <__udivmoddi4+0x154>
 8001196:	45a6      	cmp	lr, r4
 8001198:	f200 80bb 	bhi.w	8001312 <__udivmoddi4+0x2ca>
 800119c:	4608      	mov	r0, r1
 800119e:	eba4 040e 	sub.w	r4, r4, lr
 80011a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011a6:	e79c      	b.n	80010e2 <__udivmoddi4+0x9a>
 80011a8:	f1c6 0720 	rsb	r7, r6, #32
 80011ac:	40b3      	lsls	r3, r6
 80011ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80011b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80011b6:	fa20 f407 	lsr.w	r4, r0, r7
 80011ba:	fa01 f306 	lsl.w	r3, r1, r6
 80011be:	431c      	orrs	r4, r3
 80011c0:	40f9      	lsrs	r1, r7
 80011c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011c6:	fa00 f306 	lsl.w	r3, r0, r6
 80011ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80011ce:	0c20      	lsrs	r0, r4, #16
 80011d0:	fa1f fe8c 	uxth.w	lr, ip
 80011d4:	fb09 1118 	mls	r1, r9, r8, r1
 80011d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011dc:	fb08 f00e 	mul.w	r0, r8, lr
 80011e0:	4288      	cmp	r0, r1
 80011e2:	fa02 f206 	lsl.w	r2, r2, r6
 80011e6:	d90b      	bls.n	8001200 <__udivmoddi4+0x1b8>
 80011e8:	eb1c 0101 	adds.w	r1, ip, r1
 80011ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80011f0:	f080 8088 	bcs.w	8001304 <__udivmoddi4+0x2bc>
 80011f4:	4288      	cmp	r0, r1
 80011f6:	f240 8085 	bls.w	8001304 <__udivmoddi4+0x2bc>
 80011fa:	f1a8 0802 	sub.w	r8, r8, #2
 80011fe:	4461      	add	r1, ip
 8001200:	1a09      	subs	r1, r1, r0
 8001202:	b2a4      	uxth	r4, r4
 8001204:	fbb1 f0f9 	udiv	r0, r1, r9
 8001208:	fb09 1110 	mls	r1, r9, r0, r1
 800120c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001210:	fb00 fe0e 	mul.w	lr, r0, lr
 8001214:	458e      	cmp	lr, r1
 8001216:	d908      	bls.n	800122a <__udivmoddi4+0x1e2>
 8001218:	eb1c 0101 	adds.w	r1, ip, r1
 800121c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001220:	d26c      	bcs.n	80012fc <__udivmoddi4+0x2b4>
 8001222:	458e      	cmp	lr, r1
 8001224:	d96a      	bls.n	80012fc <__udivmoddi4+0x2b4>
 8001226:	3802      	subs	r0, #2
 8001228:	4461      	add	r1, ip
 800122a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800122e:	fba0 9402 	umull	r9, r4, r0, r2
 8001232:	eba1 010e 	sub.w	r1, r1, lr
 8001236:	42a1      	cmp	r1, r4
 8001238:	46c8      	mov	r8, r9
 800123a:	46a6      	mov	lr, r4
 800123c:	d356      	bcc.n	80012ec <__udivmoddi4+0x2a4>
 800123e:	d053      	beq.n	80012e8 <__udivmoddi4+0x2a0>
 8001240:	b15d      	cbz	r5, 800125a <__udivmoddi4+0x212>
 8001242:	ebb3 0208 	subs.w	r2, r3, r8
 8001246:	eb61 010e 	sbc.w	r1, r1, lr
 800124a:	fa01 f707 	lsl.w	r7, r1, r7
 800124e:	fa22 f306 	lsr.w	r3, r2, r6
 8001252:	40f1      	lsrs	r1, r6
 8001254:	431f      	orrs	r7, r3
 8001256:	e9c5 7100 	strd	r7, r1, [r5]
 800125a:	2600      	movs	r6, #0
 800125c:	4631      	mov	r1, r6
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	f1c2 0320 	rsb	r3, r2, #32
 8001266:	40d8      	lsrs	r0, r3
 8001268:	fa0c fc02 	lsl.w	ip, ip, r2
 800126c:	fa21 f303 	lsr.w	r3, r1, r3
 8001270:	4091      	lsls	r1, r2
 8001272:	4301      	orrs	r1, r0
 8001274:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001278:	fa1f fe8c 	uxth.w	lr, ip
 800127c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001280:	fb07 3610 	mls	r6, r7, r0, r3
 8001284:	0c0b      	lsrs	r3, r1, #16
 8001286:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800128a:	fb00 f60e 	mul.w	r6, r0, lr
 800128e:	429e      	cmp	r6, r3
 8001290:	fa04 f402 	lsl.w	r4, r4, r2
 8001294:	d908      	bls.n	80012a8 <__udivmoddi4+0x260>
 8001296:	eb1c 0303 	adds.w	r3, ip, r3
 800129a:	f100 38ff 	add.w	r8, r0, #4294967295
 800129e:	d22f      	bcs.n	8001300 <__udivmoddi4+0x2b8>
 80012a0:	429e      	cmp	r6, r3
 80012a2:	d92d      	bls.n	8001300 <__udivmoddi4+0x2b8>
 80012a4:	3802      	subs	r0, #2
 80012a6:	4463      	add	r3, ip
 80012a8:	1b9b      	subs	r3, r3, r6
 80012aa:	b289      	uxth	r1, r1
 80012ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80012b0:	fb07 3316 	mls	r3, r7, r6, r3
 80012b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80012b8:	fb06 f30e 	mul.w	r3, r6, lr
 80012bc:	428b      	cmp	r3, r1
 80012be:	d908      	bls.n	80012d2 <__udivmoddi4+0x28a>
 80012c0:	eb1c 0101 	adds.w	r1, ip, r1
 80012c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80012c8:	d216      	bcs.n	80012f8 <__udivmoddi4+0x2b0>
 80012ca:	428b      	cmp	r3, r1
 80012cc:	d914      	bls.n	80012f8 <__udivmoddi4+0x2b0>
 80012ce:	3e02      	subs	r6, #2
 80012d0:	4461      	add	r1, ip
 80012d2:	1ac9      	subs	r1, r1, r3
 80012d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012d8:	e738      	b.n	800114c <__udivmoddi4+0x104>
 80012da:	462e      	mov	r6, r5
 80012dc:	4628      	mov	r0, r5
 80012de:	e705      	b.n	80010ec <__udivmoddi4+0xa4>
 80012e0:	4606      	mov	r6, r0
 80012e2:	e6e3      	b.n	80010ac <__udivmoddi4+0x64>
 80012e4:	4618      	mov	r0, r3
 80012e6:	e6f8      	b.n	80010da <__udivmoddi4+0x92>
 80012e8:	454b      	cmp	r3, r9
 80012ea:	d2a9      	bcs.n	8001240 <__udivmoddi4+0x1f8>
 80012ec:	ebb9 0802 	subs.w	r8, r9, r2
 80012f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012f4:	3801      	subs	r0, #1
 80012f6:	e7a3      	b.n	8001240 <__udivmoddi4+0x1f8>
 80012f8:	4646      	mov	r6, r8
 80012fa:	e7ea      	b.n	80012d2 <__udivmoddi4+0x28a>
 80012fc:	4620      	mov	r0, r4
 80012fe:	e794      	b.n	800122a <__udivmoddi4+0x1e2>
 8001300:	4640      	mov	r0, r8
 8001302:	e7d1      	b.n	80012a8 <__udivmoddi4+0x260>
 8001304:	46d0      	mov	r8, sl
 8001306:	e77b      	b.n	8001200 <__udivmoddi4+0x1b8>
 8001308:	3b02      	subs	r3, #2
 800130a:	4461      	add	r1, ip
 800130c:	e732      	b.n	8001174 <__udivmoddi4+0x12c>
 800130e:	4630      	mov	r0, r6
 8001310:	e709      	b.n	8001126 <__udivmoddi4+0xde>
 8001312:	4464      	add	r4, ip
 8001314:	3802      	subs	r0, #2
 8001316:	e742      	b.n	800119e <__udivmoddi4+0x156>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <HAL_UARTEx_RxEventCallback>:

/* Diese Funktion ist die Callback-Funktion des UART-Empfangsinterrupts.
   Immer wenn Daten am RX-Pin von UART verfügbar sind, wird diese Funktion ausgeführt.
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
	//Variable, die zum Kopieren von Daten aus dem RX-Puffer in den Hauptpuffer verwendet wird.
	uint8_t Counter = 0 ;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

	//Prüfen, ob der Interrupt vom USART2 kommt. Da wir derzeit USART 2 verwenden
	if(huart -> Instance == USART2 )
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <HAL_UARTEx_RxEventCallback+0xc0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d14e      	bne.n	80013d4 <HAL_UARTEx_RxEventCallback+0xb8>
	{
		//Schleife zum Kopieren der Daten vom Rx-Puffer in den Hauptpuffer.
		while(Counter <= Size)
 8001336:	e03b      	b.n	80013b0 <HAL_UARTEx_RxEventCallback+0x94>
		{
			//Kopieren von Daten aus dem Rx-Puffer in den Hauptpuffer.
			MainBuf[MainBufCounter] = RxBuf[Counter++] ;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	73fa      	strb	r2, [r7, #15]
 800133e:	4619      	mov	r1, r3
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_UARTEx_RxEventCallback+0xc8>)
 8001348:	5c59      	ldrb	r1, [r3, r1]
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_UARTEx_RxEventCallback+0xcc>)
 800134c:	5499      	strb	r1, [r3, r2]

			//Prüfen Sie auf das Zeichen \n, das angibt, dass der vollständige Befehl empfangen worden ist.
			if(MainBuf[MainBufCounter] == '\n')
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	2b0a      	cmp	r3, #10
 800135a:	d117      	bne.n	800138c <HAL_UARTEx_RxEventCallback+0x70>
			{
				for(int i = 0 ; i < (MainBufCounter); i++)  //den empfangenen Befehl in den Befehlspuffer einfügen.
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	e00b      	b.n	800137a <HAL_UARTEx_RxEventCallback+0x5e>
				{
					commandBuf[i] =MainBuf[i];
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	7819      	ldrb	r1, [r3, #0]
 800136a:	4a20      	ldr	r2, [pc, #128]	; (80013ec <HAL_UARTEx_RxEventCallback+0xd0>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	701a      	strb	r2, [r3, #0]
				for(int i = 0 ; i < (MainBufCounter); i++)  //den empfangenen Befehl in den Befehlspuffer einfügen.
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3301      	adds	r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_UARTEx_RxEventCallback+0xc4>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4293      	cmp	r3, r2
 8001384:	dbed      	blt.n	8001362 <HAL_UARTEx_RxEventCallback+0x46>

				}

				newCommandReceived = true;  //Flagge, die anzeigt, dass der neue Befehl empfangen wurde.
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
			}

			//Prüfen Sie, dass am Ende jeder Datenkopie keine Null hinzugefügt wird.
			if(Counter - 1 != Size)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	1e5a      	subs	r2, r3, #1
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	429a      	cmp	r2, r3
 8001394:	d005      	beq.n	80013a2 <HAL_UARTEx_RxEventCallback+0x86>
			{
				//Inkrementieren des Hauptpufferzählers
				MainBufCounter++;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_UARTEx_RxEventCallback+0xc4>)
 80013a0:	801a      	strh	r2, [r3, #0]
			}

			//Prüfen, ob der Hauptpuffer voll mit Daten ist. In diesem Fall werden die Daten von Anfang an ersetzt.
			if(MainBufCounter > 64 )
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_UARTEx_RxEventCallback+0xc4>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d902      	bls.n	80013b0 <HAL_UARTEx_RxEventCallback+0x94>
		    {
				//Zurücksetzen des Hauptpufferzählers
		    	MainBufCounter = 0;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_UARTEx_RxEventCallback+0xc4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
		while(Counter <= Size)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d2be      	bcs.n	8001338 <HAL_UARTEx_RxEventCallback+0x1c>
		    }
		}

		//Diese Funktion wird verwendet, um Daten von UART mit DMA zu empfangen, bis der Datenpuffer voll ist oder die IDLE Line erkannt wird.
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	4909      	ldr	r1, [pc, #36]	; (80013e4 <HAL_UARTEx_RxEventCallback+0xc8>)
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <HAL_UARTEx_RxEventCallback+0xd8>)
 80013c0:	f004 fd1d 	bl	8005dfe <HAL_UARTEx_ReceiveToIdle_DMA>
		//Deaktivieren Sie den Interrupt für die halb übertragenen Daten.
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_UARTEx_RxEventCallback+0xdc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_UARTEx_RxEventCallback+0xdc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0204 	bic.w	r2, r2, #4
 80013d2:	601a      	str	r2, [r3, #0]
	}
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40004400 	.word	0x40004400
 80013e0:	20000380 	.word	0x20000380
 80013e4:	200002f4 	.word	0x200002f4
 80013e8:	20000334 	.word	0x20000334
 80013ec:	20000384 	.word	0x20000384
 80013f0:	200003c5 	.word	0x200003c5
 80013f4:	20000228 	.word	0x20000228
 80013f8:	200002ac 	.word	0x200002ac

080013fc <Uprintf>:
 * Nimmt einen String vom Benutzer.

 * */

void Uprintf(char *str)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	//Funktion zur Übertragung von Daten auf UART.
	HAL_UART_Transmit(&huart2 ,(uint8_t*) str, strlen(str),1000);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7fe fee3 	bl	80001d0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <Uprintf+0x28>)
 8001416:	f003 fa87 	bl	8004928 <HAL_UART_Transmit>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000228 	.word	0x20000228

08001428 <get_double>:
//Diese Funktion wird verwendet, um den Float-Wert aus einer String zu erhalten.
double get_double(const unsigned char *str)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	/* Erstes Überspringen nicht-ziffriger Zeichen */
	    /* Sonderfall zur Behandlung negativer Zahlen */
    while (*str && !(isdigit(*str) || ((*str == '-' || *str == '+') && isdigit(*(str + 1)))))
 8001430:	e002      	b.n	8001438 <get_double+0x10>
        str++;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3301      	adds	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
    while (*str && !(isdigit(*str) || ((*str == '-' || *str == '+') && isdigit(*(str + 1)))))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d01c      	beq.n	800147a <get_double+0x52>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <get_double+0x70>)
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d112      	bne.n	800147a <get_double+0x52>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b2d      	cmp	r3, #45	; 0x2d
 800145a:	d003      	beq.n	8001464 <get_double+0x3c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b2b      	cmp	r3, #43	; 0x2b
 8001462:	d1e6      	bne.n	8001432 <get_double+0xa>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <get_double+0x70>)
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0db      	beq.n	8001432 <get_double+0xa>

    /* Das Parsen in ein Double */
    return strtod((const char *)str, NULL);
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f006 fa3f 	bl	8007900 <strtod>
 8001482:	eeb0 7a40 	vmov.f32	s14, s0
 8001486:	eef0 7a60 	vmov.f32	s15, s1
}
 800148a:	eeb0 0a47 	vmov.f32	s0, s14
 800148e:	eef0 0a67 	vmov.f32	s1, s15
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	0800a998 	.word	0x0800a998

0800149c <n_tu>:
//Diese Funktion wird bei der Umwandlung von Float in String verwendet.
int n_tu(int number, int count)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
    int result = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
    while(count-- > 0)
 80014aa:	e004      	b.n	80014b6 <n_tu+0x1a>
        result *= number;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	60fb      	str	r3, [r7, #12]
    while(count-- > 0)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	1e5a      	subs	r2, r3, #1
 80014ba:	603a      	str	r2, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	dcf5      	bgt.n	80014ac <n_tu+0x10>

    return result;
 80014c0:	68fb      	ldr	r3, [r7, #12]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <float_to_string>:
//Diese Funktion wird verwendet, um Float-Werte in Strings umzuwandeln.
void float_to_string(float f, char r[])
{
 80014ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d2:	b09a      	sub	sp, #104	; 0x68
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 80014da:	62b8      	str	r0, [r7, #40]	; 0x28
    long long int length, length2, i, number, position, sign;
    float number2;

    sign = -1;    // -1 == positive Zahl
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if (f < 0)
 80014e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d50b      	bpl.n	800150e <float_to_string+0x40>
    {
        sign = '-';
 80014f6:	f04f 022d 	mov.w	r2, #45	; 0x2d
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        f *= -1;
 8001502:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001506:	eef1 7a67 	vneg.f32	s15, s15
 800150a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    number2 = f;
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
    number = f;
 8001512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001514:	f7ff fd2e 	bl	8000f74 <__aeabi_f2lz>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    length = 0;  // Größe des Dezimalteils
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    length2 = 0; // Größe des Zehntels
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    /* Berechnung des zehnten Teils der Länge2 */
    while( (number2 - (float)number) != 0.0 && !((number2 - (float)number) < 0.0) )
 8001538:	e01e      	b.n	8001578 <float_to_string+0xaa>
    {
         number2 = f * (n_tu(10.0, length2 + 1));
 800153a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800153c:	3301      	adds	r3, #1
 800153e:	4619      	mov	r1, r3
 8001540:	200a      	movs	r0, #10
 8001542:	f7ff ffab 	bl	800149c <n_tu>
 8001546:	ee07 0a90 	vmov	s15, r0
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001556:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         number = number2;
 800155a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800155c:	f7ff fd0a 	bl	8000f74 <__aeabi_f2lz>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

         length2++;
 8001568:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800156c:	f112 0801 	adds.w	r8, r2, #1
 8001570:	f143 0900 	adc.w	r9, r3, #0
 8001574:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
    while( (number2 - (float)number) != 0.0 && !((number2 - (float)number) < 0.0) )
 8001578:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800157c:	f7ff fc54 	bl	8000e28 <__aeabi_l2f>
 8001580:	ee07 0a10 	vmov	s14, r0
 8001584:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800158c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d016      	beq.n	80015c4 <float_to_string+0xf6>
 8001596:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800159a:	f7ff fc45 	bl	8000e28 <__aeabi_l2f>
 800159e:	ee07 0a10 	vmov	s14, r0
 80015a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	bf4c      	ite	mi
 80015b4:	2301      	movmi	r3, #1
 80015b6:	2300      	movpl	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ba      	bne.n	800153a <float_to_string+0x6c>
    }

    /* Berechnung der Länge des Dezimalteils */
    for (length = (f > 1) ? 0 : 1; f > 1; length++)
 80015c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	bfcc      	ite	gt
 80015d6:	2301      	movgt	r3, #1
 80015d8:	2300      	movle	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	17da      	asrs	r2, r3, #31
 80015e4:	623b      	str	r3, [r7, #32]
 80015e6:	627a      	str	r2, [r7, #36]	; 0x24
 80015e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015ec:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80015f0:	e012      	b.n	8001618 <float_to_string+0x14a>
        f /= 10;
 80015f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80015fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (length = (f > 1) ? 0 : 1; f > 1; length++)
 8001602:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001606:	1c51      	adds	r1, r2, #1
 8001608:	61b9      	str	r1, [r7, #24]
 800160a:	f143 0300 	adc.w	r3, r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001614:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001618:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800161c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	dce3      	bgt.n	80015f2 <float_to_string+0x124>

    position = length;
 800162a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800162e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    length = length + 1 + length2;
 8001632:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001636:	1c54      	adds	r4, r2, #1
 8001638:	f143 0500 	adc.w	r5, r3, #0
 800163c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001640:	1911      	adds	r1, r2, r4
 8001642:	6139      	str	r1, [r7, #16]
 8001644:	416b      	adcs	r3, r5
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800164c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    number = number2;
 8001650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001652:	f7ff fc8f 	bl	8000f74 <__aeabi_f2lz>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if (sign == '-')
 800165e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001662:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
 8001666:	430b      	orrs	r3, r1
 8001668:	d115      	bne.n	8001696 <float_to_string+0x1c8>
    {
        length++;
 800166a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800166e:	1c51      	adds	r1, r2, #1
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	f143 0300 	adc.w	r3, r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800167c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
        position++;
 8001680:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001684:	1c51      	adds	r1, r2, #1
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	f143 0300 	adc.w	r3, r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001692:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    }

    for (i = length; i >= 0 ; i--)
 8001696:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800169a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800169e:	e04e      	b.n	800173e <float_to_string+0x270>
    {
        if (i == (length))
 80016a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016a4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016a8:	4299      	cmp	r1, r3
 80016aa:	bf08      	it	eq
 80016ac:	4290      	cmpeq	r0, r2
 80016ae:	d105      	bne.n	80016bc <float_to_string+0x1ee>
            r[i] = '\0';
 80016b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b4:	4413      	add	r3, r2
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e038      	b.n	800172e <float_to_string+0x260>
        else if(i == (position))
 80016bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016c4:	4299      	cmp	r1, r3
 80016c6:	bf08      	it	eq
 80016c8:	4290      	cmpeq	r0, r2
 80016ca:	d105      	bne.n	80016d8 <float_to_string+0x20a>
            r[i] = '.';
 80016cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d0:	4413      	add	r3, r2
 80016d2:	222e      	movs	r2, #46	; 0x2e
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e02a      	b.n	800172e <float_to_string+0x260>
        else if(sign == '-' && i == 0)
 80016d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016dc:	f1a2 012d 	sub.w	r1, r2, #45	; 0x2d
 80016e0:	430b      	orrs	r3, r1
 80016e2:	d109      	bne.n	80016f8 <float_to_string+0x22a>
 80016e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80016e8:	4313      	orrs	r3, r2
 80016ea:	d105      	bne.n	80016f8 <float_to_string+0x22a>
            r[i] = '-';
 80016ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f0:	4413      	add	r3, r2
 80016f2:	222d      	movs	r2, #45	; 0x2d
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	e01a      	b.n	800172e <float_to_string+0x260>
        else
        {
            r[i] = (number % 10) + '0';
 80016f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80016fc:	f04f 020a 	mov.w	r2, #10
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	f7ff fbce 	bl	8000ea4 <__aeabi_ldivmod>
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800170e:	440b      	add	r3, r1
 8001710:	3230      	adds	r2, #48	; 0x30
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]
            number /=10;
 8001716:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800171a:	f04f 020a 	mov.w	r2, #10
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	f7ff fbbf 	bl	8000ea4 <__aeabi_ldivmod>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    for (i = length; i >= 0 ; i--)
 800172e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001732:	f112 3aff 	adds.w	sl, r2, #4294967295
 8001736:	f143 3bff 	adc.w	fp, r3, #4294967295
 800173a:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
 800173e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001742:	2b00      	cmp	r3, #0
 8001744:	daac      	bge.n	80016a0 <float_to_string+0x1d2>
        }
    }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	3768      	adds	r7, #104	; 0x68
 800174c:	46bd      	mov	sp, r7
 800174e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001754 <lowercase>:
char* lowercase(char* s) {
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  for(char *p=s; *p; p++) *p=tolower(*p);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e015      	b.n	800178e <lowercase+0x3a>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	72fb      	strb	r3, [r7, #11]
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	3301      	adds	r3, #1
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <lowercase+0x50>)
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <lowercase+0x2c>
 800177a:	7afb      	ldrb	r3, [r7, #11]
 800177c:	3320      	adds	r3, #32
 800177e:	e000      	b.n	8001782 <lowercase+0x2e>
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1e5      	bne.n	8001762 <lowercase+0xe>
  return s;
 8001796:	687b      	ldr	r3, [r7, #4]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	0800a998 	.word	0x0800a998

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  HAL_Init();
 80017ac:	f000 fde0 	bl	8002370 <HAL_Init>

  SystemClock_Config();
 80017b0:	f000 fa6c 	bl	8001c8c <SystemClock_Config>

  /* Initialisierung aller konfigurierten Peripheriegeräte */
  MX_GPIO_Init();
 80017b4:	f000 fb6a 	bl	8001e8c <MX_GPIO_Init>
  MX_DMA_Init();
 80017b8:	f000 fb4a 	bl	8001e50 <MX_DMA_Init>
  MX_DAC1_Init();
 80017bc:	f000 fadc 	bl	8001d78 <MX_DAC1_Init>
  MX_USART2_UART_Init();
 80017c0:	f000 fb16 	bl	8001df0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Diese Funktion wird verwendet, um Daten von UART mit DMA zu empfangen, bis der Datenpuffer voll ist oder die idle line erkannt wird.
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80017c4:	2240      	movs	r2, #64	; 0x40
 80017c6:	496c      	ldr	r1, [pc, #432]	; (8001978 <main+0x1d0>)
 80017c8:	486c      	ldr	r0, [pc, #432]	; (800197c <main+0x1d4>)
 80017ca:	f004 fb18 	bl	8005dfe <HAL_UARTEx_ReceiveToIdle_DMA>
  //Deaktivieren des Interrupts "Halbe Daten übertragen"..
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80017ce:	4b6c      	ldr	r3, [pc, #432]	; (8001980 <main+0x1d8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <main+0x1d8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0204 	bic.w	r2, r2, #4
 80017dc:	601a      	str	r2, [r3, #0]
  //Aktivieren Sie den Output von DAC-Kanal 1;
 HAL_DAC_Start(&hdac1 , DAC_CHANNEL_1);
 80017de:	2100      	movs	r1, #0
 80017e0:	4868      	ldr	r0, [pc, #416]	; (8001984 <main+0x1dc>)
 80017e2:	f000 ff98 	bl	8002716 <HAL_DAC_Start>
 isChannel1Active = true;
 80017e6:	4b68      	ldr	r3, [pc, #416]	; (8001988 <main+0x1e0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
 activeChannel = 1;
 80017ec:	4b67      	ldr	r3, [pc, #412]	; (800198c <main+0x1e4>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]


  while (1)
  {

   if(newCommandReceived == true)                   //Prüfen, ob der neue Befehl empfangen wurde.
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <main+0x1e8>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0fb      	beq.n	80017f2 <main+0x4a>
	    {


	  	retCommand1 = strstr(lowercase((char *)commandBuf), "instrument:select?");//Prüfen, ob der "INSTrument:SELect?" Befehl empfangen wurde.
 80017fa:	4866      	ldr	r0, [pc, #408]	; (8001994 <main+0x1ec>)
 80017fc:	f7ff ffaa 	bl	8001754 <lowercase>
 8001800:	4603      	mov	r3, r0
 8001802:	4965      	ldr	r1, [pc, #404]	; (8001998 <main+0x1f0>)
 8001804:	4618      	mov	r0, r3
 8001806:	f005 fa3a 	bl	8006c7e <strstr>
 800180a:	4603      	mov	r3, r0
 800180c:	4a63      	ldr	r2, [pc, #396]	; (800199c <main+0x1f4>)
 800180e:	6013      	str	r3, [r2, #0]
        if ((retCommand1==0)) {retCommand1 = strstr(lowercase((char *)commandBuf), "inst:sel?");}
 8001810:	4b62      	ldr	r3, [pc, #392]	; (800199c <main+0x1f4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <main+0x86>
 8001818:	485e      	ldr	r0, [pc, #376]	; (8001994 <main+0x1ec>)
 800181a:	f7ff ff9b 	bl	8001754 <lowercase>
 800181e:	4603      	mov	r3, r0
 8001820:	495f      	ldr	r1, [pc, #380]	; (80019a0 <main+0x1f8>)
 8001822:	4618      	mov	r0, r3
 8001824:	f005 fa2b 	bl	8006c7e <strstr>
 8001828:	4603      	mov	r3, r0
 800182a:	4a5c      	ldr	r2, [pc, #368]	; (800199c <main+0x1f4>)
 800182c:	6013      	str	r3, [r2, #0]

        retCommand2 = strstr(lowercase((char *)commandBuf), "source:voltage:level?");      //Prüfen, ob der "SOURce:VOLTage:LEVel?" Befehl empfangen wird.
 800182e:	4859      	ldr	r0, [pc, #356]	; (8001994 <main+0x1ec>)
 8001830:	f7ff ff90 	bl	8001754 <lowercase>
 8001834:	4603      	mov	r3, r0
 8001836:	495b      	ldr	r1, [pc, #364]	; (80019a4 <main+0x1fc>)
 8001838:	4618      	mov	r0, r3
 800183a:	f005 fa20 	bl	8006c7e <strstr>
 800183e:	4603      	mov	r3, r0
 8001840:	4a59      	ldr	r2, [pc, #356]	; (80019a8 <main+0x200>)
 8001842:	6013      	str	r3, [r2, #0]
	  	if ((retCommand2==0)) {retCommand2 = strstr(lowercase((char *)commandBuf), "sour:volt:lev?");}
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <main+0x200>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <main+0xba>
 800184c:	4851      	ldr	r0, [pc, #324]	; (8001994 <main+0x1ec>)
 800184e:	f7ff ff81 	bl	8001754 <lowercase>
 8001852:	4603      	mov	r3, r0
 8001854:	4955      	ldr	r1, [pc, #340]	; (80019ac <main+0x204>)
 8001856:	4618      	mov	r0, r3
 8001858:	f005 fa11 	bl	8006c7e <strstr>
 800185c:	4603      	mov	r3, r0
 800185e:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <main+0x200>)
 8001860:	6013      	str	r3, [r2, #0]

	  	retCommand3 = strstr(lowercase((char *)commandBuf), "instrument:select:output1"); //Prüfen, ob der Befehl "INSTrument:SELect:OUTPut1" empfangen wird.
 8001862:	484c      	ldr	r0, [pc, #304]	; (8001994 <main+0x1ec>)
 8001864:	f7ff ff76 	bl	8001754 <lowercase>
 8001868:	4603      	mov	r3, r0
 800186a:	4951      	ldr	r1, [pc, #324]	; (80019b0 <main+0x208>)
 800186c:	4618      	mov	r0, r3
 800186e:	f005 fa06 	bl	8006c7e <strstr>
 8001872:	4603      	mov	r3, r0
 8001874:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <main+0x20c>)
 8001876:	6013      	str	r3, [r2, #0]
	  	if ((retCommand3==0)) {retCommand3 = strstr(lowercase((char *)commandBuf), "inst:sel:outp1");}
 8001878:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <main+0x20c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <main+0xee>
 8001880:	4844      	ldr	r0, [pc, #272]	; (8001994 <main+0x1ec>)
 8001882:	f7ff ff67 	bl	8001754 <lowercase>
 8001886:	4603      	mov	r3, r0
 8001888:	494b      	ldr	r1, [pc, #300]	; (80019b8 <main+0x210>)
 800188a:	4618      	mov	r0, r3
 800188c:	f005 f9f7 	bl	8006c7e <strstr>
 8001890:	4603      	mov	r3, r0
 8001892:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <main+0x20c>)
 8001894:	6013      	str	r3, [r2, #0]

	  	retCommand4 = strstr(lowercase((char *)commandBuf), "instrument:select:output2");  //Prüfen, ob der Befehl "INSTrument:SELect:OUTPut2" empfangen wird.
 8001896:	483f      	ldr	r0, [pc, #252]	; (8001994 <main+0x1ec>)
 8001898:	f7ff ff5c 	bl	8001754 <lowercase>
 800189c:	4603      	mov	r3, r0
 800189e:	4947      	ldr	r1, [pc, #284]	; (80019bc <main+0x214>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 f9ec 	bl	8006c7e <strstr>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <main+0x218>)
 80018aa:	6013      	str	r3, [r2, #0]
	  	if ((retCommand4==0)) {retCommand4 = strstr(lowercase((char *)commandBuf), "inst:sel:outp2");}
 80018ac:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <main+0x218>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10a      	bne.n	80018ca <main+0x122>
 80018b4:	4837      	ldr	r0, [pc, #220]	; (8001994 <main+0x1ec>)
 80018b6:	f7ff ff4d 	bl	8001754 <lowercase>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4941      	ldr	r1, [pc, #260]	; (80019c4 <main+0x21c>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 f9dd 	bl	8006c7e <strstr>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <main+0x218>)
 80018c8:	6013      	str	r3, [r2, #0]

	  	retCommand5 = strstr(lowercase((char *)commandBuf), "source:voltage:level:");    //Prüfen, ob der "SOURce:VOLTage:LEVel:" Befehl empfangen wird.
 80018ca:	4832      	ldr	r0, [pc, #200]	; (8001994 <main+0x1ec>)
 80018cc:	f7ff ff42 	bl	8001754 <lowercase>
 80018d0:	4603      	mov	r3, r0
 80018d2:	493d      	ldr	r1, [pc, #244]	; (80019c8 <main+0x220>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f005 f9d2 	bl	8006c7e <strstr>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <main+0x224>)
 80018de:	6013      	str	r3, [r2, #0]
	  	if ((retCommand5==0)) {retCommand5 = strstr(lowercase((char *)commandBuf), "sour:volt:lev:");}
 80018e0:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <main+0x224>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10a      	bne.n	80018fe <main+0x156>
 80018e8:	482a      	ldr	r0, [pc, #168]	; (8001994 <main+0x1ec>)
 80018ea:	f7ff ff33 	bl	8001754 <lowercase>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4937      	ldr	r1, [pc, #220]	; (80019d0 <main+0x228>)
 80018f2:	4618      	mov	r0, r3
 80018f4:	f005 f9c3 	bl	8006c7e <strstr>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a34      	ldr	r2, [pc, #208]	; (80019cc <main+0x224>)
 80018fc:	6013      	str	r3, [r2, #0]

	   if(retCommand1)
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <main+0x1f4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01e      	beq.n	8001944 <main+0x19c>
	      {
	         if(activeChannel == 1u)     //Prüfung auf den aktiven Kanal 1
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <main+0x1e4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d103      	bne.n	8001916 <main+0x16e>
	         {
	      	   Uprintf("1\n");   //Senden Sie den aktiven Kanal-String zurück
 800190e:	4831      	ldr	r0, [pc, #196]	; (80019d4 <main+0x22c>)
 8001910:	f7ff fd74 	bl	80013fc <Uprintf>
 8001914:	e006      	b.n	8001924 <main+0x17c>
	         }
	         else
	         if(activeChannel == 2u)     //Prüfung auf den aktiven Kanal 2
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <main+0x1e4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d102      	bne.n	8001924 <main+0x17c>
	         {
	      	   Uprintf("2\n");   //Senden Sie den aktiven Kanal-String zurück
 800191e:	482e      	ldr	r0, [pc, #184]	; (80019d8 <main+0x230>)
 8001920:	f7ff fd6c 	bl	80013fc <Uprintf>
	         }

	         newCommandReceived = false;            //Rücksetzen des commandBuf und des MainBuf sowie des Flags für den neuen empfangenen Befehl
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <main+0x1e8>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
	         memset(commandBuf , 0 ,commandBuf_SIZE*(sizeof(commandBuf[0])));
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	2100      	movs	r1, #0
 800192e:	4819      	ldr	r0, [pc, #100]	; (8001994 <main+0x1ec>)
 8001930:	f004 faea 	bl	8005f08 <memset>
	         MainBufCounter = 0 ;
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <main+0x234>)
 8001936:	2200      	movs	r2, #0
 8001938:	801a      	strh	r2, [r3, #0]
	         memset(MainBuf , 0 ,MainBuf_SIZE*(sizeof(MainBuf[0])));
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	2100      	movs	r1, #0
 800193e:	4828      	ldr	r0, [pc, #160]	; (80019e0 <main+0x238>)
 8001940:	f004 fae2 	bl	8005f08 <memset>

	      }
	      if(retCommand2)
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <main+0x200>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d076      	beq.n	8001a3a <main+0x292>
	      {
	    	if(activeChannel == 1u)
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <main+0x1e4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d14d      	bne.n	80019f0 <main+0x248>
	    	{
	    	   float_to_string(value1,str);               //den Spannungswert in einen Stringwert umwandeln.
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <main+0x23c>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	4823      	ldr	r0, [pc, #140]	; (80019e8 <main+0x240>)
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	f7ff fdb5 	bl	80014ce <float_to_string>
	    	   Uprintf(strncat((char *)str,&ch,1));   //Senden des Spannungswertes über UART
 8001964:	2201      	movs	r2, #1
 8001966:	4921      	ldr	r1, [pc, #132]	; (80019ec <main+0x244>)
 8001968:	481f      	ldr	r0, [pc, #124]	; (80019e8 <main+0x240>)
 800196a:	f005 f975 	bl	8006c58 <strncat>
 800196e:	4603      	mov	r3, r0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fd43 	bl	80013fc <Uprintf>
 8001976:	e050      	b.n	8001a1a <main+0x272>
 8001978:	200002f4 	.word	0x200002f4
 800197c:	20000228 	.word	0x20000228
 8001980:	200002ac 	.word	0x200002ac
 8001984:	20000214 	.word	0x20000214
 8001988:	200003c6 	.word	0x200003c6
 800198c:	200003c4 	.word	0x200003c4
 8001990:	200003c5 	.word	0x200003c5
 8001994:	20000384 	.word	0x20000384
 8001998:	0800a880 	.word	0x0800a880
 800199c:	200003c8 	.word	0x200003c8
 80019a0:	0800a894 	.word	0x0800a894
 80019a4:	0800a8a0 	.word	0x0800a8a0
 80019a8:	200003cc 	.word	0x200003cc
 80019ac:	0800a8b8 	.word	0x0800a8b8
 80019b0:	0800a8c8 	.word	0x0800a8c8
 80019b4:	200003d0 	.word	0x200003d0
 80019b8:	0800a8e4 	.word	0x0800a8e4
 80019bc:	0800a8f4 	.word	0x0800a8f4
 80019c0:	200003d4 	.word	0x200003d4
 80019c4:	0800a910 	.word	0x0800a910
 80019c8:	0800a920 	.word	0x0800a920
 80019cc:	200003d8 	.word	0x200003d8
 80019d0:	0800a938 	.word	0x0800a938
 80019d4:	0800a948 	.word	0x0800a948
 80019d8:	0800a94c 	.word	0x0800a94c
 80019dc:	20000380 	.word	0x20000380
 80019e0:	20000334 	.word	0x20000334
 80019e4:	20000374 	.word	0x20000374
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000014 	.word	0x20000014
	    	}
	    	else
	        {
	    		if(activeChannel == 2u)
 80019f0:	4b95      	ldr	r3, [pc, #596]	; (8001c48 <main+0x4a0>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d110      	bne.n	8001a1a <main+0x272>
				{
	    			float_to_string(value2,str);               //den Spannungswert in einen Stringwert umwandeln.
 80019f8:	4b94      	ldr	r3, [pc, #592]	; (8001c4c <main+0x4a4>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	4894      	ldr	r0, [pc, #592]	; (8001c50 <main+0x4a8>)
 8001a00:	eeb0 0a67 	vmov.f32	s0, s15
 8001a04:	f7ff fd63 	bl	80014ce <float_to_string>
	    			Uprintf(strncat((char *)str,&ch,2));   //Senden des Spannungswertes über UART
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4992      	ldr	r1, [pc, #584]	; (8001c54 <main+0x4ac>)
 8001a0c:	4890      	ldr	r0, [pc, #576]	; (8001c50 <main+0x4a8>)
 8001a0e:	f005 f923 	bl	8006c58 <strncat>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fcf1 	bl	80013fc <Uprintf>
				}
	    	}
			newCommandReceived = false;            //Rücksetzen des commandBuf und des MainBuf sowie des Flags für den neuen empfangenen Befehl
 8001a1a:	4b8f      	ldr	r3, [pc, #572]	; (8001c58 <main+0x4b0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
	      	memset(commandBuf , 0 ,commandBuf_SIZE*(sizeof(commandBuf[0])));
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	2100      	movs	r1, #0
 8001a24:	488d      	ldr	r0, [pc, #564]	; (8001c5c <main+0x4b4>)
 8001a26:	f004 fa6f 	bl	8005f08 <memset>
	      	MainBufCounter = 0 ;
 8001a2a:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <main+0x4b8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	801a      	strh	r2, [r3, #0]
	      	memset(MainBuf , 0 ,MainBuf_SIZE*(sizeof(MainBuf[0])));
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	2100      	movs	r1, #0
 8001a34:	488b      	ldr	r0, [pc, #556]	; (8001c64 <main+0x4bc>)
 8001a36:	f004 fa67 	bl	8005f08 <memset>
	      }
	      if(retCommand3)
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <main+0x4c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d040      	beq.n	8001ac4 <main+0x31c>
	      {
	          if(isChannel1Active == false)
 8001a42:	4b8a      	ldr	r3, [pc, #552]	; (8001c6c <main+0x4c4>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	f083 0301 	eor.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d026      	beq.n	8001a9e <main+0x2f6>
	          {
	        	//Aktivieren Sie den Output von DAC-Kanal 1;
	            HAL_DAC_Start(&hdac1 , DAC_CHANNEL_1);
 8001a50:	2100      	movs	r1, #0
 8001a52:	4887      	ldr	r0, [pc, #540]	; (8001c70 <main+0x4c8>)
 8001a54:	f000 fe5f 	bl	8002716 <HAL_DAC_Start>
	            isChannel1Active = true;
 8001a58:	4b84      	ldr	r3, [pc, #528]	; (8001c6c <main+0x4c4>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
	            //Digitale Wertberechnung zum Schreiben auf den DAC.
	            VAR = value1 * (0xfff + 1) / 3.3;
 8001a5e:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <main+0x4cc>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001c78 <main+0x4d0>
 8001a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6c:	ee17 0a90 	vmov	r0, s15
 8001a70:	f7fe fd6a 	bl	8000548 <__aeabi_f2d>
 8001a74:	a372      	add	r3, pc, #456	; (adr r3, 8001c40 <main+0x498>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fee7 	bl	800084c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f88f 	bl	8000ba8 <__aeabi_d2uiz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a7b      	ldr	r2, [pc, #492]	; (8001c7c <main+0x4d4>)
 8001a8e:	6013      	str	r3, [r2, #0]
	            //Diese Funktion schreibt den berechneten digitalen Wert in den DAC-Kanal..
	            HAL_DAC_SetValue(&hdac1 , DAC_CHANNEL_1 , DAC_ALIGN_12B_R , VAR);
 8001a90:	4b7a      	ldr	r3, [pc, #488]	; (8001c7c <main+0x4d4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	4875      	ldr	r0, [pc, #468]	; (8001c70 <main+0x4c8>)
 8001a9a:	f000 fe89 	bl	80027b0 <HAL_DAC_SetValue>

	          }

	          activeChannel = 1u;
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <main+0x4a0>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
	          //Rücksetzen des commandBuf und des MainBuf und des empfangenen neuen Befehls
	      	newCommandReceived = false;
 8001aa4:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <main+0x4b0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
	      	memset(commandBuf , 0 ,commandBuf_SIZE*(sizeof(commandBuf[0])));
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	2100      	movs	r1, #0
 8001aae:	486b      	ldr	r0, [pc, #428]	; (8001c5c <main+0x4b4>)
 8001ab0:	f004 fa2a 	bl	8005f08 <memset>
	      	MainBufCounter = 0 ;
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <main+0x4b8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	801a      	strh	r2, [r3, #0]
	      	memset(MainBuf , 0 ,MainBuf_SIZE*(sizeof(MainBuf[0])));
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	2100      	movs	r1, #0
 8001abe:	4869      	ldr	r0, [pc, #420]	; (8001c64 <main+0x4bc>)
 8001ac0:	f004 fa22 	bl	8005f08 <memset>
	      }

	      if(retCommand4)
 8001ac4:	4b6e      	ldr	r3, [pc, #440]	; (8001c80 <main+0x4d8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d040      	beq.n	8001b4e <main+0x3a6>
	      {
	      	if(isChannel2Active == false)
 8001acc:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <main+0x4dc>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	f083 0301 	eor.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d026      	beq.n	8001b28 <main+0x380>
	      	{
	      		//Aktivieren Sie den Output von DAC-Kanal 2;
	      	    HAL_DAC_Start(&hdac1 , DAC_CHANNEL_2);
 8001ada:	2110      	movs	r1, #16
 8001adc:	4864      	ldr	r0, [pc, #400]	; (8001c70 <main+0x4c8>)
 8001ade:	f000 fe1a 	bl	8002716 <HAL_DAC_Start>
	      	    isChannel2Active = true;
 8001ae2:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <main+0x4dc>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
	      	    //Digitale Wertberechnung zum Schreiben auf den DAC.
	      	  	VAR = value2 * (0xfff + 1) / 3.3;
 8001ae8:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <main+0x4a4>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001c78 <main+0x4d0>
 8001af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af6:	ee17 0a90 	vmov	r0, s15
 8001afa:	f7fe fd25 	bl	8000548 <__aeabi_f2d>
 8001afe:	a350      	add	r3, pc, #320	; (adr r3, 8001c40 <main+0x498>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fea2 	bl	800084c <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f84a 	bl	8000ba8 <__aeabi_d2uiz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <main+0x4d4>)
 8001b18:	6013      	str	r3, [r2, #0]
	      	  	//Diese Funktion schreibt den berechneten digitalen Wert in den DAC-Kanal.
	      	  	HAL_DAC_SetValue(&hdac1 , DAC_CHANNEL_2 , DAC_ALIGN_12B_R , VAR);
 8001b1a:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <main+0x4d4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2110      	movs	r1, #16
 8001b22:	4853      	ldr	r0, [pc, #332]	; (8001c70 <main+0x4c8>)
 8001b24:	f000 fe44 	bl	80027b0 <HAL_DAC_SetValue>
	      	}

	      	activeChannel = 2u;
 8001b28:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <main+0x4a0>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	701a      	strb	r2, [r3, #0]
	      	//Rücksetzen des commandBuf und des MainBuf sowie des Flags für den neuen empfangenen Befehl
	      	newCommandReceived = false;
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <main+0x4b0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
	      	memset(commandBuf , 0 ,commandBuf_SIZE*(sizeof(commandBuf[0])));
 8001b34:	2240      	movs	r2, #64	; 0x40
 8001b36:	2100      	movs	r1, #0
 8001b38:	4848      	ldr	r0, [pc, #288]	; (8001c5c <main+0x4b4>)
 8001b3a:	f004 f9e5 	bl	8005f08 <memset>
	      	MainBufCounter = 0 ;
 8001b3e:	4b48      	ldr	r3, [pc, #288]	; (8001c60 <main+0x4b8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	801a      	strh	r2, [r3, #0]
	      	memset(MainBuf , 0 ,MainBuf_SIZE*(sizeof(MainBuf[0])));
 8001b44:	2240      	movs	r2, #64	; 0x40
 8001b46:	2100      	movs	r1, #0
 8001b48:	4846      	ldr	r0, [pc, #280]	; (8001c64 <main+0x4bc>)
 8001b4a:	f004 f9dd 	bl	8005f08 <memset>
	      }
	      if(retCommand5)
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <main+0x4e0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f43f ae4d 	beq.w	80017f2 <main+0x4a>

	      {
	         if(activeChannel == 1u)
 8001b58:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <main+0x4a0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d12c      	bne.n	8001bba <main+0x412>
	         {
	        	//Extrahieren Sie den Spannungswert aus dem Befehl.
	        	value1 = get_double(commandBuf);
 8001b60:	483e      	ldr	r0, [pc, #248]	; (8001c5c <main+0x4b4>)
 8001b62:	f7ff fc61 	bl	8001428 <get_double>
 8001b66:	ec53 2b10 	vmov	r2, r3, d0
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f83b 	bl	8000be8 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a3f      	ldr	r2, [pc, #252]	; (8001c74 <main+0x4cc>)
 8001b76:	6013      	str	r3, [r2, #0]
	            //Digitale Wertberechnung zum Schreiben auf den DAC.
	        	VAR = value1 * (0xfff + 1) / 3.3;
 8001b78:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <main+0x4cc>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001c78 <main+0x4d0>
 8001b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b86:	ee17 0a90 	vmov	r0, s15
 8001b8a:	f7fe fcdd 	bl	8000548 <__aeabi_f2d>
 8001b8e:	a32c      	add	r3, pc, #176	; (adr r3, 8001c40 <main+0x498>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fe5a 	bl	800084c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7ff f802 	bl	8000ba8 <__aeabi_d2uiz>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a35      	ldr	r2, [pc, #212]	; (8001c7c <main+0x4d4>)
 8001ba8:	6013      	str	r3, [r2, #0]
	        	//Diese Funktion schreibt den berechneten digitalen Wert in den DAC-Kanal..
	      	    HAL_DAC_SetValue(&hdac1 , DAC_CHANNEL_1 , DAC_ALIGN_12B_R , VAR);
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <main+0x4d4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	482f      	ldr	r0, [pc, #188]	; (8001c70 <main+0x4c8>)
 8001bb4:	f000 fdfc 	bl	80027b0 <HAL_DAC_SetValue>
 8001bb8:	e02f      	b.n	8001c1a <main+0x472>
	         }
	         else
	         if(activeChannel == 2u)
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <main+0x4a0>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d12b      	bne.n	8001c1a <main+0x472>
	  	     {
	        	 //Extrahieren Sie den Spannungswert aus dem Befehl.
	             value2 = get_double(commandBuf);
 8001bc2:	4826      	ldr	r0, [pc, #152]	; (8001c5c <main+0x4b4>)
 8001bc4:	f7ff fc30 	bl	8001428 <get_double>
 8001bc8:	ec53 2b10 	vmov	r2, r3, d0
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7ff f80a 	bl	8000be8 <__aeabi_d2f>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <main+0x4a4>)
 8001bd8:	6013      	str	r3, [r2, #0]
	        	 //Digitale Wertberechnung zum Schreiben auf den DAC.
	             VAR = value2 * (0xfff + 1) / 3.3;
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <main+0x4a4>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001c78 <main+0x4d0>
 8001be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be8:	ee17 0a90 	vmov	r0, s15
 8001bec:	f7fe fcac 	bl	8000548 <__aeabi_f2d>
 8001bf0:	a313      	add	r3, pc, #76	; (adr r3, 8001c40 <main+0x498>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fe29 	bl	800084c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe ffd1 	bl	8000ba8 <__aeabi_d2uiz>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <main+0x4d4>)
 8001c0a:	6013      	str	r3, [r2, #0]
	        	 //Diese Funktion schreibt den berechneten digitalen Wert in den DAC-Kanal.
	      	     HAL_DAC_SetValue(&hdac1 , DAC_CHANNEL_2 , DAC_ALIGN_12B_R , VAR);
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <main+0x4d4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	2110      	movs	r1, #16
 8001c14:	4816      	ldr	r0, [pc, #88]	; (8001c70 <main+0x4c8>)
 8001c16:	f000 fdcb 	bl	80027b0 <HAL_DAC_SetValue>
	  	    }

	         //Rücksetzen des commandBuf und des MainBuf sowie des Flags für den neuen empfangenen Befehl
	         newCommandReceived = false;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <main+0x4b0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
	         memset(commandBuf , 0 ,commandBuf_SIZE*(sizeof(commandBuf[0])));
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	2100      	movs	r1, #0
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <main+0x4b4>)
 8001c26:	f004 f96f 	bl	8005f08 <memset>
	         MainBufCounter = 0 ;
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <main+0x4b8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
	         memset(MainBuf , 0 ,MainBuf_SIZE*(sizeof(MainBuf[0])));
 8001c30:	2240      	movs	r2, #64	; 0x40
 8001c32:	2100      	movs	r1, #0
 8001c34:	480b      	ldr	r0, [pc, #44]	; (8001c64 <main+0x4bc>)
 8001c36:	f004 f967 	bl	8005f08 <memset>
   if(newCommandReceived == true)                   //Prüfen, ob der neue Befehl empfangen wurde.
 8001c3a:	e5da      	b.n	80017f2 <main+0x4a>
 8001c3c:	f3af 8000 	nop.w
 8001c40:	66666666 	.word	0x66666666
 8001c44:	400a6666 	.word	0x400a6666
 8001c48:	200003c4 	.word	0x200003c4
 8001c4c:	20000378 	.word	0x20000378
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000014 	.word	0x20000014
 8001c58:	200003c5 	.word	0x200003c5
 8001c5c:	20000384 	.word	0x20000384
 8001c60:	20000380 	.word	0x20000380
 8001c64:	20000334 	.word	0x20000334
 8001c68:	200003d0 	.word	0x200003d0
 8001c6c:	200003c6 	.word	0x200003c6
 8001c70:	20000214 	.word	0x20000214
 8001c74:	20000374 	.word	0x20000374
 8001c78:	45800000 	.word	0x45800000
 8001c7c:	2000037c 	.word	0x2000037c
 8001c80:	200003d4 	.word	0x200003d4
 8001c84:	200003c7 	.word	0x200003c7
 8001c88:	200003d8 	.word	0x200003d8

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0b8      	sub	sp, #224	; 0xe0
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c96:	2244      	movs	r2, #68	; 0x44
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 f934 	bl	8005f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2288      	movs	r2, #136	; 0x88
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f004 f926 	bl	8005f08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cca:	2310      	movs	r3, #16
 8001ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ce8:	2307      	movs	r3, #7
 8001cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 fb1a 	bl	8003338 <HAL_RCC_OscConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d0a:	f000 f911 	bl	8001f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0e:	230f      	movs	r3, #15
 8001d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d14:	2303      	movs	r3, #3
 8001d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d30:	2104      	movs	r1, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 fee8 	bl	8003b08 <HAL_RCC_ClockConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d3e:	f000 f8f7 	bl	8001f30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 f8e1 	bl	8003f14 <HAL_RCCEx_PeriphCLKConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d58:	f000 f8ea 	bl	8001f30 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d60:	f001 fa94 	bl	800328c <HAL_PWREx_ControlVoltageScaling>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001d6a:	f000 f8e1 	bl	8001f30 <Error_Handler>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	37e0      	adds	r7, #224	; 0xe0
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2224      	movs	r2, #36	; 0x24
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 f8bf 	bl	8005f08 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <MX_DAC1_Init+0x70>)
 8001d8c:	4a17      	ldr	r2, [pc, #92]	; (8001dec <MX_DAC1_Init+0x74>)
 8001d8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001d90:	4815      	ldr	r0, [pc, #84]	; (8001de8 <MX_DAC1_Init+0x70>)
 8001d92:	f000 fc9e 	bl	80026d2 <HAL_DAC_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001d9c:	f000 f8c8 	bl	8001f30 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	480b      	ldr	r0, [pc, #44]	; (8001de8 <MX_DAC1_Init+0x70>)
 8001dbc:	f000 fd1d 	bl	80027fa <HAL_DAC_ConfigChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001dc6:	f000 f8b3 	bl	8001f30 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_DAC1_Init+0x70>)
 8001dd2:	f000 fd12 	bl	80027fa <HAL_DAC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001ddc:	f000 f8a8 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000214 	.word	0x20000214
 8001dec:	40007400 	.word	0x40007400

08001df0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001df6:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <MX_USART2_UART_Init+0x5c>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_USART2_UART_Init+0x58>)
 8001e34:	f002 fd2a 	bl	800488c <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e3e:	f000 f877 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000228 	.word	0x20000228
 8001e4c:	40004400 	.word	0x40004400

08001e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_DMA_Init+0x38>)
 8001e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <MX_DMA_Init+0x38>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6493      	str	r3, [r2, #72]	; 0x48
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_DMA_Init+0x38>)
 8001e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2010      	movs	r0, #16
 8001e74:	f000 fbf7 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e78:	2010      	movs	r0, #16
 8001e7a:	f000 fc10 	bl	800269e <HAL_NVIC_EnableIRQ>

}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000

08001e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_GPIO_Init+0x9c>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <MX_GPIO_Init+0xa0>)
 8001f1a:	f000 ffff 	bl	8002f1c <HAL_GPIO_Init>

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	; 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	48000800 	.word	0x48000800

08001f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f34:	b672      	cpsid	i
}
 8001f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <Error_Handler+0x8>
	...

08001f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_MspInit+0x44>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_MspInit+0x44>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_MspInit+0x44>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_MspInit+0x44>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_MspInit+0x44>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6593      	str	r3, [r2, #88]	; 0x58
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_MspInit+0x44>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <HAL_DAC_MspInit+0x74>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d124      	bne.n	8001ff0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_DAC_MspInit+0x78>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <HAL_DAC_MspInit+0x78>)
 8001fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_DAC_MspInit+0x78>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_DAC_MspInit+0x78>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <HAL_DAC_MspInit+0x78>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_DAC_MspInit+0x78>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fd6:	2330      	movs	r3, #48	; 0x30
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fec:	f000 ff96 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40007400 	.word	0x40007400
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a30      	ldr	r2, [pc, #192]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d159      	bne.n	80020d6 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_UART_MspInit+0xe4>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a2f      	ldr	r2, [pc, #188]	; (80020e4 <HAL_UART_MspInit+0xe4>)
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_UART_MspInit+0xe4>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_UART_MspInit+0xe4>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_UART_MspInit+0xe4>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_UART_MspInit+0xe4>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002052:	230c      	movs	r3, #12
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002062:	2307      	movs	r3, #7
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f000 ff54 	bl	8002f1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_UART_MspInit+0xec>)
 8002078:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 800207c:	2202      	movs	r2, #2
 800207e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020aa:	480f      	ldr	r0, [pc, #60]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 80020ac:	f000 fcc0 	bl	8002a30 <HAL_DMA_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80020b6:	f7ff ff3b 	bl	8001f30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 80020be:	671a      	str	r2, [r3, #112]	; 0x70
 80020c0:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2026      	movs	r0, #38	; 0x26
 80020cc:	f000 facb 	bl	8002666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020d0:	2026      	movs	r0, #38	; 0x26
 80020d2:	f000 fae4 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40004400 	.word	0x40004400
 80020e4:	40021000 	.word	0x40021000
 80020e8:	200002ac 	.word	0x200002ac
 80020ec:	4002006c 	.word	0x4002006c

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213c:	f000 f974 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <DMA1_Channel6_IRQHandler+0x10>)
 800214a:	f000 fe08 	bl	8002d5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200002ac 	.word	0x200002ac

08002158 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <USART2_IRQHandler+0x10>)
 800215e:	f002 fc77 	bl	8004a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000228 	.word	0x20000228

0800216c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
	return 1;
 8002170:	2301      	movs	r3, #1
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_kill>:

int _kill(int pid, int sig)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002186:	f003 fe95 	bl	8005eb4 <__errno>
 800218a:	4603      	mov	r3, r0
 800218c:	2216      	movs	r2, #22
 800218e:	601a      	str	r2, [r3, #0]
	return -1;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_exit>:

void _exit (int status)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ffe7 	bl	800217c <_kill>
	while (1) {}		/* Make sure we hang here */
 80021ae:	e7fe      	b.n	80021ae <_exit+0x12>

080021b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e00a      	b.n	80021d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021c2:	f3af 8000 	nop.w
 80021c6:	4601      	mov	r1, r0
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	b2ca      	uxtb	r2, r1
 80021d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbf0      	blt.n	80021c2 <_read+0x12>
	}

return len;
 80021e0:	687b      	ldr	r3, [r7, #4]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e009      	b.n	8002210 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	60ba      	str	r2, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3301      	adds	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	dbf1      	blt.n	80021fc <_write+0x12>
	}
	return len;
 8002218:	687b      	ldr	r3, [r7, #4]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_close>:

int _close(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
	return -1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800224a:	605a      	str	r2, [r3, #4]
	return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_isatty>:

int _isatty(int file)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
	return 1;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	return 0;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <_sbrk+0x5c>)
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <_sbrk+0x60>)
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <_sbrk+0x64>)
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <_sbrk+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d207      	bcs.n	80022cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022bc:	f003 fdfa 	bl	8005eb4 <__errno>
 80022c0:	4603      	mov	r3, r0
 80022c2:	220c      	movs	r2, #12
 80022c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	e009      	b.n	80022e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_sbrk+0x64>)
 80022dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20018000 	.word	0x20018000
 80022ec:	00000400 	.word	0x00000400
 80022f0:	200003dc 	.word	0x200003dc
 80022f4:	200003f8 	.word	0x200003f8

080022f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <SystemInit+0x20>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <SystemInit+0x20>)
 8002304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800231c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002354 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002320:	f7ff ffea 	bl	80022f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <LoopForever+0x6>)
  ldr r1, =_edata
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <LoopForever+0xe>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800232c:	e002      	b.n	8002334 <LoopCopyDataInit>

0800232e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002332:	3304      	adds	r3, #4

08002334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002338:	d3f9      	bcc.n	800232e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800233c:	4c0a      	ldr	r4, [pc, #40]	; (8002368 <LoopForever+0x16>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002340:	e001      	b.n	8002346 <LoopFillZerobss>

08002342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002344:	3204      	adds	r2, #4

08002346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002348:	d3fb      	bcc.n	8002342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800234a:	f003 fdb9 	bl	8005ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800234e:	f7ff fa2b 	bl	80017a8 <main>

08002352 <LoopForever>:

LoopForever:
    b LoopForever
 8002352:	e7fe      	b.n	8002352 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002354:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800235c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002360:	0800ae54 	.word	0x0800ae54
  ldr r2, =_sbss
 8002364:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002368:	200003f4 	.word	0x200003f4

0800236c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC1_2_IRQHandler>
	...

08002370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_Init+0x3c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <HAL_Init+0x3c>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002386:	2003      	movs	r0, #3
 8002388:	f000 f962 	bl	8002650 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238c:	2000      	movs	r0, #0
 800238e:	f000 f80f 	bl	80023b0 <HAL_InitTick>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	e001      	b.n	80023a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800239e:	f7ff fdcd 	bl	8001f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023a2:	79fb      	ldrb	r3, [r7, #7]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40022000 	.word	0x40022000

080023b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_InitTick+0x6c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_InitTick+0x70>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_InitTick+0x6c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f96d 	bl	80026ba <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d809      	bhi.n	8002400 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f000 f937 	bl	8002666 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_InitTick+0x74>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e007      	b.n	8002410 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e004      	b.n	8002410 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e001      	b.n	8002410 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000020 	.word	0x20000020
 8002420:	20000018 	.word	0x20000018
 8002424:	2000001c 	.word	0x2000001c

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000020 	.word	0x20000020
 800244c:	200003e0 	.word	0x200003e0

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	200003e0 	.word	0x200003e0

08002468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff ffee 	bl	8002450 <HAL_GetTick>
 8002474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d005      	beq.n	800248e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_Delay+0x44>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800248e:	bf00      	nop
 8002490:	f7ff ffde 	bl	8002450 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8f7      	bhi.n	8002490 <HAL_Delay+0x28>
  {
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000020 	.word	0x20000020

080024b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	60d3      	str	r3, [r2, #12]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <__NVIC_GetPriorityGrouping+0x18>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	f003 0307 	and.w	r3, r3, #7
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db0b      	blt.n	800253e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4907      	ldr	r1, [pc, #28]	; (800254c <__NVIC_EnableIRQ+0x38>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2001      	movs	r0, #1
 8002536:	fa00 f202 	lsl.w	r2, r0, r2
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db0a      	blt.n	800257a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	490c      	ldr	r1, [pc, #48]	; (800259c <__NVIC_SetPriority+0x4c>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002578:	e00a      	b.n	8002590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <__NVIC_SetPriority+0x50>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3b04      	subs	r3, #4
 8002588:	0112      	lsls	r2, r2, #4
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	440b      	add	r3, r1
 800258e:	761a      	strb	r2, [r3, #24]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf28      	it	cs
 80025c2:	2304      	movcs	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d902      	bls.n	80025d4 <NVIC_EncodePriority+0x30>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3b03      	subs	r3, #3
 80025d2:	e000      	b.n	80025d6 <NVIC_EncodePriority+0x32>
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800261c:	d301      	bcc.n	8002622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261e:	2301      	movs	r3, #1
 8002620:	e00f      	b.n	8002642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <SysTick_Config+0x40>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262a:	210f      	movs	r1, #15
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	f7ff ff8e 	bl	8002550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <SysTick_Config+0x40>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <SysTick_Config+0x40>)
 800263c:	2207      	movs	r2, #7
 800263e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	e000e010 	.word	0xe000e010

08002650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff29 	bl	80024b0 <__NVIC_SetPriorityGrouping>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002678:	f7ff ff3e 	bl	80024f8 <__NVIC_GetPriorityGrouping>
 800267c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	6978      	ldr	r0, [r7, #20]
 8002684:	f7ff ff8e 	bl	80025a4 <NVIC_EncodePriority>
 8002688:	4602      	mov	r2, r0
 800268a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff5d 	bl	8002550 <__NVIC_SetPriority>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff31 	bl	8002514 <__NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffa2 	bl	800260c <SysTick_Config>
 80026c8:	4603      	mov	r3, r0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e014      	b.n	800270e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	791b      	ldrb	r3, [r3, #4]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fc45 	bl	8001f84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	795b      	ldrb	r3, [r3, #5]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_DAC_Start+0x16>
 8002728:	2302      	movs	r3, #2
 800272a:	e03b      	b.n	80027a4 <HAL_DAC_Start+0x8e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002760:	2b04      	cmp	r3, #4
 8002762:	d118      	bne.n	8002796 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	e00f      	b.n	8002796 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002780:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002784:	d107      	bne.n	8002796 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0202 	orr.w	r2, r2, #2
 8002794:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	3308      	adds	r3, #8
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e004      	b.n	80027e4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	3314      	adds	r3, #20
 80027e2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	461a      	mov	r2, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b088      	sub	sp, #32
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	795b      	ldrb	r3, [r3, #5]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_DAC_ConfigChannel+0x1c>
 8002812:	2302      	movs	r3, #2
 8002814:	e107      	b.n	8002a26 <HAL_DAC_ConfigChannel+0x22c>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2202      	movs	r2, #2
 8002820:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b04      	cmp	r3, #4
 8002828:	d174      	bne.n	8002914 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800282a:	f7ff fe11 	bl	8002450 <HAL_GetTick>
 800282e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d134      	bne.n	80028a0 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002836:	e011      	b.n	800285c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002838:	f7ff fe0a 	bl	8002450 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d90a      	bls.n	800285c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f043 0208 	orr.w	r2, r3, #8
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2203      	movs	r2, #3
 8002856:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0e4      	b.n	8002a26 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e6      	bne.n	8002838 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f7ff fdfc 	bl	8002468 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	6992      	ldr	r2, [r2, #24]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
 800287a:	e01e      	b.n	80028ba <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800287c:	f7ff fde8 	bl	8002450 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d90a      	bls.n	80028a0 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f043 0208 	orr.w	r2, r3, #8
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2203      	movs	r2, #3
 800289a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0c2      	b.n	8002a26 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	dbe8      	blt.n	800287c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7ff fddc 	bl	8002468 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	6992      	ldr	r2, [r2, #24]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	ea02 0103 	and.w	r1, r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	21ff      	movs	r1, #255	; 0xff
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	ea02 0103 	and.w	r1, r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d11d      	bne.n	8002958 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	221f      	movs	r2, #31
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2207      	movs	r2, #7
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	431a      	orrs	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	f640 72fc 	movw	r2, #4092	; 0xffc
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	22c0      	movs	r2, #192	; 0xc0
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e098      	b.n	8002b74 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b4d      	ldr	r3, [pc, #308]	; (8002b80 <HAL_DMA_Init+0x150>)
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d80f      	bhi.n	8002a6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <HAL_DMA_Init+0x154>)
 8002a56:	4413      	add	r3, r2
 8002a58:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <HAL_DMA_Init+0x158>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	009a      	lsls	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a48      	ldr	r2, [pc, #288]	; (8002b8c <HAL_DMA_Init+0x15c>)
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a6c:	e00e      	b.n	8002a8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_DMA_Init+0x160>)
 8002a76:	4413      	add	r3, r2
 8002a78:	4a43      	ldr	r2, [pc, #268]	; (8002b88 <HAL_DMA_Init+0x158>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	009a      	lsls	r2, r3, #2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <HAL_DMA_Init+0x164>)
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae6:	d039      	beq.n	8002b5c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <HAL_DMA_Init+0x15c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d11a      	bne.n	8002b28 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002af2:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_DMA_Init+0x168>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f003 031c 	and.w	r3, r3, #28
 8002afe:	210f      	movs	r1, #15
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	4924      	ldr	r1, [pc, #144]	; (8002b98 <HAL_DMA_Init+0x168>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_DMA_Init+0x168>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f003 031c 	and.w	r3, r3, #28
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	491d      	ldr	r1, [pc, #116]	; (8002b98 <HAL_DMA_Init+0x168>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
 8002b26:	e019      	b.n	8002b5c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_DMA_Init+0x16c>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f003 031c 	and.w	r3, r3, #28
 8002b34:	210f      	movs	r1, #15
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	4917      	ldr	r1, [pc, #92]	; (8002b9c <HAL_DMA_Init+0x16c>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_DMA_Init+0x16c>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f003 031c 	and.w	r3, r3, #28
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	4911      	ldr	r1, [pc, #68]	; (8002b9c <HAL_DMA_Init+0x16c>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40020407 	.word	0x40020407
 8002b84:	bffdfff8 	.word	0xbffdfff8
 8002b88:	cccccccd 	.word	0xcccccccd
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	bffdfbf8 	.word	0xbffdfbf8
 8002b94:	40020400 	.word	0x40020400
 8002b98:	400200a8 	.word	0x400200a8
 8002b9c:	400204a8 	.word	0x400204a8

08002ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_DMA_Start_IT+0x20>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e04b      	b.n	8002c58 <HAL_DMA_Start_IT+0xb8>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d13a      	bne.n	8002c4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f95f 	bl	8002ebc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 020e 	orr.w	r2, r2, #14
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e00f      	b.n	8002c38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 020a 	orr.w	r2, r2, #10
 8002c36:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e005      	b.n	8002c56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d008      	beq.n	8002c8a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e022      	b.n	8002cd0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 020e 	bic.w	r2, r2, #14
 8002c98:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f003 021c 	and.w	r2, r3, #28
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d005      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	e029      	b.n	8002d54 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 020e 	bic.w	r2, r2, #14
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f003 021c 	and.w	r2, r3, #28
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
    }
  }
  return status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f003 031c 	and.w	r3, r3, #28
 8002d7e:	2204      	movs	r2, #4
 8002d80:	409a      	lsls	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d026      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x7a>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d021      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0204 	bic.w	r2, r2, #4
 8002db0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f003 021c 	and.w	r2, r3, #28
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d071      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002dd6:	e06c      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f003 031c 	and.w	r3, r3, #28
 8002de0:	2202      	movs	r2, #2
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d02e      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xec>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d029      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 020a 	bic.w	r2, r2, #10
 8002e12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	f003 021c 	and.w	r2, r3, #28
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2102      	movs	r1, #2
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d038      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e48:	e033      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f003 031c 	and.w	r3, r3, #28
 8002e52:	2208      	movs	r2, #8
 8002e54:	409a      	lsls	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d02a      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x156>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d025      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020e 	bic.w	r2, r2, #14
 8002e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f003 021c 	and.w	r2, r3, #28
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
}
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f003 021c 	and.w	r2, r3, #28
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d108      	bne.n	8002f00 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002efe:	e007      	b.n	8002f10 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	60da      	str	r2, [r3, #12]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f2a:	e17f      	b.n	800322c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8171 	beq.w	8003226 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d005      	beq.n	8002f5c <HAL_GPIO_Init+0x40>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d130      	bne.n	8002fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f92:	2201      	movs	r2, #1
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 0201 	and.w	r2, r3, #1
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d118      	bne.n	8002ffc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0201 	and.w	r2, r3, #1
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b03      	cmp	r3, #3
 8003006:	d017      	beq.n	8003038 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d123      	bne.n	800308c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	08da      	lsrs	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3208      	adds	r2, #8
 800304c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	220f      	movs	r2, #15
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	08da      	lsrs	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3208      	adds	r2, #8
 8003086:	6939      	ldr	r1, [r7, #16]
 8003088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0203 	and.w	r2, r3, #3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80ac 	beq.w	8003226 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	4b5f      	ldr	r3, [pc, #380]	; (800324c <HAL_GPIO_Init+0x330>)
 80030d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d2:	4a5e      	ldr	r2, [pc, #376]	; (800324c <HAL_GPIO_Init+0x330>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6613      	str	r3, [r2, #96]	; 0x60
 80030da:	4b5c      	ldr	r3, [pc, #368]	; (800324c <HAL_GPIO_Init+0x330>)
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030e6:	4a5a      	ldr	r2, [pc, #360]	; (8003250 <HAL_GPIO_Init+0x334>)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003110:	d025      	beq.n	800315e <HAL_GPIO_Init+0x242>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4f      	ldr	r2, [pc, #316]	; (8003254 <HAL_GPIO_Init+0x338>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <HAL_GPIO_Init+0x23e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4e      	ldr	r2, [pc, #312]	; (8003258 <HAL_GPIO_Init+0x33c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x23a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4d      	ldr	r2, [pc, #308]	; (800325c <HAL_GPIO_Init+0x340>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x236>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4c      	ldr	r2, [pc, #304]	; (8003260 <HAL_GPIO_Init+0x344>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x232>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <HAL_GPIO_Init+0x348>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x22e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4a      	ldr	r2, [pc, #296]	; (8003268 <HAL_GPIO_Init+0x34c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x22a>
 8003142:	2306      	movs	r3, #6
 8003144:	e00c      	b.n	8003160 <HAL_GPIO_Init+0x244>
 8003146:	2307      	movs	r3, #7
 8003148:	e00a      	b.n	8003160 <HAL_GPIO_Init+0x244>
 800314a:	2305      	movs	r3, #5
 800314c:	e008      	b.n	8003160 <HAL_GPIO_Init+0x244>
 800314e:	2304      	movs	r3, #4
 8003150:	e006      	b.n	8003160 <HAL_GPIO_Init+0x244>
 8003152:	2303      	movs	r3, #3
 8003154:	e004      	b.n	8003160 <HAL_GPIO_Init+0x244>
 8003156:	2302      	movs	r3, #2
 8003158:	e002      	b.n	8003160 <HAL_GPIO_Init+0x244>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_GPIO_Init+0x244>
 800315e:	2300      	movs	r3, #0
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	f002 0203 	and.w	r2, r2, #3
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	4093      	lsls	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003170:	4937      	ldr	r1, [pc, #220]	; (8003250 <HAL_GPIO_Init+0x334>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	3302      	adds	r3, #2
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800317e:	4b3b      	ldr	r3, [pc, #236]	; (800326c <HAL_GPIO_Init+0x350>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43db      	mvns	r3, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031a2:	4a32      	ldr	r2, [pc, #200]	; (800326c <HAL_GPIO_Init+0x350>)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031a8:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_GPIO_Init+0x350>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031cc:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_GPIO_Init+0x350>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_GPIO_Init+0x350>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031f6:	4a1d      	ldr	r2, [pc, #116]	; (800326c <HAL_GPIO_Init+0x350>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_GPIO_Init+0x350>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003220:	4a12      	ldr	r2, [pc, #72]	; (800326c <HAL_GPIO_Init+0x350>)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	3301      	adds	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa22 f303 	lsr.w	r3, r2, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	f47f ae78 	bne.w	8002f2c <HAL_GPIO_Init+0x10>
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	40010000 	.word	0x40010000
 8003254:	48000400 	.word	0x48000400
 8003258:	48000800 	.word	0x48000800
 800325c:	48000c00 	.word	0x48000c00
 8003260:	48001000 	.word	0x48001000
 8003264:	48001400 	.word	0x48001400
 8003268:	48001800 	.word	0x48001800
 800326c:	40010400 	.word	0x40010400

08003270 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_PWREx_GetVoltageRange+0x18>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40007000 	.word	0x40007000

0800328c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329a:	d130      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a8:	d038      	beq.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2232      	movs	r2, #50	; 0x32
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d0:	e002      	b.n	80032d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e4:	d102      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f2      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f8:	d110      	bne.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e00f      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d007      	beq.n	800331c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800330c:	4b07      	ldr	r3, [pc, #28]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003314:	4a05      	ldr	r2, [pc, #20]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40007000 	.word	0x40007000
 8003330:	20000018 	.word	0x20000018
 8003334:	431bde83 	.word	0x431bde83

08003338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e3d8      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334a:	4b97      	ldr	r3, [pc, #604]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003354:	4b94      	ldr	r3, [pc, #592]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80e4 	beq.w	8003534 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_RCC_OscConfig+0x4a>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b0c      	cmp	r3, #12
 8003376:	f040 808b 	bne.w	8003490 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 8087 	bne.w	8003490 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003382:	4b89      	ldr	r3, [pc, #548]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x62>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e3b0      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <HAL_RCC_OscConfig+0x7c>
 80033aa:	4b7f      	ldr	r3, [pc, #508]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b2:	e005      	b.n	80033c0 <HAL_RCC_OscConfig+0x88>
 80033b4:	4b7c      	ldr	r3, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d223      	bcs.n	800340c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fd43 	bl	8003e54 <RCC_SetFlashLatencyFromMSIRange>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e391      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d8:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a72      	ldr	r2, [pc, #456]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	496d      	ldr	r1, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	4968      	ldr	r1, [pc, #416]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
 800340a:	e025      	b.n	8003458 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340c:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a65      	ldr	r2, [pc, #404]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003412:	f043 0308 	orr.w	r3, r3, #8
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4960      	ldr	r1, [pc, #384]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342a:	4b5f      	ldr	r3, [pc, #380]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	495b      	ldr	r1, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fd03 	bl	8003e54 <RCC_SetFlashLatencyFromMSIRange>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e351      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003458:	f000 fc38 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	4950      	ldr	r1, [pc, #320]	; (80035ac <HAL_RCC_OscConfig+0x274>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	4a4e      	ldr	r2, [pc, #312]	; (80035b0 <HAL_RCC_OscConfig+0x278>)
 8003476:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003478:	4b4e      	ldr	r3, [pc, #312]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe ff97 	bl	80023b0 <HAL_InitTick>
 8003482:	4603      	mov	r3, r0
 8003484:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d052      	beq.n	8003532 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	e335      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d032      	beq.n	80034fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003498:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a42      	ldr	r2, [pc, #264]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a4:	f7fe ffd4 	bl	8002450 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ac:	f7fe ffd0 	bl	8002450 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e31e      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034be:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a36      	ldr	r2, [pc, #216]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034d0:	f043 0308 	orr.w	r3, r3, #8
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4931      	ldr	r1, [pc, #196]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	492c      	ldr	r1, [pc, #176]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
 80034fc:	e01a      	b.n	8003534 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350a:	f7fe ffa1 	bl	8002450 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003512:	f7fe ff9d 	bl	8002450 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e2eb      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003524:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x1da>
 8003530:	e000      	b.n	8003534 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003532:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d074      	beq.n	800362a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b08      	cmp	r3, #8
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x21a>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b0c      	cmp	r3, #12
 800354a:	d10e      	bne.n	800356a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d10b      	bne.n	800356a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d064      	beq.n	8003628 <HAL_RCC_OscConfig+0x2f0>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d160      	bne.n	8003628 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e2c8      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x24a>
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	e026      	b.n	80035d0 <HAL_RCC_OscConfig+0x298>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358a:	d115      	bne.n	80035b8 <HAL_RCC_OscConfig+0x280>
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e014      	b.n	80035d0 <HAL_RCC_OscConfig+0x298>
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000
 80035ac:	0800a950 	.word	0x0800a950
 80035b0:	20000018 	.word	0x20000018
 80035b4:	2000001c 	.word	0x2000001c
 80035b8:	4ba0      	ldr	r3, [pc, #640]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a9f      	ldr	r2, [pc, #636]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b9d      	ldr	r3, [pc, #628]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a9c      	ldr	r2, [pc, #624]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe ff3a 	bl	8002450 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fe ff36 	bl	8002450 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e284      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f2:	4b92      	ldr	r3, [pc, #584]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2a8>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe ff26 	bl	8002450 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fe ff22 	bl	8002450 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e270      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361a:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x2d0>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d060      	beq.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x310>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d119      	bne.n	8003676 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d116      	bne.n	8003676 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003648:	4b7c      	ldr	r3, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_OscConfig+0x328>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e24d      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	4973      	ldr	r1, [pc, #460]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003674:	e040      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d023      	beq.n	80036c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367e:	4b6f      	ldr	r3, [pc, #444]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6e      	ldr	r2, [pc, #440]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe fee1 	bl	8002450 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fe fedd 	bl	8002450 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e22b      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a4:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b62      	ldr	r3, [pc, #392]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	495f      	ldr	r1, [pc, #380]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
 80036c4:	e018      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b5d      	ldr	r3, [pc, #372]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a5c      	ldr	r2, [pc, #368]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fe febd 	bl	8002450 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036da:	f7fe feb9 	bl	8002450 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e207      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03c      	beq.n	800377e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01c      	beq.n	8003746 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370c:	4b4b      	ldr	r3, [pc, #300]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fe98 	bl	8002450 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003724:	f7fe fe94 	bl	8002450 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e1e2      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <HAL_RCC_OscConfig+0x3ec>
 8003744:	e01b      	b.n	800377e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374c:	4a3b      	ldr	r2, [pc, #236]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe fe7b 	bl	8002450 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375e:	f7fe fe77 	bl	8002450 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e1c5      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1ef      	bne.n	800375e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80a6 	beq.w	80038d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003790:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6593      	str	r3, [r2, #88]	; 0x58
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x504>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d118      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d0:	f7fe fe3e 	bl	8002450 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d8:	f7fe fe3a 	bl	8002450 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e188      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x508>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <HAL_RCC_OscConfig+0x4d8>
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800380e:	e029      	b.n	8003864 <HAL_RCC_OscConfig+0x52c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b05      	cmp	r3, #5
 8003816:	d115      	bne.n	8003844 <HAL_RCC_OscConfig+0x50c>
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_RCC_OscConfig+0x504>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	4a03      	ldr	r2, [pc, #12]	; (800383c <HAL_RCC_OscConfig+0x504>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003838:	e014      	b.n	8003864 <HAL_RCC_OscConfig+0x52c>
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	40007000 	.word	0x40007000
 8003844:	4b91      	ldr	r3, [pc, #580]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	4a90      	ldr	r2, [pc, #576]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003854:	4b8d      	ldr	r3, [pc, #564]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	4a8c      	ldr	r2, [pc, #560]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d016      	beq.n	800389a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe fdf0 	bl	8002450 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe fdec 	bl	8002450 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e138      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	4b80      	ldr	r3, [pc, #512]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ed      	beq.n	8003874 <HAL_RCC_OscConfig+0x53c>
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fe fdd9 	bl	8002450 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fe fdd5 	bl	8002450 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e121      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b8:	4b74      	ldr	r3, [pc, #464]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ed      	bne.n	80038a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c6:	7ffb      	ldrb	r3, [r7, #31]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b6f      	ldr	r3, [pc, #444]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	4a6e      	ldr	r2, [pc, #440]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 810c 	beq.w	8003afa <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	f040 80d4 	bne.w	8003a94 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038ec:	4b67      	ldr	r3, [pc, #412]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0203 	and.w	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d130      	bne.n	8003962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	3b01      	subs	r3, #1
 800390c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d127      	bne.n	8003962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d11f      	bne.n	8003962 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800392c:	2a07      	cmp	r2, #7
 800392e:	bf14      	ite	ne
 8003930:	2201      	movne	r2, #1
 8003932:	2200      	moveq	r2, #0
 8003934:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003936:	4293      	cmp	r3, r2
 8003938:	d113      	bne.n	8003962 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	3b01      	subs	r3, #1
 8003948:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d109      	bne.n	8003962 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d06e      	beq.n	8003a40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d069      	beq.n	8003a3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003968:	4b48      	ldr	r3, [pc, #288]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003974:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0bb      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003984:	4b41      	ldr	r3, [pc, #260]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 800398a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800398e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003990:	f7fe fd5e 	bl	8002450 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fe fd5a 	bl	8002450 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e0a8      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b6:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <HAL_RCC_OscConfig+0x758>)
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039c6:	3a01      	subs	r2, #1
 80039c8:	0112      	lsls	r2, r2, #4
 80039ca:	4311      	orrs	r1, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039d0:	0212      	lsls	r2, r2, #8
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039d8:	0852      	lsrs	r2, r2, #1
 80039da:	3a01      	subs	r2, #1
 80039dc:	0552      	lsls	r2, r2, #21
 80039de:	4311      	orrs	r1, r2
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039e4:	0852      	lsrs	r2, r2, #1
 80039e6:	3a01      	subs	r2, #1
 80039e8:	0652      	lsls	r2, r2, #25
 80039ea:	4311      	orrs	r1, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f0:	0912      	lsrs	r2, r2, #4
 80039f2:	0452      	lsls	r2, r2, #17
 80039f4:	430a      	orrs	r2, r1
 80039f6:	4925      	ldr	r1, [pc, #148]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039fc:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a22      	ldr	r2, [pc, #136]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a08:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a14:	f7fe fd1c 	bl	8002450 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fe fd18 	bl	8002450 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e066      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a3a:	e05e      	b.n	8003afa <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e05d      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d156      	bne.n	8003afa <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a64:	f7fe fcf4 	bl	8002450 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fe fcf0 	bl	8002450 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e03e      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7e:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_RCC_OscConfig+0x754>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x734>
 8003a8a:	e036      	b.n	8003afa <HAL_RCC_OscConfig+0x7c2>
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d02d      	beq.n	8003af6 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_RCC_OscConfig+0x7cc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_RCC_OscConfig+0x7cc>)
 8003aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_RCC_OscConfig+0x7cc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <HAL_RCC_OscConfig+0x7cc>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <HAL_RCC_OscConfig+0x7cc>)
 8003ab8:	f023 0303 	bic.w	r3, r3, #3
 8003abc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_OscConfig+0x7cc>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <HAL_RCC_OscConfig+0x7cc>)
 8003ac4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003acc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fe fcbf 	bl	8002450 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fe fcbb 	bl	8002450 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e009      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_OscConfig+0x7cc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x79e>
 8003af4:	e001      	b.n	8003afa <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000

08003b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0c8      	b.n	8003cae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b66      	ldr	r3, [pc, #408]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d910      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 0207 	bic.w	r2, r3, #7
 8003b32:	4961      	ldr	r1, [pc, #388]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b0>)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0b0      	b.n	8003cae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d04c      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b60:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d121      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e09e      	b.n	8003cae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d115      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e092      	b.n	8003cae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b90:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e086      	b.n	8003cae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba0:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e07e      	b.n	8003cae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bb0:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 0203 	bic.w	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	493f      	ldr	r1, [pc, #252]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc2:	f7fe fc45 	bl	8002450 <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bca:	f7fe fc41 	bl	8002450 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e066      	b.n	8003cae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be0:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 020c 	and.w	r2, r3, #12
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d1eb      	bne.n	8003bca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	492c      	ldr	r1, [pc, #176]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c10:	4b29      	ldr	r3, [pc, #164]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d210      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 0207 	bic.w	r2, r3, #7
 8003c26:	4924      	ldr	r1, [pc, #144]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b0>)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e036      	b.n	8003cae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4918      	ldr	r1, [pc, #96]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4910      	ldr	r1, [pc, #64]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c7e:	f000 f825 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c82:	4602      	mov	r2, r0
 8003c84:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <HAL_RCC_ClockConfig+0x1b4>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	490c      	ldr	r1, [pc, #48]	; (8003cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	5ccb      	ldrb	r3, [r1, r3]
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fb84 	bl	80023b0 <HAL_InitTick>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cac:	7afb      	ldrb	r3, [r7, #11]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40022000 	.word	0x40022000
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	0800a950 	.word	0x0800a950
 8003cc4:	20000018 	.word	0x20000018
 8003cc8:	2000001c 	.word	0x2000001c

08003ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cda:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x34>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d121      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d11e      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d0c:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d28:	4a2b      	ldr	r2, [pc, #172]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e004      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d134      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0xac>
 8003d70:	e005      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d72:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d74:	617b      	str	r3, [r7, #20]
      break;
 8003d76:	e005      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d7a:	617b      	str	r3, [r7, #20]
      break;
 8003d7c:	e002      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	617b      	str	r3, [r7, #20]
      break;
 8003d82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	3301      	adds	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	fb03 f202 	mul.w	r2, r3, r2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	0e5b      	lsrs	r3, r3, #25
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	3301      	adds	r3, #1
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	0800a968 	.word	0x0800a968
 8003ddc:	00f42400 	.word	0x00f42400
 8003de0:	007a1200 	.word	0x007a1200

08003de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000018 	.word	0x20000018

08003dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e00:	f7ff fff0 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4904      	ldr	r1, [pc, #16]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	0800a960 	.word	0x0800a960

08003e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e2c:	f7ff ffda 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0adb      	lsrs	r3, r3, #11
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4904      	ldr	r1, [pc, #16]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800a960 	.word	0x0800a960

08003e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e60:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e6c:	f7ff fa00 	bl	8003270 <HAL_PWREx_GetVoltageRange>
 8003e70:	6178      	str	r0, [r7, #20]
 8003e72:	e014      	b.n	8003e9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	4a24      	ldr	r2, [pc, #144]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e80:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e8c:	f7ff f9f0 	bl	8003270 <HAL_PWREx_GetVoltageRange>
 8003e90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e92:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea4:	d10b      	bne.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b80      	cmp	r3, #128	; 0x80
 8003eaa:	d919      	bls.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2ba0      	cmp	r3, #160	; 0xa0
 8003eb0:	d902      	bls.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e013      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eb8:	2301      	movs	r3, #1
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	e010      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d902      	bls.n	8003eca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e00a      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d102      	bne.n	8003ed6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e004      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b70      	cmp	r3, #112	; 0x70
 8003eda:	d101      	bne.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003edc:	2301      	movs	r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 0207 	bic.w	r2, r3, #7
 8003ee8:	4909      	ldr	r1, [pc, #36]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ef0:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d001      	beq.n	8003f02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40022000 	.word	0x40022000

08003f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f20:	2300      	movs	r3, #0
 8003f22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d041      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f38:	d02a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f3e:	d824      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f44:	d008      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f4a:	d81e      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f54:	d010      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f56:	e018      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f58:	4b86      	ldr	r3, [pc, #536]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a85      	ldr	r2, [pc, #532]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f64:	e015      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fabb 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f76:	e00c      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3320      	adds	r3, #32
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fba6 	bl	80046d0 <RCCEx_PLLSAI2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f8e:	e000      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f98:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa6:	4973      	ldr	r1, [pc, #460]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fae:	e001      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d041      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fc8:	d02a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fce:	d824      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd4:	d008      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fda:	d81e      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe4:	d010      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fe6:	e018      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fe8:	4b62      	ldr	r3, [pc, #392]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a61      	ldr	r2, [pc, #388]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ff4:	e015      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fa73 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004006:	e00c      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3320      	adds	r3, #32
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fb5e 	bl	80046d0 <RCCEx_PLLSAI2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	74fb      	strb	r3, [r7, #19]
      break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004028:	4b52      	ldr	r3, [pc, #328]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004036:	494f      	ldr	r1, [pc, #316]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800403e:	e001      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a0 	beq.w	8004192 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	4a40      	ldr	r2, [pc, #256]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	6593      	str	r3, [r2, #88]	; 0x58
 8004078:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004084:	2301      	movs	r3, #1
 8004086:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004088:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800408e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004092:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004094:	f7fe f9dc 	bl	8002450 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800409a:	e009      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409c:	f7fe f9d8 	bl	8002450 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d902      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	74fb      	strb	r3, [r7, #19]
        break;
 80040ae:	e005      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ef      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d15c      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040c2:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d019      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040e0:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	4a20      	ldr	r2, [pc, #128]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800410c:	4a19      	ldr	r2, [pc, #100]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fe f997 	bl	8002450 <HAL_GetTick>
 8004122:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004124:	e00b      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fe f993 	bl	8002450 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f241 3288 	movw	r2, #5000	; 0x1388
 8004134:	4293      	cmp	r3, r2
 8004136:	d902      	bls.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	74fb      	strb	r3, [r7, #19]
            break;
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ec      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004162:	4904      	ldr	r1, [pc, #16]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800416a:	e009      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
 8004170:	e006      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004180:	7c7b      	ldrb	r3, [r7, #17]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004186:	4b9e      	ldr	r3, [pc, #632]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	4a9d      	ldr	r2, [pc, #628]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004190:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419e:	4b98      	ldr	r3, [pc, #608]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 0203 	bic.w	r2, r3, #3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	4994      	ldr	r1, [pc, #592]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c0:	4b8f      	ldr	r3, [pc, #572]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 020c 	bic.w	r2, r3, #12
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	498c      	ldr	r1, [pc, #560]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e2:	4b87      	ldr	r3, [pc, #540]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	4983      	ldr	r1, [pc, #524]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004204:	4b7e      	ldr	r3, [pc, #504]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	497b      	ldr	r1, [pc, #492]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004226:	4b76      	ldr	r3, [pc, #472]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	4972      	ldr	r1, [pc, #456]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004248:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	496a      	ldr	r1, [pc, #424]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426a:	4b65      	ldr	r3, [pc, #404]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	4961      	ldr	r1, [pc, #388]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800428c:	4b5c      	ldr	r3, [pc, #368]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	4959      	ldr	r1, [pc, #356]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ae:	4b54      	ldr	r3, [pc, #336]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042bc:	4950      	ldr	r1, [pc, #320]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042d0:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042de:	4948      	ldr	r1, [pc, #288]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042f2:	4b43      	ldr	r3, [pc, #268]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	493f      	ldr	r1, [pc, #252]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d028      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004314:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004322:	4937      	ldr	r1, [pc, #220]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004332:	d106      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004334:	4b32      	ldr	r3, [pc, #200]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a31      	ldr	r2, [pc, #196]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433e:	60d3      	str	r3, [r2, #12]
 8004340:	e011      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800434a:	d10c      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3304      	adds	r3, #4
 8004350:	2101      	movs	r1, #1
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f8c8 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d028      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	491f      	ldr	r1, [pc, #124]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004390:	d106      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439c:	60d3      	str	r3, [r2, #12]
 800439e:	e011      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f899 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02b      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	4908      	ldr	r1, [pc, #32]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ee:	d109      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a02      	ldr	r2, [pc, #8]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fa:	60d3      	str	r3, [r2, #12]
 80043fc:	e014      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800440c:	d10c      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	2101      	movs	r1, #1
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f867 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004442:	4928      	ldr	r1, [pc, #160]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800444e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004452:	d10d      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	2102      	movs	r1, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f844 	bl	80044e8 <RCCEx_PLLSAI1_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d014      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	74bb      	strb	r3, [r7, #18]
 800446e:	e011      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004478:	d10c      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3320      	adds	r3, #32
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f925 	bl	80046d0 <RCCEx_PLLSAI2_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ae:	490d      	ldr	r1, [pc, #52]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d2:	4904      	ldr	r1, [pc, #16]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044da:	7cbb      	ldrb	r3, [r7, #18]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000

080044e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044f6:	4b75      	ldr	r3, [pc, #468]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d018      	beq.n	8004534 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004502:	4b72      	ldr	r3, [pc, #456]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0203 	and.w	r2, r3, #3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d10d      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
       ||
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800451a:	4b6c      	ldr	r3, [pc, #432]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
       ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d047      	beq.n	80045be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e044      	b.n	80045be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d018      	beq.n	800456e <RCCEx_PLLSAI1_Config+0x86>
 800453c:	2b03      	cmp	r3, #3
 800453e:	d825      	bhi.n	800458c <RCCEx_PLLSAI1_Config+0xa4>
 8004540:	2b01      	cmp	r3, #1
 8004542:	d002      	beq.n	800454a <RCCEx_PLLSAI1_Config+0x62>
 8004544:	2b02      	cmp	r3, #2
 8004546:	d009      	beq.n	800455c <RCCEx_PLLSAI1_Config+0x74>
 8004548:	e020      	b.n	800458c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800454a:	4b60      	ldr	r3, [pc, #384]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d11d      	bne.n	8004592 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455a:	e01a      	b.n	8004592 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800455c:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004564:	2b00      	cmp	r3, #0
 8004566:	d116      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456c:	e013      	b.n	8004596 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800456e:	4b57      	ldr	r3, [pc, #348]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800457a:	4b54      	ldr	r3, [pc, #336]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800458a:	e006      	b.n	800459a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      break;
 8004590:	e004      	b.n	800459c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004592:	bf00      	nop
 8004594:	e002      	b.n	800459c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800459a:	bf00      	nop
    }

    if(status == HAL_OK)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045a2:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	430b      	orrs	r3, r1
 80045b8:	4944      	ldr	r1, [pc, #272]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d17d      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045c4:	4b41      	ldr	r3, [pc, #260]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a40      	ldr	r2, [pc, #256]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d0:	f7fd ff3e 	bl	8002450 <HAL_GetTick>
 80045d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d6:	e009      	b.n	80045ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d8:	f7fd ff3a 	bl	8002450 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	73fb      	strb	r3, [r7, #15]
        break;
 80045ea:	e005      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ec:	4b37      	ldr	r3, [pc, #220]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ef      	bne.n	80045d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d160      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d111      	bne.n	8004628 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004604:	4b31      	ldr	r3, [pc, #196]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6892      	ldr	r2, [r2, #8]
 8004614:	0211      	lsls	r1, r2, #8
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68d2      	ldr	r2, [r2, #12]
 800461a:	0912      	lsrs	r2, r2, #4
 800461c:	0452      	lsls	r2, r2, #17
 800461e:	430a      	orrs	r2, r1
 8004620:	492a      	ldr	r1, [pc, #168]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	4313      	orrs	r3, r2
 8004624:	610b      	str	r3, [r1, #16]
 8004626:	e027      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d112      	bne.n	8004654 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800462e:	4b27      	ldr	r3, [pc, #156]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004636:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6892      	ldr	r2, [r2, #8]
 800463e:	0211      	lsls	r1, r2, #8
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6912      	ldr	r2, [r2, #16]
 8004644:	0852      	lsrs	r2, r2, #1
 8004646:	3a01      	subs	r2, #1
 8004648:	0552      	lsls	r2, r2, #21
 800464a:	430a      	orrs	r2, r1
 800464c:	491f      	ldr	r1, [pc, #124]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	610b      	str	r3, [r1, #16]
 8004652:	e011      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800465c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	0211      	lsls	r1, r2, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6952      	ldr	r2, [r2, #20]
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	3a01      	subs	r2, #1
 800466e:	0652      	lsls	r2, r2, #25
 8004670:	430a      	orrs	r2, r1
 8004672:	4916      	ldr	r1, [pc, #88]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800467e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004682:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fd fee4 	bl	8002450 <HAL_GetTick>
 8004688:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800468a:	e009      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800468c:	f7fd fee0 	bl	8002450 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d902      	bls.n	80046a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	73fb      	strb	r3, [r7, #15]
          break;
 800469e:	e005      	b.n	80046ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ef      	beq.n	800468c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	4904      	ldr	r1, [pc, #16]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000

080046d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046de:	4b6a      	ldr	r3, [pc, #424]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046ea:	4b67      	ldr	r3, [pc, #412]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0203 	and.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10d      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
       ||
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004702:	4b61      	ldr	r3, [pc, #388]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
       ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d047      	beq.n	80047a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	e044      	b.n	80047a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d018      	beq.n	8004756 <RCCEx_PLLSAI2_Config+0x86>
 8004724:	2b03      	cmp	r3, #3
 8004726:	d825      	bhi.n	8004774 <RCCEx_PLLSAI2_Config+0xa4>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d002      	beq.n	8004732 <RCCEx_PLLSAI2_Config+0x62>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d009      	beq.n	8004744 <RCCEx_PLLSAI2_Config+0x74>
 8004730:	e020      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004732:	4b55      	ldr	r3, [pc, #340]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11d      	bne.n	800477a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004742:	e01a      	b.n	800477a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004744:	4b50      	ldr	r3, [pc, #320]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d116      	bne.n	800477e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e013      	b.n	800477e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004756:	4b4c      	ldr	r3, [pc, #304]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004762:	4b49      	ldr	r3, [pc, #292]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004772:	e006      	b.n	8004782 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      break;
 8004778:	e004      	b.n	8004784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004782:	bf00      	nop
    }

    if(status == HAL_OK)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800478a:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	430b      	orrs	r3, r1
 80047a0:	4939      	ldr	r1, [pc, #228]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d167      	bne.n	800487c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047ac:	4b36      	ldr	r3, [pc, #216]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a35      	ldr	r2, [pc, #212]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b8:	f7fd fe4a 	bl	8002450 <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047be:	e009      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047c0:	f7fd fe46 	bl	8002450 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d902      	bls.n	80047d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	73fb      	strb	r3, [r7, #15]
        break;
 80047d2:	e005      	b.n	80047e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047d4:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ef      	bne.n	80047c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d14a      	bne.n	800487c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d111      	bne.n	8004810 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047ec:	4b26      	ldr	r3, [pc, #152]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6892      	ldr	r2, [r2, #8]
 80047fc:	0211      	lsls	r1, r2, #8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68d2      	ldr	r2, [r2, #12]
 8004802:	0912      	lsrs	r2, r2, #4
 8004804:	0452      	lsls	r2, r2, #17
 8004806:	430a      	orrs	r2, r1
 8004808:	491f      	ldr	r1, [pc, #124]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	614b      	str	r3, [r1, #20]
 800480e:	e011      	b.n	8004834 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004810:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004818:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6892      	ldr	r2, [r2, #8]
 8004820:	0211      	lsls	r1, r2, #8
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6912      	ldr	r2, [r2, #16]
 8004826:	0852      	lsrs	r2, r2, #1
 8004828:	3a01      	subs	r2, #1
 800482a:	0652      	lsls	r2, r2, #25
 800482c:	430a      	orrs	r2, r1
 800482e:	4916      	ldr	r1, [pc, #88]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	4313      	orrs	r3, r2
 8004832:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004834:	4b14      	ldr	r3, [pc, #80]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd fe06 	bl	8002450 <HAL_GetTick>
 8004844:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004846:	e009      	b.n	800485c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004848:	f7fd fe02 	bl	8002450 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d902      	bls.n	800485c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	73fb      	strb	r3, [r7, #15]
          break;
 800485a:	e005      	b.n	8004868 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ef      	beq.n	8004848 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4904      	ldr	r1, [pc, #16]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000

0800488c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e040      	b.n	8004920 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd fba6 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fbca 	bl	8005064 <UART_SetConfig>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e022      	b.n	8004920 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fe76 	bl	80055d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fefd 	bl	8005718 <UART_CheckIdleState>
 800491e:	4603      	mov	r3, r0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493c:	2b20      	cmp	r3, #32
 800493e:	f040 8082 	bne.w	8004a46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_UART_Transmit+0x26>
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e07a      	b.n	8004a48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_UART_Transmit+0x38>
 800495c:	2302      	movs	r3, #2
 800495e:	e073      	b.n	8004a48 <HAL_UART_Transmit+0x120>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2221      	movs	r2, #33	; 0x21
 8004974:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004976:	f7fd fd6b 	bl	8002450 <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	88fa      	ldrh	r2, [r7, #6]
 8004980:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	d108      	bne.n	80049a8 <HAL_UART_Transmit+0x80>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e003      	b.n	80049b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80049b8:	e02d      	b.n	8004a16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2180      	movs	r1, #128	; 0x80
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fef0 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e039      	b.n	8004a48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	881a      	ldrh	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e6:	b292      	uxth	r2, r2
 80049e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	3302      	adds	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e008      	b.n	8004a04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	b292      	uxth	r2, r2
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	3301      	adds	r3, #1
 8004a02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1cb      	bne.n	80049ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2140      	movs	r1, #64	; 0x40
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 febc 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e005      	b.n	8004a48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b0ba      	sub	sp, #232	; 0xe8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a7e:	4013      	ands	r3, r2
 8004a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d115      	bne.n	8004ab8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00f      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 82a6 	beq.w	8004ffa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
      }
      return;
 8004ab6:	e2a0      	b.n	8004ffa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8117 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ace:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ad2:	4b85      	ldr	r3, [pc, #532]	; (8004ce8 <HAL_UART_IRQHandler+0x298>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 810a 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d011      	beq.n	8004b0c <HAL_UART_IRQHandler+0xbc>
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d011      	beq.n	8004b3c <HAL_UART_IRQHandler+0xec>
 8004b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d011      	beq.n	8004b6c <HAL_UART_IRQHandler+0x11c>
 8004b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d017      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2208      	movs	r2, #8
 8004b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9e:	f043 0208 	orr.w	r2, r3, #8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d012      	beq.n	8004bda <HAL_UART_IRQHandler+0x18a>
 8004bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00c      	beq.n	8004bda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 820c 	beq.w	8004ffe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d04f      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 ff4a 	bl	8005acc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d141      	bne.n	8004cca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1d9      	bne.n	8004c46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d013      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a13      	ldr	r2, [pc, #76]	; (8004cec <HAL_UART_IRQHandler+0x29c>)
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe f818 	bl	8002cdc <HAL_DMA_Abort_IT>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d017      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	e00f      	b.n	8004ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9c4 	bl	8005050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	e00b      	b.n	8004ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9c0 	bl	8005050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	e007      	b.n	8004ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f9bc 	bl	8005050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ce0:	e18d      	b.n	8004ffe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce2:	bf00      	nop
    return;
 8004ce4:	e18b      	b.n	8004ffe <HAL_UART_IRQHandler+0x5ae>
 8004ce6:	bf00      	nop
 8004ce8:	04000120 	.word	0x04000120
 8004cec:	08005d6b 	.word	0x08005d6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f040 8146 	bne.w	8004f86 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 813f 	beq.w	8004f86 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8138 	beq.w	8004f86 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2210      	movs	r2, #16
 8004d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	f040 80b4 	bne.w	8004e96 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 815f 	beq.w	8005002 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	f080 8157 	bcs.w	8005002 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 8085 	bne.w	8004e7a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1da      	bne.n	8004d70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004de2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e1      	bne.n	8004dba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e3      	bne.n	8004df6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4a:	f023 0310 	bic.w	r3, r3, #16
 8004e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e4      	bne.n	8004e3a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fd fef3 	bl	8002c60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc fa44 	bl	800131c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e94:	e0b5      	b.n	8005002 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80a7 	beq.w	8005006 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a2 	beq.w	8005006 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e4      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	623b      	str	r3, [r7, #32]
   return(result);
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3308      	adds	r3, #8
 8004f18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f1c:	633a      	str	r2, [r7, #48]	; 0x30
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e3      	bne.n	8004ef8 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	69b9      	ldr	r1, [r7, #24]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	617b      	str	r3, [r7, #20]
   return(result);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e4      	bne.n	8004f42 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc f9cc 	bl	800131c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f84:	e03f      	b.n	8005006 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00e      	beq.n	8004fb0 <HAL_UART_IRQHandler+0x560>
 8004f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 ff1e 	bl	8005dea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fae:	e02d      	b.n	800500c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01c      	beq.n	800500a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
    }
    return;
 8004fd8:	e017      	b.n	800500a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d012      	beq.n	800500c <HAL_UART_IRQHandler+0x5bc>
 8004fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fecf 	bl	8005d96 <UART_EndTransmit_IT>
    return;
 8004ff8:	e008      	b.n	800500c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ffa:	bf00      	nop
 8004ffc:	e006      	b.n	800500c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004ffe:	bf00      	nop
 8005000:	e004      	b.n	800500c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <HAL_UART_IRQHandler+0x5bc>
    return;
 800500a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800500c:	37e8      	adds	r7, #232	; 0xe8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop

08005014 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005068:	b08a      	sub	sp, #40	; 0x28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	431a      	orrs	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	431a      	orrs	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4313      	orrs	r3, r2
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4ba4      	ldr	r3, [pc, #656]	; (8005324 <UART_SetConfig+0x2c0>)
 8005094:	4013      	ands	r3, r2
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800509c:	430b      	orrs	r3, r1
 800509e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a99      	ldr	r2, [pc, #612]	; (8005328 <UART_SetConfig+0x2c4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	4313      	orrs	r3, r2
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a90      	ldr	r2, [pc, #576]	; (800532c <UART_SetConfig+0x2c8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d126      	bne.n	800513c <UART_SetConfig+0xd8>
 80050ee:	4b90      	ldr	r3, [pc, #576]	; (8005330 <UART_SetConfig+0x2cc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d81b      	bhi.n	8005134 <UART_SetConfig+0xd0>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0xa0>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005115 	.word	0x08005115
 8005108:	08005125 	.word	0x08005125
 800510c:	0800511d 	.word	0x0800511d
 8005110:	0800512d 	.word	0x0800512d
 8005114:	2301      	movs	r3, #1
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e116      	b.n	800534a <UART_SetConfig+0x2e6>
 800511c:	2302      	movs	r3, #2
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e112      	b.n	800534a <UART_SetConfig+0x2e6>
 8005124:	2304      	movs	r3, #4
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e10e      	b.n	800534a <UART_SetConfig+0x2e6>
 800512c:	2308      	movs	r3, #8
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005132:	e10a      	b.n	800534a <UART_SetConfig+0x2e6>
 8005134:	2310      	movs	r3, #16
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e106      	b.n	800534a <UART_SetConfig+0x2e6>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a7c      	ldr	r2, [pc, #496]	; (8005334 <UART_SetConfig+0x2d0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d138      	bne.n	80051b8 <UART_SetConfig+0x154>
 8005146:	4b7a      	ldr	r3, [pc, #488]	; (8005330 <UART_SetConfig+0x2cc>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b0c      	cmp	r3, #12
 8005152:	d82d      	bhi.n	80051b0 <UART_SetConfig+0x14c>
 8005154:	a201      	add	r2, pc, #4	; (adr r2, 800515c <UART_SetConfig+0xf8>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005191 	.word	0x08005191
 8005160:	080051b1 	.word	0x080051b1
 8005164:	080051b1 	.word	0x080051b1
 8005168:	080051b1 	.word	0x080051b1
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080051b1 	.word	0x080051b1
 8005174:	080051b1 	.word	0x080051b1
 8005178:	080051b1 	.word	0x080051b1
 800517c:	08005199 	.word	0x08005199
 8005180:	080051b1 	.word	0x080051b1
 8005184:	080051b1 	.word	0x080051b1
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051a9 	.word	0x080051a9
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e0d8      	b.n	800534a <UART_SetConfig+0x2e6>
 8005198:	2302      	movs	r3, #2
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e0d4      	b.n	800534a <UART_SetConfig+0x2e6>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a6:	e0d0      	b.n	800534a <UART_SetConfig+0x2e6>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ae:	e0cc      	b.n	800534a <UART_SetConfig+0x2e6>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e0c8      	b.n	800534a <UART_SetConfig+0x2e6>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a5e      	ldr	r2, [pc, #376]	; (8005338 <UART_SetConfig+0x2d4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d125      	bne.n	800520e <UART_SetConfig+0x1aa>
 80051c2:	4b5b      	ldr	r3, [pc, #364]	; (8005330 <UART_SetConfig+0x2cc>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051cc:	2b30      	cmp	r3, #48	; 0x30
 80051ce:	d016      	beq.n	80051fe <UART_SetConfig+0x19a>
 80051d0:	2b30      	cmp	r3, #48	; 0x30
 80051d2:	d818      	bhi.n	8005206 <UART_SetConfig+0x1a2>
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d00a      	beq.n	80051ee <UART_SetConfig+0x18a>
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d814      	bhi.n	8005206 <UART_SetConfig+0x1a2>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <UART_SetConfig+0x182>
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d008      	beq.n	80051f6 <UART_SetConfig+0x192>
 80051e4:	e00f      	b.n	8005206 <UART_SetConfig+0x1a2>
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ec:	e0ad      	b.n	800534a <UART_SetConfig+0x2e6>
 80051ee:	2302      	movs	r3, #2
 80051f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f4:	e0a9      	b.n	800534a <UART_SetConfig+0x2e6>
 80051f6:	2304      	movs	r3, #4
 80051f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fc:	e0a5      	b.n	800534a <UART_SetConfig+0x2e6>
 80051fe:	2308      	movs	r3, #8
 8005200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005204:	e0a1      	b.n	800534a <UART_SetConfig+0x2e6>
 8005206:	2310      	movs	r3, #16
 8005208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520c:	e09d      	b.n	800534a <UART_SetConfig+0x2e6>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a4a      	ldr	r2, [pc, #296]	; (800533c <UART_SetConfig+0x2d8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d125      	bne.n	8005264 <UART_SetConfig+0x200>
 8005218:	4b45      	ldr	r3, [pc, #276]	; (8005330 <UART_SetConfig+0x2cc>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005222:	2bc0      	cmp	r3, #192	; 0xc0
 8005224:	d016      	beq.n	8005254 <UART_SetConfig+0x1f0>
 8005226:	2bc0      	cmp	r3, #192	; 0xc0
 8005228:	d818      	bhi.n	800525c <UART_SetConfig+0x1f8>
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d00a      	beq.n	8005244 <UART_SetConfig+0x1e0>
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d814      	bhi.n	800525c <UART_SetConfig+0x1f8>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <UART_SetConfig+0x1d8>
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d008      	beq.n	800524c <UART_SetConfig+0x1e8>
 800523a:	e00f      	b.n	800525c <UART_SetConfig+0x1f8>
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e082      	b.n	800534a <UART_SetConfig+0x2e6>
 8005244:	2302      	movs	r3, #2
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e07e      	b.n	800534a <UART_SetConfig+0x2e6>
 800524c:	2304      	movs	r3, #4
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005252:	e07a      	b.n	800534a <UART_SetConfig+0x2e6>
 8005254:	2308      	movs	r3, #8
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525a:	e076      	b.n	800534a <UART_SetConfig+0x2e6>
 800525c:	2310      	movs	r3, #16
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e072      	b.n	800534a <UART_SetConfig+0x2e6>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a35      	ldr	r2, [pc, #212]	; (8005340 <UART_SetConfig+0x2dc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d12a      	bne.n	80052c4 <UART_SetConfig+0x260>
 800526e:	4b30      	ldr	r3, [pc, #192]	; (8005330 <UART_SetConfig+0x2cc>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527c:	d01a      	beq.n	80052b4 <UART_SetConfig+0x250>
 800527e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005282:	d81b      	bhi.n	80052bc <UART_SetConfig+0x258>
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	d00c      	beq.n	80052a4 <UART_SetConfig+0x240>
 800528a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528e:	d815      	bhi.n	80052bc <UART_SetConfig+0x258>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <UART_SetConfig+0x238>
 8005294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005298:	d008      	beq.n	80052ac <UART_SetConfig+0x248>
 800529a:	e00f      	b.n	80052bc <UART_SetConfig+0x258>
 800529c:	2300      	movs	r3, #0
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e052      	b.n	800534a <UART_SetConfig+0x2e6>
 80052a4:	2302      	movs	r3, #2
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052aa:	e04e      	b.n	800534a <UART_SetConfig+0x2e6>
 80052ac:	2304      	movs	r3, #4
 80052ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b2:	e04a      	b.n	800534a <UART_SetConfig+0x2e6>
 80052b4:	2308      	movs	r3, #8
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ba:	e046      	b.n	800534a <UART_SetConfig+0x2e6>
 80052bc:	2310      	movs	r3, #16
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c2:	e042      	b.n	800534a <UART_SetConfig+0x2e6>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a17      	ldr	r2, [pc, #92]	; (8005328 <UART_SetConfig+0x2c4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d13a      	bne.n	8005344 <UART_SetConfig+0x2e0>
 80052ce:	4b18      	ldr	r3, [pc, #96]	; (8005330 <UART_SetConfig+0x2cc>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052dc:	d01a      	beq.n	8005314 <UART_SetConfig+0x2b0>
 80052de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052e2:	d81b      	bhi.n	800531c <UART_SetConfig+0x2b8>
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	d00c      	beq.n	8005304 <UART_SetConfig+0x2a0>
 80052ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ee:	d815      	bhi.n	800531c <UART_SetConfig+0x2b8>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <UART_SetConfig+0x298>
 80052f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f8:	d008      	beq.n	800530c <UART_SetConfig+0x2a8>
 80052fa:	e00f      	b.n	800531c <UART_SetConfig+0x2b8>
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005302:	e022      	b.n	800534a <UART_SetConfig+0x2e6>
 8005304:	2302      	movs	r3, #2
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530a:	e01e      	b.n	800534a <UART_SetConfig+0x2e6>
 800530c:	2304      	movs	r3, #4
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e01a      	b.n	800534a <UART_SetConfig+0x2e6>
 8005314:	2308      	movs	r3, #8
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e016      	b.n	800534a <UART_SetConfig+0x2e6>
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	e012      	b.n	800534a <UART_SetConfig+0x2e6>
 8005324:	efff69f3 	.word	0xefff69f3
 8005328:	40008000 	.word	0x40008000
 800532c:	40013800 	.word	0x40013800
 8005330:	40021000 	.word	0x40021000
 8005334:	40004400 	.word	0x40004400
 8005338:	40004800 	.word	0x40004800
 800533c:	40004c00 	.word	0x40004c00
 8005340:	40005000 	.word	0x40005000
 8005344:	2310      	movs	r3, #16
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a9f      	ldr	r2, [pc, #636]	; (80055cc <UART_SetConfig+0x568>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d17a      	bne.n	800544a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005358:	2b08      	cmp	r3, #8
 800535a:	d824      	bhi.n	80053a6 <UART_SetConfig+0x342>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x300>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005389 	.word	0x08005389
 8005368:	080053a7 	.word	0x080053a7
 800536c:	08005391 	.word	0x08005391
 8005370:	080053a7 	.word	0x080053a7
 8005374:	08005397 	.word	0x08005397
 8005378:	080053a7 	.word	0x080053a7
 800537c:	080053a7 	.word	0x080053a7
 8005380:	080053a7 	.word	0x080053a7
 8005384:	0800539f 	.word	0x0800539f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe fd38 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 800538c:	61f8      	str	r0, [r7, #28]
        break;
 800538e:	e010      	b.n	80053b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005390:	4b8f      	ldr	r3, [pc, #572]	; (80055d0 <UART_SetConfig+0x56c>)
 8005392:	61fb      	str	r3, [r7, #28]
        break;
 8005394:	e00d      	b.n	80053b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005396:	f7fe fc99 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 800539a:	61f8      	str	r0, [r7, #28]
        break;
 800539c:	e009      	b.n	80053b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800539e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053a2:	61fb      	str	r3, [r7, #28]
        break;
 80053a4:	e005      	b.n	80053b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80fb 	beq.w	80055b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4613      	mov	r3, r2
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	4413      	add	r3, r2
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d305      	bcc.n	80053d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d903      	bls.n	80053de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053dc:	e0e8      	b.n	80055b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2200      	movs	r2, #0
 80053e2:	461c      	mov	r4, r3
 80053e4:	4615      	mov	r5, r2
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	022b      	lsls	r3, r5, #8
 80053f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053f4:	0222      	lsls	r2, r4, #8
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	6849      	ldr	r1, [r1, #4]
 80053fa:	0849      	lsrs	r1, r1, #1
 80053fc:	2000      	movs	r0, #0
 80053fe:	4688      	mov	r8, r1
 8005400:	4681      	mov	r9, r0
 8005402:	eb12 0a08 	adds.w	sl, r2, r8
 8005406:	eb43 0b09 	adc.w	fp, r3, r9
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005418:	4650      	mov	r0, sl
 800541a:	4659      	mov	r1, fp
 800541c:	f7fb fd92 	bl	8000f44 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4613      	mov	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800542e:	d308      	bcc.n	8005442 <UART_SetConfig+0x3de>
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005436:	d204      	bcs.n	8005442 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	60da      	str	r2, [r3, #12]
 8005440:	e0b6      	b.n	80055b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005448:	e0b2      	b.n	80055b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d15e      	bne.n	8005512 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005458:	2b08      	cmp	r3, #8
 800545a:	d828      	bhi.n	80054ae <UART_SetConfig+0x44a>
 800545c:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x400>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005489 	.word	0x08005489
 8005468:	08005491 	.word	0x08005491
 800546c:	08005499 	.word	0x08005499
 8005470:	080054af 	.word	0x080054af
 8005474:	0800549f 	.word	0x0800549f
 8005478:	080054af 	.word	0x080054af
 800547c:	080054af 	.word	0x080054af
 8005480:	080054af 	.word	0x080054af
 8005484:	080054a7 	.word	0x080054a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005488:	f7fe fcb8 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 800548c:	61f8      	str	r0, [r7, #28]
        break;
 800548e:	e014      	b.n	80054ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7fe fcca 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8005494:	61f8      	str	r0, [r7, #28]
        break;
 8005496:	e010      	b.n	80054ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005498:	4b4d      	ldr	r3, [pc, #308]	; (80055d0 <UART_SetConfig+0x56c>)
 800549a:	61fb      	str	r3, [r7, #28]
        break;
 800549c:	e00d      	b.n	80054ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549e:	f7fe fc15 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 80054a2:	61f8      	str	r0, [r7, #28]
        break;
 80054a4:	e009      	b.n	80054ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054aa:	61fb      	str	r3, [r7, #28]
        break;
 80054ac:	e005      	b.n	80054ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d077      	beq.n	80055b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	005a      	lsls	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	441a      	add	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b0f      	cmp	r3, #15
 80054da:	d916      	bls.n	800550a <UART_SetConfig+0x4a6>
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e2:	d212      	bcs.n	800550a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f023 030f 	bic.w	r3, r3, #15
 80054ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	8afa      	ldrh	r2, [r7, #22]
 8005506:	60da      	str	r2, [r3, #12]
 8005508:	e052      	b.n	80055b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005510:	e04e      	b.n	80055b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005516:	2b08      	cmp	r3, #8
 8005518:	d827      	bhi.n	800556a <UART_SetConfig+0x506>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x4bc>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005545 	.word	0x08005545
 8005524:	0800554d 	.word	0x0800554d
 8005528:	08005555 	.word	0x08005555
 800552c:	0800556b 	.word	0x0800556b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800556b 	.word	0x0800556b
 8005538:	0800556b 	.word	0x0800556b
 800553c:	0800556b 	.word	0x0800556b
 8005540:	08005563 	.word	0x08005563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe fc5a 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 8005548:	61f8      	str	r0, [r7, #28]
        break;
 800554a:	e014      	b.n	8005576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800554c:	f7fe fc6c 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8005550:	61f8      	str	r0, [r7, #28]
        break;
 8005552:	e010      	b.n	8005576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005554:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <UART_SetConfig+0x56c>)
 8005556:	61fb      	str	r3, [r7, #28]
        break;
 8005558:	e00d      	b.n	8005576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555a:	f7fe fbb7 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 800555e:	61f8      	str	r0, [r7, #28]
        break;
 8005560:	e009      	b.n	8005576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	61fb      	str	r3, [r7, #28]
        break;
 8005568:	e005      	b.n	8005576 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005574:	bf00      	nop
    }

    if (pclk != 0U)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d019      	beq.n	80055b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	085a      	lsrs	r2, r3, #1
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	441a      	add	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d909      	bls.n	80055aa <UART_SetConfig+0x546>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d205      	bcs.n	80055aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e002      	b.n	80055b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3728      	adds	r7, #40	; 0x28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ca:	bf00      	nop
 80055cc:	40008000 	.word	0x40008000
 80055d0:	00f42400 	.word	0x00f42400

080055d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01a      	beq.n	80056ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d2:	d10a      	bne.n	80056ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	605a      	str	r2, [r3, #4]
  }
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af02      	add	r7, sp, #8
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005728:	f7fc fe92 	bl	8002450 <HAL_GetTick>
 800572c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d10e      	bne.n	800575a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800573c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f82d 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e023      	b.n	80057a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d10e      	bne.n	8005786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f817 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e00d      	b.n	80057a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b09c      	sub	sp, #112	; 0x70
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ba:	e0a5      	b.n	8005908 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	f000 80a1 	beq.w	8005908 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c6:	f7fc fe43 	bl	8002450 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <UART_WaitOnFlagUntilTimeout+0x32>
 80057d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d13e      	bne.n	800585a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057f0:	667b      	str	r3, [r7, #100]	; 0x64
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005800:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e6      	bne.n	80057dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	663b      	str	r3, [r7, #96]	; 0x60
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800582e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800583c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e5      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2220      	movs	r2, #32
 800584c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e067      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d04f      	beq.n	8005908 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005876:	d147      	bne.n	8005908 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005880:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	637b      	str	r3, [r7, #52]	; 0x34
 80058a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e6      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3308      	adds	r3, #8
 80058ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	613b      	str	r3, [r7, #16]
   return(result);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058d4:	623a      	str	r2, [r7, #32]
 80058d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	69f9      	ldr	r1, [r7, #28]
 80058da:	6a3a      	ldr	r2, [r7, #32]
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e5      	bne.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e010      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4013      	ands	r3, r2
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	429a      	cmp	r2, r3
 8005924:	f43f af4a 	beq.w	80057bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3770      	adds	r7, #112	; 0x70
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b096      	sub	sp, #88	; 0x58
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4613      	mov	r3, r2
 8005940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2222      	movs	r2, #34	; 0x22
 800595c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02b      	beq.n	80059be <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	4a42      	ldr	r2, [pc, #264]	; (8005a74 <UART_Start_Receive_DMA+0x140>)
 800596c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	4a41      	ldr	r2, [pc, #260]	; (8005a78 <UART_Start_Receive_DMA+0x144>)
 8005974:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <UART_Start_Receive_DMA+0x148>)
 800597c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	2200      	movs	r2, #0
 8005984:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3324      	adds	r3, #36	; 0x24
 8005990:	4619      	mov	r1, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	461a      	mov	r2, r3
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	f7fd f901 	bl	8002ba0 <HAL_DMA_Start_IT>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2210      	movs	r2, #16
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e055      	b.n	8005a6a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d018      	beq.n	8005a00 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e2:	657b      	str	r3, [r7, #84]	; 0x54
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ee:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e6      	bne.n	80059ce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3308      	adds	r3, #8
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	653b      	str	r3, [r7, #80]	; 0x50
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a20:	637a      	str	r2, [r7, #52]	; 0x34
 8005a22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e5      	bne.n	8005a00 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	613b      	str	r3, [r7, #16]
   return(result);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a54:	623a      	str	r2, [r7, #32]
 8005a56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	69f9      	ldr	r1, [r7, #28]
 8005a5a:	6a3a      	ldr	r2, [r7, #32]
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3758      	adds	r7, #88	; 0x58
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	08005b93 	.word	0x08005b93
 8005a78:	08005cb7 	.word	0x08005cb7
 8005a7c:	08005cef 	.word	0x08005cef

08005a80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	; 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005ac0:	bf00      	nop
 8005ac2:	3724      	adds	r7, #36	; 0x24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b095      	sub	sp, #84	; 0x54
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af2:	643b      	str	r3, [r7, #64]	; 0x40
 8005af4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e6      	bne.n	8005ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3308      	adds	r3, #8
 8005b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e5      	bne.n	8005b06 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d118      	bne.n	8005b74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f023 0310 	bic.w	r3, r3, #16
 8005b56:	647b      	str	r3, [r7, #68]	; 0x44
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6979      	ldr	r1, [r7, #20]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e6      	bne.n	8005b42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005b86:	bf00      	nop
 8005b88:	3754      	adds	r7, #84	; 0x54
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b09c      	sub	sp, #112	; 0x70
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d170      	bne.n	8005c90 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8005bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e6      	bne.n	8005bb6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3308      	adds	r3, #8
 8005bee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8005c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c08:	647a      	str	r2, [r7, #68]	; 0x44
 8005c0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e5      	bne.n	8005be8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3308      	adds	r3, #8
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c32:	663b      	str	r3, [r7, #96]	; 0x60
 8005c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3308      	adds	r3, #8
 8005c3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c3c:	633a      	str	r2, [r7, #48]	; 0x30
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e5      	bne.n	8005c1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	2220      	movs	r2, #32
 8005c54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d118      	bne.n	8005c90 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0310 	bic.w	r3, r3, #16
 8005c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	69b9      	ldr	r1, [r7, #24]
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	617b      	str	r3, [r7, #20]
   return(result);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e6      	bne.n	8005c5e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d107      	bne.n	8005ca8 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ca2:	f7fb fb3b 	bl	800131c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ca6:	e002      	b.n	8005cae <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005ca8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005caa:	f7ff f9bd 	bl	8005028 <HAL_UART_RxCpltCallback>
}
 8005cae:	bf00      	nop
 8005cb0:	3770      	adds	r7, #112	; 0x70
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d109      	bne.n	8005ce0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7fb fb1f 	bl	800131c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cde:	e002      	b.n	8005ce6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff f9ab 	bl	800503c <HAL_UART_RxHalfCpltCallback>
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b086      	sub	sp, #24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d00:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b80      	cmp	r3, #128	; 0x80
 8005d14:	d109      	bne.n	8005d2a <UART_DMAError+0x3c>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b21      	cmp	r3, #33	; 0x21
 8005d1a:	d106      	bne.n	8005d2a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005d24:	6978      	ldr	r0, [r7, #20]
 8005d26:	f7ff feab 	bl	8005a80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d109      	bne.n	8005d4c <UART_DMAError+0x5e>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b22      	cmp	r3, #34	; 0x22
 8005d3c:	d106      	bne.n	8005d4c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005d46:	6978      	ldr	r0, [r7, #20]
 8005d48:	f7ff fec0 	bl	8005acc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d52:	f043 0210 	orr.w	r2, r3, #16
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	f7ff f977 	bl	8005050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d62:	bf00      	nop
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff f961 	bl	8005050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d8e:	bf00      	nop
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b088      	sub	sp, #32
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e6      	bne.n	8005d9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff f919 	bl	8005014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de2:	bf00      	nop
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b08c      	sub	sp, #48	; 0x30
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d14a      	bne.n	8005eaa <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e043      	b.n	8005eac <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e03c      	b.n	8005eac <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005e40:	88fb      	ldrh	r3, [r7, #6]
 8005e42:	461a      	mov	r2, r3
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff fd74 	bl	8005934 <UART_Start_Receive_DMA>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d124      	bne.n	8005ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d11d      	bne.n	8005e9e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2210      	movs	r2, #16
 8005e68:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	617b      	str	r3, [r7, #20]
   return(result);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f043 0310 	orr.w	r3, r3, #16
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6a39      	ldr	r1, [r7, #32]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e6      	bne.n	8005e6a <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8005e9c:	e002      	b.n	8005ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ea8:	e000      	b.n	8005eac <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
  }
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3730      	adds	r7, #48	; 0x30
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <__errno>:
 8005eb4:	4b01      	ldr	r3, [pc, #4]	; (8005ebc <__errno+0x8>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000024 	.word	0x20000024

08005ec0 <__libc_init_array>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	4d0d      	ldr	r5, [pc, #52]	; (8005ef8 <__libc_init_array+0x38>)
 8005ec4:	4c0d      	ldr	r4, [pc, #52]	; (8005efc <__libc_init_array+0x3c>)
 8005ec6:	1b64      	subs	r4, r4, r5
 8005ec8:	10a4      	asrs	r4, r4, #2
 8005eca:	2600      	movs	r6, #0
 8005ecc:	42a6      	cmp	r6, r4
 8005ece:	d109      	bne.n	8005ee4 <__libc_init_array+0x24>
 8005ed0:	4d0b      	ldr	r5, [pc, #44]	; (8005f00 <__libc_init_array+0x40>)
 8005ed2:	4c0c      	ldr	r4, [pc, #48]	; (8005f04 <__libc_init_array+0x44>)
 8005ed4:	f004 fcc8 	bl	800a868 <_init>
 8005ed8:	1b64      	subs	r4, r4, r5
 8005eda:	10a4      	asrs	r4, r4, #2
 8005edc:	2600      	movs	r6, #0
 8005ede:	42a6      	cmp	r6, r4
 8005ee0:	d105      	bne.n	8005eee <__libc_init_array+0x2e>
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee8:	4798      	blx	r3
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7ee      	b.n	8005ecc <__libc_init_array+0xc>
 8005eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef2:	4798      	blx	r3
 8005ef4:	3601      	adds	r6, #1
 8005ef6:	e7f2      	b.n	8005ede <__libc_init_array+0x1e>
 8005ef8:	0800ae4c 	.word	0x0800ae4c
 8005efc:	0800ae4c 	.word	0x0800ae4c
 8005f00:	0800ae4c 	.word	0x0800ae4c
 8005f04:	0800ae50 	.word	0x0800ae50

08005f08 <memset>:
 8005f08:	4402      	add	r2, r0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d100      	bne.n	8005f12 <memset+0xa>
 8005f10:	4770      	bx	lr
 8005f12:	f803 1b01 	strb.w	r1, [r3], #1
 8005f16:	e7f9      	b.n	8005f0c <memset+0x4>

08005f18 <__cvt>:
 8005f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	ec55 4b10 	vmov	r4, r5, d0
 8005f20:	2d00      	cmp	r5, #0
 8005f22:	460e      	mov	r6, r1
 8005f24:	4619      	mov	r1, r3
 8005f26:	462b      	mov	r3, r5
 8005f28:	bfbb      	ittet	lt
 8005f2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f2e:	461d      	movlt	r5, r3
 8005f30:	2300      	movge	r3, #0
 8005f32:	232d      	movlt	r3, #45	; 0x2d
 8005f34:	700b      	strb	r3, [r1, #0]
 8005f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f3c:	4691      	mov	r9, r2
 8005f3e:	f023 0820 	bic.w	r8, r3, #32
 8005f42:	bfbc      	itt	lt
 8005f44:	4622      	movlt	r2, r4
 8005f46:	4614      	movlt	r4, r2
 8005f48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f4c:	d005      	beq.n	8005f5a <__cvt+0x42>
 8005f4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f52:	d100      	bne.n	8005f56 <__cvt+0x3e>
 8005f54:	3601      	adds	r6, #1
 8005f56:	2102      	movs	r1, #2
 8005f58:	e000      	b.n	8005f5c <__cvt+0x44>
 8005f5a:	2103      	movs	r1, #3
 8005f5c:	ab03      	add	r3, sp, #12
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	ab02      	add	r3, sp, #8
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	ec45 4b10 	vmov	d0, r4, r5
 8005f68:	4653      	mov	r3, sl
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	f001 fde4 	bl	8007b38 <_dtoa_r>
 8005f70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f74:	4607      	mov	r7, r0
 8005f76:	d102      	bne.n	8005f7e <__cvt+0x66>
 8005f78:	f019 0f01 	tst.w	r9, #1
 8005f7c:	d022      	beq.n	8005fc4 <__cvt+0xac>
 8005f7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f82:	eb07 0906 	add.w	r9, r7, r6
 8005f86:	d110      	bne.n	8005faa <__cvt+0x92>
 8005f88:	783b      	ldrb	r3, [r7, #0]
 8005f8a:	2b30      	cmp	r3, #48	; 0x30
 8005f8c:	d10a      	bne.n	8005fa4 <__cvt+0x8c>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2300      	movs	r3, #0
 8005f92:	4620      	mov	r0, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	f7fa fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f9a:	b918      	cbnz	r0, 8005fa4 <__cvt+0x8c>
 8005f9c:	f1c6 0601 	rsb	r6, r6, #1
 8005fa0:	f8ca 6000 	str.w	r6, [sl]
 8005fa4:	f8da 3000 	ldr.w	r3, [sl]
 8005fa8:	4499      	add	r9, r3
 8005faa:	2200      	movs	r2, #0
 8005fac:	2300      	movs	r3, #0
 8005fae:	4620      	mov	r0, r4
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f7fa fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fb6:	b108      	cbz	r0, 8005fbc <__cvt+0xa4>
 8005fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fbc:	2230      	movs	r2, #48	; 0x30
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	454b      	cmp	r3, r9
 8005fc2:	d307      	bcc.n	8005fd4 <__cvt+0xbc>
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fc8:	1bdb      	subs	r3, r3, r7
 8005fca:	4638      	mov	r0, r7
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	b004      	add	sp, #16
 8005fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd4:	1c59      	adds	r1, r3, #1
 8005fd6:	9103      	str	r1, [sp, #12]
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e7f0      	b.n	8005fbe <__cvt+0xa6>

08005fdc <__exponent>:
 8005fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	bfb8      	it	lt
 8005fe4:	4249      	neglt	r1, r1
 8005fe6:	f803 2b02 	strb.w	r2, [r3], #2
 8005fea:	bfb4      	ite	lt
 8005fec:	222d      	movlt	r2, #45	; 0x2d
 8005fee:	222b      	movge	r2, #43	; 0x2b
 8005ff0:	2909      	cmp	r1, #9
 8005ff2:	7042      	strb	r2, [r0, #1]
 8005ff4:	dd2a      	ble.n	800604c <__exponent+0x70>
 8005ff6:	f10d 0407 	add.w	r4, sp, #7
 8005ffa:	46a4      	mov	ip, r4
 8005ffc:	270a      	movs	r7, #10
 8005ffe:	46a6      	mov	lr, r4
 8006000:	460a      	mov	r2, r1
 8006002:	fb91 f6f7 	sdiv	r6, r1, r7
 8006006:	fb07 1516 	mls	r5, r7, r6, r1
 800600a:	3530      	adds	r5, #48	; 0x30
 800600c:	2a63      	cmp	r2, #99	; 0x63
 800600e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006016:	4631      	mov	r1, r6
 8006018:	dcf1      	bgt.n	8005ffe <__exponent+0x22>
 800601a:	3130      	adds	r1, #48	; 0x30
 800601c:	f1ae 0502 	sub.w	r5, lr, #2
 8006020:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006024:	1c44      	adds	r4, r0, #1
 8006026:	4629      	mov	r1, r5
 8006028:	4561      	cmp	r1, ip
 800602a:	d30a      	bcc.n	8006042 <__exponent+0x66>
 800602c:	f10d 0209 	add.w	r2, sp, #9
 8006030:	eba2 020e 	sub.w	r2, r2, lr
 8006034:	4565      	cmp	r5, ip
 8006036:	bf88      	it	hi
 8006038:	2200      	movhi	r2, #0
 800603a:	4413      	add	r3, r2
 800603c:	1a18      	subs	r0, r3, r0
 800603e:	b003      	add	sp, #12
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006046:	f804 2f01 	strb.w	r2, [r4, #1]!
 800604a:	e7ed      	b.n	8006028 <__exponent+0x4c>
 800604c:	2330      	movs	r3, #48	; 0x30
 800604e:	3130      	adds	r1, #48	; 0x30
 8006050:	7083      	strb	r3, [r0, #2]
 8006052:	70c1      	strb	r1, [r0, #3]
 8006054:	1d03      	adds	r3, r0, #4
 8006056:	e7f1      	b.n	800603c <__exponent+0x60>

08006058 <_printf_float>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	ed2d 8b02 	vpush	{d8}
 8006060:	b08d      	sub	sp, #52	; 0x34
 8006062:	460c      	mov	r4, r1
 8006064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006068:	4616      	mov	r6, r2
 800606a:	461f      	mov	r7, r3
 800606c:	4605      	mov	r5, r0
 800606e:	f002 fec1 	bl	8008df4 <_localeconv_r>
 8006072:	f8d0 a000 	ldr.w	sl, [r0]
 8006076:	4650      	mov	r0, sl
 8006078:	f7fa f8aa 	bl	80001d0 <strlen>
 800607c:	2300      	movs	r3, #0
 800607e:	930a      	str	r3, [sp, #40]	; 0x28
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	9305      	str	r3, [sp, #20]
 8006084:	f8d8 3000 	ldr.w	r3, [r8]
 8006088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800608c:	3307      	adds	r3, #7
 800608e:	f023 0307 	bic.w	r3, r3, #7
 8006092:	f103 0208 	add.w	r2, r3, #8
 8006096:	f8c8 2000 	str.w	r2, [r8]
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80060a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060aa:	9307      	str	r3, [sp, #28]
 80060ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80060b0:	ee08 0a10 	vmov	s16, r0
 80060b4:	4b9f      	ldr	r3, [pc, #636]	; (8006334 <_printf_float+0x2dc>)
 80060b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060ba:	f04f 32ff 	mov.w	r2, #4294967295
 80060be:	f7fa fd35 	bl	8000b2c <__aeabi_dcmpun>
 80060c2:	bb88      	cbnz	r0, 8006128 <_printf_float+0xd0>
 80060c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060c8:	4b9a      	ldr	r3, [pc, #616]	; (8006334 <_printf_float+0x2dc>)
 80060ca:	f04f 32ff 	mov.w	r2, #4294967295
 80060ce:	f7fa fd0f 	bl	8000af0 <__aeabi_dcmple>
 80060d2:	bb48      	cbnz	r0, 8006128 <_printf_float+0xd0>
 80060d4:	2200      	movs	r2, #0
 80060d6:	2300      	movs	r3, #0
 80060d8:	4640      	mov	r0, r8
 80060da:	4649      	mov	r1, r9
 80060dc:	f7fa fcfe 	bl	8000adc <__aeabi_dcmplt>
 80060e0:	b110      	cbz	r0, 80060e8 <_printf_float+0x90>
 80060e2:	232d      	movs	r3, #45	; 0x2d
 80060e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e8:	4b93      	ldr	r3, [pc, #588]	; (8006338 <_printf_float+0x2e0>)
 80060ea:	4894      	ldr	r0, [pc, #592]	; (800633c <_printf_float+0x2e4>)
 80060ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060f0:	bf94      	ite	ls
 80060f2:	4698      	movls	r8, r3
 80060f4:	4680      	movhi	r8, r0
 80060f6:	2303      	movs	r3, #3
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	9b05      	ldr	r3, [sp, #20]
 80060fc:	f023 0204 	bic.w	r2, r3, #4
 8006100:	6022      	str	r2, [r4, #0]
 8006102:	f04f 0900 	mov.w	r9, #0
 8006106:	9700      	str	r7, [sp, #0]
 8006108:	4633      	mov	r3, r6
 800610a:	aa0b      	add	r2, sp, #44	; 0x2c
 800610c:	4621      	mov	r1, r4
 800610e:	4628      	mov	r0, r5
 8006110:	f000 f9d8 	bl	80064c4 <_printf_common>
 8006114:	3001      	adds	r0, #1
 8006116:	f040 8090 	bne.w	800623a <_printf_float+0x1e2>
 800611a:	f04f 30ff 	mov.w	r0, #4294967295
 800611e:	b00d      	add	sp, #52	; 0x34
 8006120:	ecbd 8b02 	vpop	{d8}
 8006124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	4640      	mov	r0, r8
 800612e:	4649      	mov	r1, r9
 8006130:	f7fa fcfc 	bl	8000b2c <__aeabi_dcmpun>
 8006134:	b140      	cbz	r0, 8006148 <_printf_float+0xf0>
 8006136:	464b      	mov	r3, r9
 8006138:	2b00      	cmp	r3, #0
 800613a:	bfbc      	itt	lt
 800613c:	232d      	movlt	r3, #45	; 0x2d
 800613e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006142:	487f      	ldr	r0, [pc, #508]	; (8006340 <_printf_float+0x2e8>)
 8006144:	4b7f      	ldr	r3, [pc, #508]	; (8006344 <_printf_float+0x2ec>)
 8006146:	e7d1      	b.n	80060ec <_printf_float+0x94>
 8006148:	6863      	ldr	r3, [r4, #4]
 800614a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800614e:	9206      	str	r2, [sp, #24]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	d13f      	bne.n	80061d4 <_printf_float+0x17c>
 8006154:	2306      	movs	r3, #6
 8006156:	6063      	str	r3, [r4, #4]
 8006158:	9b05      	ldr	r3, [sp, #20]
 800615a:	6861      	ldr	r1, [r4, #4]
 800615c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006160:	2300      	movs	r3, #0
 8006162:	9303      	str	r3, [sp, #12]
 8006164:	ab0a      	add	r3, sp, #40	; 0x28
 8006166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800616a:	ab09      	add	r3, sp, #36	; 0x24
 800616c:	ec49 8b10 	vmov	d0, r8, r9
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	6022      	str	r2, [r4, #0]
 8006174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006178:	4628      	mov	r0, r5
 800617a:	f7ff fecd 	bl	8005f18 <__cvt>
 800617e:	9b06      	ldr	r3, [sp, #24]
 8006180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006182:	2b47      	cmp	r3, #71	; 0x47
 8006184:	4680      	mov	r8, r0
 8006186:	d108      	bne.n	800619a <_printf_float+0x142>
 8006188:	1cc8      	adds	r0, r1, #3
 800618a:	db02      	blt.n	8006192 <_printf_float+0x13a>
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	4299      	cmp	r1, r3
 8006190:	dd41      	ble.n	8006216 <_printf_float+0x1be>
 8006192:	f1ab 0b02 	sub.w	fp, fp, #2
 8006196:	fa5f fb8b 	uxtb.w	fp, fp
 800619a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800619e:	d820      	bhi.n	80061e2 <_printf_float+0x18a>
 80061a0:	3901      	subs	r1, #1
 80061a2:	465a      	mov	r2, fp
 80061a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061a8:	9109      	str	r1, [sp, #36]	; 0x24
 80061aa:	f7ff ff17 	bl	8005fdc <__exponent>
 80061ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061b0:	1813      	adds	r3, r2, r0
 80061b2:	2a01      	cmp	r2, #1
 80061b4:	4681      	mov	r9, r0
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	dc02      	bgt.n	80061c0 <_printf_float+0x168>
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	07d2      	lsls	r2, r2, #31
 80061be:	d501      	bpl.n	80061c4 <_printf_float+0x16c>
 80061c0:	3301      	adds	r3, #1
 80061c2:	6123      	str	r3, [r4, #16]
 80061c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d09c      	beq.n	8006106 <_printf_float+0xae>
 80061cc:	232d      	movs	r3, #45	; 0x2d
 80061ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d2:	e798      	b.n	8006106 <_printf_float+0xae>
 80061d4:	9a06      	ldr	r2, [sp, #24]
 80061d6:	2a47      	cmp	r2, #71	; 0x47
 80061d8:	d1be      	bne.n	8006158 <_printf_float+0x100>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1bc      	bne.n	8006158 <_printf_float+0x100>
 80061de:	2301      	movs	r3, #1
 80061e0:	e7b9      	b.n	8006156 <_printf_float+0xfe>
 80061e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80061e6:	d118      	bne.n	800621a <_printf_float+0x1c2>
 80061e8:	2900      	cmp	r1, #0
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	dd0b      	ble.n	8006206 <_printf_float+0x1ae>
 80061ee:	6121      	str	r1, [r4, #16]
 80061f0:	b913      	cbnz	r3, 80061f8 <_printf_float+0x1a0>
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	07d0      	lsls	r0, r2, #31
 80061f6:	d502      	bpl.n	80061fe <_printf_float+0x1a6>
 80061f8:	3301      	adds	r3, #1
 80061fa:	440b      	add	r3, r1
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006200:	f04f 0900 	mov.w	r9, #0
 8006204:	e7de      	b.n	80061c4 <_printf_float+0x16c>
 8006206:	b913      	cbnz	r3, 800620e <_printf_float+0x1b6>
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	07d2      	lsls	r2, r2, #31
 800620c:	d501      	bpl.n	8006212 <_printf_float+0x1ba>
 800620e:	3302      	adds	r3, #2
 8006210:	e7f4      	b.n	80061fc <_printf_float+0x1a4>
 8006212:	2301      	movs	r3, #1
 8006214:	e7f2      	b.n	80061fc <_printf_float+0x1a4>
 8006216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800621a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621c:	4299      	cmp	r1, r3
 800621e:	db05      	blt.n	800622c <_printf_float+0x1d4>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	6121      	str	r1, [r4, #16]
 8006224:	07d8      	lsls	r0, r3, #31
 8006226:	d5ea      	bpl.n	80061fe <_printf_float+0x1a6>
 8006228:	1c4b      	adds	r3, r1, #1
 800622a:	e7e7      	b.n	80061fc <_printf_float+0x1a4>
 800622c:	2900      	cmp	r1, #0
 800622e:	bfd4      	ite	le
 8006230:	f1c1 0202 	rsble	r2, r1, #2
 8006234:	2201      	movgt	r2, #1
 8006236:	4413      	add	r3, r2
 8006238:	e7e0      	b.n	80061fc <_printf_float+0x1a4>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	055a      	lsls	r2, r3, #21
 800623e:	d407      	bmi.n	8006250 <_printf_float+0x1f8>
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	4642      	mov	r2, r8
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	d12c      	bne.n	80062a8 <_printf_float+0x250>
 800624e:	e764      	b.n	800611a <_printf_float+0xc2>
 8006250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006254:	f240 80e0 	bls.w	8006418 <_printf_float+0x3c0>
 8006258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800625c:	2200      	movs	r2, #0
 800625e:	2300      	movs	r3, #0
 8006260:	f7fa fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006264:	2800      	cmp	r0, #0
 8006266:	d034      	beq.n	80062d2 <_printf_float+0x27a>
 8006268:	4a37      	ldr	r2, [pc, #220]	; (8006348 <_printf_float+0x2f0>)
 800626a:	2301      	movs	r3, #1
 800626c:	4631      	mov	r1, r6
 800626e:	4628      	mov	r0, r5
 8006270:	47b8      	blx	r7
 8006272:	3001      	adds	r0, #1
 8006274:	f43f af51 	beq.w	800611a <_printf_float+0xc2>
 8006278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800627c:	429a      	cmp	r2, r3
 800627e:	db02      	blt.n	8006286 <_printf_float+0x22e>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	07d8      	lsls	r0, r3, #31
 8006284:	d510      	bpl.n	80062a8 <_printf_float+0x250>
 8006286:	ee18 3a10 	vmov	r3, s16
 800628a:	4652      	mov	r2, sl
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f43f af41 	beq.w	800611a <_printf_float+0xc2>
 8006298:	f04f 0800 	mov.w	r8, #0
 800629c:	f104 091a 	add.w	r9, r4, #26
 80062a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a2:	3b01      	subs	r3, #1
 80062a4:	4543      	cmp	r3, r8
 80062a6:	dc09      	bgt.n	80062bc <_printf_float+0x264>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	079b      	lsls	r3, r3, #30
 80062ac:	f100 8105 	bmi.w	80064ba <_printf_float+0x462>
 80062b0:	68e0      	ldr	r0, [r4, #12]
 80062b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b4:	4298      	cmp	r0, r3
 80062b6:	bfb8      	it	lt
 80062b8:	4618      	movlt	r0, r3
 80062ba:	e730      	b.n	800611e <_printf_float+0xc6>
 80062bc:	2301      	movs	r3, #1
 80062be:	464a      	mov	r2, r9
 80062c0:	4631      	mov	r1, r6
 80062c2:	4628      	mov	r0, r5
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	f43f af27 	beq.w	800611a <_printf_float+0xc2>
 80062cc:	f108 0801 	add.w	r8, r8, #1
 80062d0:	e7e6      	b.n	80062a0 <_printf_float+0x248>
 80062d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dc39      	bgt.n	800634c <_printf_float+0x2f4>
 80062d8:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <_printf_float+0x2f0>)
 80062da:	2301      	movs	r3, #1
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	f43f af19 	beq.w	800611a <_printf_float+0xc2>
 80062e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ec:	4313      	orrs	r3, r2
 80062ee:	d102      	bne.n	80062f6 <_printf_float+0x29e>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	07d9      	lsls	r1, r3, #31
 80062f4:	d5d8      	bpl.n	80062a8 <_printf_float+0x250>
 80062f6:	ee18 3a10 	vmov	r3, s16
 80062fa:	4652      	mov	r2, sl
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	f43f af09 	beq.w	800611a <_printf_float+0xc2>
 8006308:	f04f 0900 	mov.w	r9, #0
 800630c:	f104 0a1a 	add.w	sl, r4, #26
 8006310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006312:	425b      	negs	r3, r3
 8006314:	454b      	cmp	r3, r9
 8006316:	dc01      	bgt.n	800631c <_printf_float+0x2c4>
 8006318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800631a:	e792      	b.n	8006242 <_printf_float+0x1ea>
 800631c:	2301      	movs	r3, #1
 800631e:	4652      	mov	r2, sl
 8006320:	4631      	mov	r1, r6
 8006322:	4628      	mov	r0, r5
 8006324:	47b8      	blx	r7
 8006326:	3001      	adds	r0, #1
 8006328:	f43f aef7 	beq.w	800611a <_printf_float+0xc2>
 800632c:	f109 0901 	add.w	r9, r9, #1
 8006330:	e7ee      	b.n	8006310 <_printf_float+0x2b8>
 8006332:	bf00      	nop
 8006334:	7fefffff 	.word	0x7fefffff
 8006338:	0800aaa0 	.word	0x0800aaa0
 800633c:	0800aaa4 	.word	0x0800aaa4
 8006340:	0800aaac 	.word	0x0800aaac
 8006344:	0800aaa8 	.word	0x0800aaa8
 8006348:	0800aab0 	.word	0x0800aab0
 800634c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800634e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006350:	429a      	cmp	r2, r3
 8006352:	bfa8      	it	ge
 8006354:	461a      	movge	r2, r3
 8006356:	2a00      	cmp	r2, #0
 8006358:	4691      	mov	r9, r2
 800635a:	dc37      	bgt.n	80063cc <_printf_float+0x374>
 800635c:	f04f 0b00 	mov.w	fp, #0
 8006360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006364:	f104 021a 	add.w	r2, r4, #26
 8006368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800636a:	9305      	str	r3, [sp, #20]
 800636c:	eba3 0309 	sub.w	r3, r3, r9
 8006370:	455b      	cmp	r3, fp
 8006372:	dc33      	bgt.n	80063dc <_printf_float+0x384>
 8006374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006378:	429a      	cmp	r2, r3
 800637a:	db3b      	blt.n	80063f4 <_printf_float+0x39c>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07da      	lsls	r2, r3, #31
 8006380:	d438      	bmi.n	80063f4 <_printf_float+0x39c>
 8006382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006384:	9a05      	ldr	r2, [sp, #20]
 8006386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006388:	1a9a      	subs	r2, r3, r2
 800638a:	eba3 0901 	sub.w	r9, r3, r1
 800638e:	4591      	cmp	r9, r2
 8006390:	bfa8      	it	ge
 8006392:	4691      	movge	r9, r2
 8006394:	f1b9 0f00 	cmp.w	r9, #0
 8006398:	dc35      	bgt.n	8006406 <_printf_float+0x3ae>
 800639a:	f04f 0800 	mov.w	r8, #0
 800639e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063a2:	f104 0a1a 	add.w	sl, r4, #26
 80063a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	eba3 0309 	sub.w	r3, r3, r9
 80063b0:	4543      	cmp	r3, r8
 80063b2:	f77f af79 	ble.w	80062a8 <_printf_float+0x250>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4652      	mov	r2, sl
 80063ba:	4631      	mov	r1, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	47b8      	blx	r7
 80063c0:	3001      	adds	r0, #1
 80063c2:	f43f aeaa 	beq.w	800611a <_printf_float+0xc2>
 80063c6:	f108 0801 	add.w	r8, r8, #1
 80063ca:	e7ec      	b.n	80063a6 <_printf_float+0x34e>
 80063cc:	4613      	mov	r3, r2
 80063ce:	4631      	mov	r1, r6
 80063d0:	4642      	mov	r2, r8
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	d1c0      	bne.n	800635c <_printf_float+0x304>
 80063da:	e69e      	b.n	800611a <_printf_float+0xc2>
 80063dc:	2301      	movs	r3, #1
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	9205      	str	r2, [sp, #20]
 80063e4:	47b8      	blx	r7
 80063e6:	3001      	adds	r0, #1
 80063e8:	f43f ae97 	beq.w	800611a <_printf_float+0xc2>
 80063ec:	9a05      	ldr	r2, [sp, #20]
 80063ee:	f10b 0b01 	add.w	fp, fp, #1
 80063f2:	e7b9      	b.n	8006368 <_printf_float+0x310>
 80063f4:	ee18 3a10 	vmov	r3, s16
 80063f8:	4652      	mov	r2, sl
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b8      	blx	r7
 8006400:	3001      	adds	r0, #1
 8006402:	d1be      	bne.n	8006382 <_printf_float+0x32a>
 8006404:	e689      	b.n	800611a <_printf_float+0xc2>
 8006406:	9a05      	ldr	r2, [sp, #20]
 8006408:	464b      	mov	r3, r9
 800640a:	4442      	add	r2, r8
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	d1c1      	bne.n	800639a <_printf_float+0x342>
 8006416:	e680      	b.n	800611a <_printf_float+0xc2>
 8006418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800641a:	2a01      	cmp	r2, #1
 800641c:	dc01      	bgt.n	8006422 <_printf_float+0x3ca>
 800641e:	07db      	lsls	r3, r3, #31
 8006420:	d538      	bpl.n	8006494 <_printf_float+0x43c>
 8006422:	2301      	movs	r3, #1
 8006424:	4642      	mov	r2, r8
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	f43f ae74 	beq.w	800611a <_printf_float+0xc2>
 8006432:	ee18 3a10 	vmov	r3, s16
 8006436:	4652      	mov	r2, sl
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f ae6b 	beq.w	800611a <_printf_float+0xc2>
 8006444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006448:	2200      	movs	r2, #0
 800644a:	2300      	movs	r3, #0
 800644c:	f7fa fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006450:	b9d8      	cbnz	r0, 800648a <_printf_float+0x432>
 8006452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006454:	f108 0201 	add.w	r2, r8, #1
 8006458:	3b01      	subs	r3, #1
 800645a:	4631      	mov	r1, r6
 800645c:	4628      	mov	r0, r5
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	d10e      	bne.n	8006482 <_printf_float+0x42a>
 8006464:	e659      	b.n	800611a <_printf_float+0xc2>
 8006466:	2301      	movs	r3, #1
 8006468:	4652      	mov	r2, sl
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	f43f ae52 	beq.w	800611a <_printf_float+0xc2>
 8006476:	f108 0801 	add.w	r8, r8, #1
 800647a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800647c:	3b01      	subs	r3, #1
 800647e:	4543      	cmp	r3, r8
 8006480:	dcf1      	bgt.n	8006466 <_printf_float+0x40e>
 8006482:	464b      	mov	r3, r9
 8006484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006488:	e6dc      	b.n	8006244 <_printf_float+0x1ec>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	f104 0a1a 	add.w	sl, r4, #26
 8006492:	e7f2      	b.n	800647a <_printf_float+0x422>
 8006494:	2301      	movs	r3, #1
 8006496:	4642      	mov	r2, r8
 8006498:	e7df      	b.n	800645a <_printf_float+0x402>
 800649a:	2301      	movs	r3, #1
 800649c:	464a      	mov	r2, r9
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b8      	blx	r7
 80064a4:	3001      	adds	r0, #1
 80064a6:	f43f ae38 	beq.w	800611a <_printf_float+0xc2>
 80064aa:	f108 0801 	add.w	r8, r8, #1
 80064ae:	68e3      	ldr	r3, [r4, #12]
 80064b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064b2:	1a5b      	subs	r3, r3, r1
 80064b4:	4543      	cmp	r3, r8
 80064b6:	dcf0      	bgt.n	800649a <_printf_float+0x442>
 80064b8:	e6fa      	b.n	80062b0 <_printf_float+0x258>
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	f104 0919 	add.w	r9, r4, #25
 80064c2:	e7f4      	b.n	80064ae <_printf_float+0x456>

080064c4 <_printf_common>:
 80064c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	4616      	mov	r6, r2
 80064ca:	4699      	mov	r9, r3
 80064cc:	688a      	ldr	r2, [r1, #8]
 80064ce:	690b      	ldr	r3, [r1, #16]
 80064d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064d4:	4293      	cmp	r3, r2
 80064d6:	bfb8      	it	lt
 80064d8:	4613      	movlt	r3, r2
 80064da:	6033      	str	r3, [r6, #0]
 80064dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064e0:	4607      	mov	r7, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	b10a      	cbz	r2, 80064ea <_printf_common+0x26>
 80064e6:	3301      	adds	r3, #1
 80064e8:	6033      	str	r3, [r6, #0]
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	0699      	lsls	r1, r3, #26
 80064ee:	bf42      	ittt	mi
 80064f0:	6833      	ldrmi	r3, [r6, #0]
 80064f2:	3302      	addmi	r3, #2
 80064f4:	6033      	strmi	r3, [r6, #0]
 80064f6:	6825      	ldr	r5, [r4, #0]
 80064f8:	f015 0506 	ands.w	r5, r5, #6
 80064fc:	d106      	bne.n	800650c <_printf_common+0x48>
 80064fe:	f104 0a19 	add.w	sl, r4, #25
 8006502:	68e3      	ldr	r3, [r4, #12]
 8006504:	6832      	ldr	r2, [r6, #0]
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	42ab      	cmp	r3, r5
 800650a:	dc26      	bgt.n	800655a <_printf_common+0x96>
 800650c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006510:	1e13      	subs	r3, r2, #0
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	bf18      	it	ne
 8006516:	2301      	movne	r3, #1
 8006518:	0692      	lsls	r2, r2, #26
 800651a:	d42b      	bmi.n	8006574 <_printf_common+0xb0>
 800651c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006520:	4649      	mov	r1, r9
 8006522:	4638      	mov	r0, r7
 8006524:	47c0      	blx	r8
 8006526:	3001      	adds	r0, #1
 8006528:	d01e      	beq.n	8006568 <_printf_common+0xa4>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	68e5      	ldr	r5, [r4, #12]
 800652e:	6832      	ldr	r2, [r6, #0]
 8006530:	f003 0306 	and.w	r3, r3, #6
 8006534:	2b04      	cmp	r3, #4
 8006536:	bf08      	it	eq
 8006538:	1aad      	subeq	r5, r5, r2
 800653a:	68a3      	ldr	r3, [r4, #8]
 800653c:	6922      	ldr	r2, [r4, #16]
 800653e:	bf0c      	ite	eq
 8006540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006544:	2500      	movne	r5, #0
 8006546:	4293      	cmp	r3, r2
 8006548:	bfc4      	itt	gt
 800654a:	1a9b      	subgt	r3, r3, r2
 800654c:	18ed      	addgt	r5, r5, r3
 800654e:	2600      	movs	r6, #0
 8006550:	341a      	adds	r4, #26
 8006552:	42b5      	cmp	r5, r6
 8006554:	d11a      	bne.n	800658c <_printf_common+0xc8>
 8006556:	2000      	movs	r0, #0
 8006558:	e008      	b.n	800656c <_printf_common+0xa8>
 800655a:	2301      	movs	r3, #1
 800655c:	4652      	mov	r2, sl
 800655e:	4649      	mov	r1, r9
 8006560:	4638      	mov	r0, r7
 8006562:	47c0      	blx	r8
 8006564:	3001      	adds	r0, #1
 8006566:	d103      	bne.n	8006570 <_printf_common+0xac>
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006570:	3501      	adds	r5, #1
 8006572:	e7c6      	b.n	8006502 <_printf_common+0x3e>
 8006574:	18e1      	adds	r1, r4, r3
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	2030      	movs	r0, #48	; 0x30
 800657a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800657e:	4422      	add	r2, r4
 8006580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006588:	3302      	adds	r3, #2
 800658a:	e7c7      	b.n	800651c <_printf_common+0x58>
 800658c:	2301      	movs	r3, #1
 800658e:	4622      	mov	r2, r4
 8006590:	4649      	mov	r1, r9
 8006592:	4638      	mov	r0, r7
 8006594:	47c0      	blx	r8
 8006596:	3001      	adds	r0, #1
 8006598:	d0e6      	beq.n	8006568 <_printf_common+0xa4>
 800659a:	3601      	adds	r6, #1
 800659c:	e7d9      	b.n	8006552 <_printf_common+0x8e>
	...

080065a0 <_printf_i>:
 80065a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	7e0f      	ldrb	r7, [r1, #24]
 80065a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065a8:	2f78      	cmp	r7, #120	; 0x78
 80065aa:	4691      	mov	r9, r2
 80065ac:	4680      	mov	r8, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	469a      	mov	sl, r3
 80065b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065b6:	d807      	bhi.n	80065c8 <_printf_i+0x28>
 80065b8:	2f62      	cmp	r7, #98	; 0x62
 80065ba:	d80a      	bhi.n	80065d2 <_printf_i+0x32>
 80065bc:	2f00      	cmp	r7, #0
 80065be:	f000 80d8 	beq.w	8006772 <_printf_i+0x1d2>
 80065c2:	2f58      	cmp	r7, #88	; 0x58
 80065c4:	f000 80a3 	beq.w	800670e <_printf_i+0x16e>
 80065c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065d0:	e03a      	b.n	8006648 <_printf_i+0xa8>
 80065d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065d6:	2b15      	cmp	r3, #21
 80065d8:	d8f6      	bhi.n	80065c8 <_printf_i+0x28>
 80065da:	a101      	add	r1, pc, #4	; (adr r1, 80065e0 <_printf_i+0x40>)
 80065dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065e0:	08006639 	.word	0x08006639
 80065e4:	0800664d 	.word	0x0800664d
 80065e8:	080065c9 	.word	0x080065c9
 80065ec:	080065c9 	.word	0x080065c9
 80065f0:	080065c9 	.word	0x080065c9
 80065f4:	080065c9 	.word	0x080065c9
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	080065c9 	.word	0x080065c9
 8006600:	080065c9 	.word	0x080065c9
 8006604:	080065c9 	.word	0x080065c9
 8006608:	080065c9 	.word	0x080065c9
 800660c:	08006759 	.word	0x08006759
 8006610:	0800667d 	.word	0x0800667d
 8006614:	0800673b 	.word	0x0800673b
 8006618:	080065c9 	.word	0x080065c9
 800661c:	080065c9 	.word	0x080065c9
 8006620:	0800677b 	.word	0x0800677b
 8006624:	080065c9 	.word	0x080065c9
 8006628:	0800667d 	.word	0x0800667d
 800662c:	080065c9 	.word	0x080065c9
 8006630:	080065c9 	.word	0x080065c9
 8006634:	08006743 	.word	0x08006743
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	1d1a      	adds	r2, r3, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	602a      	str	r2, [r5, #0]
 8006640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006648:	2301      	movs	r3, #1
 800664a:	e0a3      	b.n	8006794 <_printf_i+0x1f4>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	6829      	ldr	r1, [r5, #0]
 8006650:	0606      	lsls	r6, r0, #24
 8006652:	f101 0304 	add.w	r3, r1, #4
 8006656:	d50a      	bpl.n	800666e <_printf_i+0xce>
 8006658:	680e      	ldr	r6, [r1, #0]
 800665a:	602b      	str	r3, [r5, #0]
 800665c:	2e00      	cmp	r6, #0
 800665e:	da03      	bge.n	8006668 <_printf_i+0xc8>
 8006660:	232d      	movs	r3, #45	; 0x2d
 8006662:	4276      	negs	r6, r6
 8006664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006668:	485e      	ldr	r0, [pc, #376]	; (80067e4 <_printf_i+0x244>)
 800666a:	230a      	movs	r3, #10
 800666c:	e019      	b.n	80066a2 <_printf_i+0x102>
 800666e:	680e      	ldr	r6, [r1, #0]
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006676:	bf18      	it	ne
 8006678:	b236      	sxthne	r6, r6
 800667a:	e7ef      	b.n	800665c <_printf_i+0xbc>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	6820      	ldr	r0, [r4, #0]
 8006680:	1d19      	adds	r1, r3, #4
 8006682:	6029      	str	r1, [r5, #0]
 8006684:	0601      	lsls	r1, r0, #24
 8006686:	d501      	bpl.n	800668c <_printf_i+0xec>
 8006688:	681e      	ldr	r6, [r3, #0]
 800668a:	e002      	b.n	8006692 <_printf_i+0xf2>
 800668c:	0646      	lsls	r6, r0, #25
 800668e:	d5fb      	bpl.n	8006688 <_printf_i+0xe8>
 8006690:	881e      	ldrh	r6, [r3, #0]
 8006692:	4854      	ldr	r0, [pc, #336]	; (80067e4 <_printf_i+0x244>)
 8006694:	2f6f      	cmp	r7, #111	; 0x6f
 8006696:	bf0c      	ite	eq
 8006698:	2308      	moveq	r3, #8
 800669a:	230a      	movne	r3, #10
 800669c:	2100      	movs	r1, #0
 800669e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066a2:	6865      	ldr	r5, [r4, #4]
 80066a4:	60a5      	str	r5, [r4, #8]
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	bfa2      	ittt	ge
 80066aa:	6821      	ldrge	r1, [r4, #0]
 80066ac:	f021 0104 	bicge.w	r1, r1, #4
 80066b0:	6021      	strge	r1, [r4, #0]
 80066b2:	b90e      	cbnz	r6, 80066b8 <_printf_i+0x118>
 80066b4:	2d00      	cmp	r5, #0
 80066b6:	d04d      	beq.n	8006754 <_printf_i+0x1b4>
 80066b8:	4615      	mov	r5, r2
 80066ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80066be:	fb03 6711 	mls	r7, r3, r1, r6
 80066c2:	5dc7      	ldrb	r7, [r0, r7]
 80066c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066c8:	4637      	mov	r7, r6
 80066ca:	42bb      	cmp	r3, r7
 80066cc:	460e      	mov	r6, r1
 80066ce:	d9f4      	bls.n	80066ba <_printf_i+0x11a>
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d10b      	bne.n	80066ec <_printf_i+0x14c>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	07de      	lsls	r6, r3, #31
 80066d8:	d508      	bpl.n	80066ec <_printf_i+0x14c>
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	6861      	ldr	r1, [r4, #4]
 80066de:	4299      	cmp	r1, r3
 80066e0:	bfde      	ittt	le
 80066e2:	2330      	movle	r3, #48	; 0x30
 80066e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066ec:	1b52      	subs	r2, r2, r5
 80066ee:	6122      	str	r2, [r4, #16]
 80066f0:	f8cd a000 	str.w	sl, [sp]
 80066f4:	464b      	mov	r3, r9
 80066f6:	aa03      	add	r2, sp, #12
 80066f8:	4621      	mov	r1, r4
 80066fa:	4640      	mov	r0, r8
 80066fc:	f7ff fee2 	bl	80064c4 <_printf_common>
 8006700:	3001      	adds	r0, #1
 8006702:	d14c      	bne.n	800679e <_printf_i+0x1fe>
 8006704:	f04f 30ff 	mov.w	r0, #4294967295
 8006708:	b004      	add	sp, #16
 800670a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670e:	4835      	ldr	r0, [pc, #212]	; (80067e4 <_printf_i+0x244>)
 8006710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006714:	6829      	ldr	r1, [r5, #0]
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f851 6b04 	ldr.w	r6, [r1], #4
 800671c:	6029      	str	r1, [r5, #0]
 800671e:	061d      	lsls	r5, r3, #24
 8006720:	d514      	bpl.n	800674c <_printf_i+0x1ac>
 8006722:	07df      	lsls	r7, r3, #31
 8006724:	bf44      	itt	mi
 8006726:	f043 0320 	orrmi.w	r3, r3, #32
 800672a:	6023      	strmi	r3, [r4, #0]
 800672c:	b91e      	cbnz	r6, 8006736 <_printf_i+0x196>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	f023 0320 	bic.w	r3, r3, #32
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	2310      	movs	r3, #16
 8006738:	e7b0      	b.n	800669c <_printf_i+0xfc>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	f043 0320 	orr.w	r3, r3, #32
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	2378      	movs	r3, #120	; 0x78
 8006744:	4828      	ldr	r0, [pc, #160]	; (80067e8 <_printf_i+0x248>)
 8006746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800674a:	e7e3      	b.n	8006714 <_printf_i+0x174>
 800674c:	0659      	lsls	r1, r3, #25
 800674e:	bf48      	it	mi
 8006750:	b2b6      	uxthmi	r6, r6
 8006752:	e7e6      	b.n	8006722 <_printf_i+0x182>
 8006754:	4615      	mov	r5, r2
 8006756:	e7bb      	b.n	80066d0 <_printf_i+0x130>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	6826      	ldr	r6, [r4, #0]
 800675c:	6961      	ldr	r1, [r4, #20]
 800675e:	1d18      	adds	r0, r3, #4
 8006760:	6028      	str	r0, [r5, #0]
 8006762:	0635      	lsls	r5, r6, #24
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	d501      	bpl.n	800676c <_printf_i+0x1cc>
 8006768:	6019      	str	r1, [r3, #0]
 800676a:	e002      	b.n	8006772 <_printf_i+0x1d2>
 800676c:	0670      	lsls	r0, r6, #25
 800676e:	d5fb      	bpl.n	8006768 <_printf_i+0x1c8>
 8006770:	8019      	strh	r1, [r3, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	4615      	mov	r5, r2
 8006778:	e7ba      	b.n	80066f0 <_printf_i+0x150>
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	1d1a      	adds	r2, r3, #4
 800677e:	602a      	str	r2, [r5, #0]
 8006780:	681d      	ldr	r5, [r3, #0]
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	2100      	movs	r1, #0
 8006786:	4628      	mov	r0, r5
 8006788:	f7f9 fd2a 	bl	80001e0 <memchr>
 800678c:	b108      	cbz	r0, 8006792 <_printf_i+0x1f2>
 800678e:	1b40      	subs	r0, r0, r5
 8006790:	6060      	str	r0, [r4, #4]
 8006792:	6863      	ldr	r3, [r4, #4]
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	2300      	movs	r3, #0
 8006798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679c:	e7a8      	b.n	80066f0 <_printf_i+0x150>
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	462a      	mov	r2, r5
 80067a2:	4649      	mov	r1, r9
 80067a4:	4640      	mov	r0, r8
 80067a6:	47d0      	blx	sl
 80067a8:	3001      	adds	r0, #1
 80067aa:	d0ab      	beq.n	8006704 <_printf_i+0x164>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	079b      	lsls	r3, r3, #30
 80067b0:	d413      	bmi.n	80067da <_printf_i+0x23a>
 80067b2:	68e0      	ldr	r0, [r4, #12]
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	4298      	cmp	r0, r3
 80067b8:	bfb8      	it	lt
 80067ba:	4618      	movlt	r0, r3
 80067bc:	e7a4      	b.n	8006708 <_printf_i+0x168>
 80067be:	2301      	movs	r3, #1
 80067c0:	4632      	mov	r2, r6
 80067c2:	4649      	mov	r1, r9
 80067c4:	4640      	mov	r0, r8
 80067c6:	47d0      	blx	sl
 80067c8:	3001      	adds	r0, #1
 80067ca:	d09b      	beq.n	8006704 <_printf_i+0x164>
 80067cc:	3501      	adds	r5, #1
 80067ce:	68e3      	ldr	r3, [r4, #12]
 80067d0:	9903      	ldr	r1, [sp, #12]
 80067d2:	1a5b      	subs	r3, r3, r1
 80067d4:	42ab      	cmp	r3, r5
 80067d6:	dcf2      	bgt.n	80067be <_printf_i+0x21e>
 80067d8:	e7eb      	b.n	80067b2 <_printf_i+0x212>
 80067da:	2500      	movs	r5, #0
 80067dc:	f104 0619 	add.w	r6, r4, #25
 80067e0:	e7f5      	b.n	80067ce <_printf_i+0x22e>
 80067e2:	bf00      	nop
 80067e4:	0800aab2 	.word	0x0800aab2
 80067e8:	0800aac3 	.word	0x0800aac3

080067ec <_scanf_float>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	b087      	sub	sp, #28
 80067f2:	4617      	mov	r7, r2
 80067f4:	9303      	str	r3, [sp, #12]
 80067f6:	688b      	ldr	r3, [r1, #8]
 80067f8:	1e5a      	subs	r2, r3, #1
 80067fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80067fe:	bf83      	ittte	hi
 8006800:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006804:	195b      	addhi	r3, r3, r5
 8006806:	9302      	strhi	r3, [sp, #8]
 8006808:	2300      	movls	r3, #0
 800680a:	bf86      	itte	hi
 800680c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006810:	608b      	strhi	r3, [r1, #8]
 8006812:	9302      	strls	r3, [sp, #8]
 8006814:	680b      	ldr	r3, [r1, #0]
 8006816:	468b      	mov	fp, r1
 8006818:	2500      	movs	r5, #0
 800681a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800681e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006826:	4680      	mov	r8, r0
 8006828:	460c      	mov	r4, r1
 800682a:	465e      	mov	r6, fp
 800682c:	46aa      	mov	sl, r5
 800682e:	46a9      	mov	r9, r5
 8006830:	9501      	str	r5, [sp, #4]
 8006832:	68a2      	ldr	r2, [r4, #8]
 8006834:	b152      	cbz	r2, 800684c <_scanf_float+0x60>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b4e      	cmp	r3, #78	; 0x4e
 800683c:	d864      	bhi.n	8006908 <_scanf_float+0x11c>
 800683e:	2b40      	cmp	r3, #64	; 0x40
 8006840:	d83c      	bhi.n	80068bc <_scanf_float+0xd0>
 8006842:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006846:	b2c8      	uxtb	r0, r1
 8006848:	280e      	cmp	r0, #14
 800684a:	d93a      	bls.n	80068c2 <_scanf_float+0xd6>
 800684c:	f1b9 0f00 	cmp.w	r9, #0
 8006850:	d003      	beq.n	800685a <_scanf_float+0x6e>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800685e:	f1ba 0f01 	cmp.w	sl, #1
 8006862:	f200 8113 	bhi.w	8006a8c <_scanf_float+0x2a0>
 8006866:	455e      	cmp	r6, fp
 8006868:	f200 8105 	bhi.w	8006a76 <_scanf_float+0x28a>
 800686c:	2501      	movs	r5, #1
 800686e:	4628      	mov	r0, r5
 8006870:	b007      	add	sp, #28
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800687a:	2a0d      	cmp	r2, #13
 800687c:	d8e6      	bhi.n	800684c <_scanf_float+0x60>
 800687e:	a101      	add	r1, pc, #4	; (adr r1, 8006884 <_scanf_float+0x98>)
 8006880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006884:	080069c3 	.word	0x080069c3
 8006888:	0800684d 	.word	0x0800684d
 800688c:	0800684d 	.word	0x0800684d
 8006890:	0800684d 	.word	0x0800684d
 8006894:	08006a23 	.word	0x08006a23
 8006898:	080069fb 	.word	0x080069fb
 800689c:	0800684d 	.word	0x0800684d
 80068a0:	0800684d 	.word	0x0800684d
 80068a4:	080069d1 	.word	0x080069d1
 80068a8:	0800684d 	.word	0x0800684d
 80068ac:	0800684d 	.word	0x0800684d
 80068b0:	0800684d 	.word	0x0800684d
 80068b4:	0800684d 	.word	0x0800684d
 80068b8:	08006989 	.word	0x08006989
 80068bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80068c0:	e7db      	b.n	800687a <_scanf_float+0x8e>
 80068c2:	290e      	cmp	r1, #14
 80068c4:	d8c2      	bhi.n	800684c <_scanf_float+0x60>
 80068c6:	a001      	add	r0, pc, #4	; (adr r0, 80068cc <_scanf_float+0xe0>)
 80068c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80068cc:	0800697b 	.word	0x0800697b
 80068d0:	0800684d 	.word	0x0800684d
 80068d4:	0800697b 	.word	0x0800697b
 80068d8:	08006a0f 	.word	0x08006a0f
 80068dc:	0800684d 	.word	0x0800684d
 80068e0:	08006929 	.word	0x08006929
 80068e4:	08006965 	.word	0x08006965
 80068e8:	08006965 	.word	0x08006965
 80068ec:	08006965 	.word	0x08006965
 80068f0:	08006965 	.word	0x08006965
 80068f4:	08006965 	.word	0x08006965
 80068f8:	08006965 	.word	0x08006965
 80068fc:	08006965 	.word	0x08006965
 8006900:	08006965 	.word	0x08006965
 8006904:	08006965 	.word	0x08006965
 8006908:	2b6e      	cmp	r3, #110	; 0x6e
 800690a:	d809      	bhi.n	8006920 <_scanf_float+0x134>
 800690c:	2b60      	cmp	r3, #96	; 0x60
 800690e:	d8b2      	bhi.n	8006876 <_scanf_float+0x8a>
 8006910:	2b54      	cmp	r3, #84	; 0x54
 8006912:	d077      	beq.n	8006a04 <_scanf_float+0x218>
 8006914:	2b59      	cmp	r3, #89	; 0x59
 8006916:	d199      	bne.n	800684c <_scanf_float+0x60>
 8006918:	2d07      	cmp	r5, #7
 800691a:	d197      	bne.n	800684c <_scanf_float+0x60>
 800691c:	2508      	movs	r5, #8
 800691e:	e029      	b.n	8006974 <_scanf_float+0x188>
 8006920:	2b74      	cmp	r3, #116	; 0x74
 8006922:	d06f      	beq.n	8006a04 <_scanf_float+0x218>
 8006924:	2b79      	cmp	r3, #121	; 0x79
 8006926:	e7f6      	b.n	8006916 <_scanf_float+0x12a>
 8006928:	6821      	ldr	r1, [r4, #0]
 800692a:	05c8      	lsls	r0, r1, #23
 800692c:	d51a      	bpl.n	8006964 <_scanf_float+0x178>
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006934:	6021      	str	r1, [r4, #0]
 8006936:	f109 0901 	add.w	r9, r9, #1
 800693a:	b11b      	cbz	r3, 8006944 <_scanf_float+0x158>
 800693c:	3b01      	subs	r3, #1
 800693e:	3201      	adds	r2, #1
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	60a2      	str	r2, [r4, #8]
 8006944:	68a3      	ldr	r3, [r4, #8]
 8006946:	3b01      	subs	r3, #1
 8006948:	60a3      	str	r3, [r4, #8]
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	3301      	adds	r3, #1
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	f340 8084 	ble.w	8006a64 <_scanf_float+0x278>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	e766      	b.n	8006832 <_scanf_float+0x46>
 8006964:	eb1a 0f05 	cmn.w	sl, r5
 8006968:	f47f af70 	bne.w	800684c <_scanf_float+0x60>
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	f806 3b01 	strb.w	r3, [r6], #1
 8006978:	e7e4      	b.n	8006944 <_scanf_float+0x158>
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	0610      	lsls	r0, r2, #24
 800697e:	f57f af65 	bpl.w	800684c <_scanf_float+0x60>
 8006982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006986:	e7f4      	b.n	8006972 <_scanf_float+0x186>
 8006988:	f1ba 0f00 	cmp.w	sl, #0
 800698c:	d10e      	bne.n	80069ac <_scanf_float+0x1c0>
 800698e:	f1b9 0f00 	cmp.w	r9, #0
 8006992:	d10e      	bne.n	80069b2 <_scanf_float+0x1c6>
 8006994:	6822      	ldr	r2, [r4, #0]
 8006996:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800699a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800699e:	d108      	bne.n	80069b2 <_scanf_float+0x1c6>
 80069a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069a4:	6022      	str	r2, [r4, #0]
 80069a6:	f04f 0a01 	mov.w	sl, #1
 80069aa:	e7e3      	b.n	8006974 <_scanf_float+0x188>
 80069ac:	f1ba 0f02 	cmp.w	sl, #2
 80069b0:	d055      	beq.n	8006a5e <_scanf_float+0x272>
 80069b2:	2d01      	cmp	r5, #1
 80069b4:	d002      	beq.n	80069bc <_scanf_float+0x1d0>
 80069b6:	2d04      	cmp	r5, #4
 80069b8:	f47f af48 	bne.w	800684c <_scanf_float+0x60>
 80069bc:	3501      	adds	r5, #1
 80069be:	b2ed      	uxtb	r5, r5
 80069c0:	e7d8      	b.n	8006974 <_scanf_float+0x188>
 80069c2:	f1ba 0f01 	cmp.w	sl, #1
 80069c6:	f47f af41 	bne.w	800684c <_scanf_float+0x60>
 80069ca:	f04f 0a02 	mov.w	sl, #2
 80069ce:	e7d1      	b.n	8006974 <_scanf_float+0x188>
 80069d0:	b97d      	cbnz	r5, 80069f2 <_scanf_float+0x206>
 80069d2:	f1b9 0f00 	cmp.w	r9, #0
 80069d6:	f47f af3c 	bne.w	8006852 <_scanf_float+0x66>
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069e4:	f47f af39 	bne.w	800685a <_scanf_float+0x6e>
 80069e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069ec:	6022      	str	r2, [r4, #0]
 80069ee:	2501      	movs	r5, #1
 80069f0:	e7c0      	b.n	8006974 <_scanf_float+0x188>
 80069f2:	2d03      	cmp	r5, #3
 80069f4:	d0e2      	beq.n	80069bc <_scanf_float+0x1d0>
 80069f6:	2d05      	cmp	r5, #5
 80069f8:	e7de      	b.n	80069b8 <_scanf_float+0x1cc>
 80069fa:	2d02      	cmp	r5, #2
 80069fc:	f47f af26 	bne.w	800684c <_scanf_float+0x60>
 8006a00:	2503      	movs	r5, #3
 8006a02:	e7b7      	b.n	8006974 <_scanf_float+0x188>
 8006a04:	2d06      	cmp	r5, #6
 8006a06:	f47f af21 	bne.w	800684c <_scanf_float+0x60>
 8006a0a:	2507      	movs	r5, #7
 8006a0c:	e7b2      	b.n	8006974 <_scanf_float+0x188>
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	0591      	lsls	r1, r2, #22
 8006a12:	f57f af1b 	bpl.w	800684c <_scanf_float+0x60>
 8006a16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a20:	e7a8      	b.n	8006974 <_scanf_float+0x188>
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a2c:	d006      	beq.n	8006a3c <_scanf_float+0x250>
 8006a2e:	0550      	lsls	r0, r2, #21
 8006a30:	f57f af0c 	bpl.w	800684c <_scanf_float+0x60>
 8006a34:	f1b9 0f00 	cmp.w	r9, #0
 8006a38:	f43f af0f 	beq.w	800685a <_scanf_float+0x6e>
 8006a3c:	0591      	lsls	r1, r2, #22
 8006a3e:	bf58      	it	pl
 8006a40:	9901      	ldrpl	r1, [sp, #4]
 8006a42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a46:	bf58      	it	pl
 8006a48:	eba9 0101 	subpl.w	r1, r9, r1
 8006a4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a50:	bf58      	it	pl
 8006a52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a56:	6022      	str	r2, [r4, #0]
 8006a58:	f04f 0900 	mov.w	r9, #0
 8006a5c:	e78a      	b.n	8006974 <_scanf_float+0x188>
 8006a5e:	f04f 0a03 	mov.w	sl, #3
 8006a62:	e787      	b.n	8006974 <_scanf_float+0x188>
 8006a64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a68:	4639      	mov	r1, r7
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4798      	blx	r3
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f43f aedf 	beq.w	8006832 <_scanf_float+0x46>
 8006a74:	e6ea      	b.n	800684c <_scanf_float+0x60>
 8006a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a7e:	463a      	mov	r2, r7
 8006a80:	4640      	mov	r0, r8
 8006a82:	4798      	blx	r3
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	e6ec      	b.n	8006866 <_scanf_float+0x7a>
 8006a8c:	1e6b      	subs	r3, r5, #1
 8006a8e:	2b06      	cmp	r3, #6
 8006a90:	d825      	bhi.n	8006ade <_scanf_float+0x2f2>
 8006a92:	2d02      	cmp	r5, #2
 8006a94:	d836      	bhi.n	8006b04 <_scanf_float+0x318>
 8006a96:	455e      	cmp	r6, fp
 8006a98:	f67f aee8 	bls.w	800686c <_scanf_float+0x80>
 8006a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aa4:	463a      	mov	r2, r7
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	4798      	blx	r3
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	e7f1      	b.n	8006a96 <_scanf_float+0x2aa>
 8006ab2:	9802      	ldr	r0, [sp, #8]
 8006ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ab8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006abc:	9002      	str	r0, [sp, #8]
 8006abe:	463a      	mov	r2, r7
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	4798      	blx	r3
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ace:	fa5f fa8a 	uxtb.w	sl, sl
 8006ad2:	f1ba 0f02 	cmp.w	sl, #2
 8006ad6:	d1ec      	bne.n	8006ab2 <_scanf_float+0x2c6>
 8006ad8:	3d03      	subs	r5, #3
 8006ada:	b2ed      	uxtb	r5, r5
 8006adc:	1b76      	subs	r6, r6, r5
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	05da      	lsls	r2, r3, #23
 8006ae2:	d52f      	bpl.n	8006b44 <_scanf_float+0x358>
 8006ae4:	055b      	lsls	r3, r3, #21
 8006ae6:	d510      	bpl.n	8006b0a <_scanf_float+0x31e>
 8006ae8:	455e      	cmp	r6, fp
 8006aea:	f67f aebf 	bls.w	800686c <_scanf_float+0x80>
 8006aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006af2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006af6:	463a      	mov	r2, r7
 8006af8:	4640      	mov	r0, r8
 8006afa:	4798      	blx	r3
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	e7f1      	b.n	8006ae8 <_scanf_float+0x2fc>
 8006b04:	46aa      	mov	sl, r5
 8006b06:	9602      	str	r6, [sp, #8]
 8006b08:	e7df      	b.n	8006aca <_scanf_float+0x2de>
 8006b0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	2965      	cmp	r1, #101	; 0x65
 8006b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b16:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	d00c      	beq.n	8006b38 <_scanf_float+0x34c>
 8006b1e:	2945      	cmp	r1, #69	; 0x45
 8006b20:	d00a      	beq.n	8006b38 <_scanf_float+0x34c>
 8006b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b26:	463a      	mov	r2, r7
 8006b28:	4640      	mov	r0, r8
 8006b2a:	4798      	blx	r3
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	1eb5      	subs	r5, r6, #2
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b3c:	463a      	mov	r2, r7
 8006b3e:	4640      	mov	r0, r8
 8006b40:	4798      	blx	r3
 8006b42:	462e      	mov	r6, r5
 8006b44:	6825      	ldr	r5, [r4, #0]
 8006b46:	f015 0510 	ands.w	r5, r5, #16
 8006b4a:	d159      	bne.n	8006c00 <_scanf_float+0x414>
 8006b4c:	7035      	strb	r5, [r6, #0]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d11b      	bne.n	8006b92 <_scanf_float+0x3a6>
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	454b      	cmp	r3, r9
 8006b5e:	eba3 0209 	sub.w	r2, r3, r9
 8006b62:	d123      	bne.n	8006bac <_scanf_float+0x3c0>
 8006b64:	2200      	movs	r2, #0
 8006b66:	4659      	mov	r1, fp
 8006b68:	4640      	mov	r0, r8
 8006b6a:	f000 fec3 	bl	80078f4 <_strtod_r>
 8006b6e:	6822      	ldr	r2, [r4, #0]
 8006b70:	9b03      	ldr	r3, [sp, #12]
 8006b72:	f012 0f02 	tst.w	r2, #2
 8006b76:	ec57 6b10 	vmov	r6, r7, d0
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	d021      	beq.n	8006bc2 <_scanf_float+0x3d6>
 8006b7e:	9903      	ldr	r1, [sp, #12]
 8006b80:	1d1a      	adds	r2, r3, #4
 8006b82:	600a      	str	r2, [r1, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	e9c3 6700 	strd	r6, r7, [r3]
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60e3      	str	r3, [r4, #12]
 8006b90:	e66d      	b.n	800686e <_scanf_float+0x82>
 8006b92:	9b04      	ldr	r3, [sp, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0e5      	beq.n	8006b64 <_scanf_float+0x378>
 8006b98:	9905      	ldr	r1, [sp, #20]
 8006b9a:	230a      	movs	r3, #10
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	3101      	adds	r1, #1
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	f000 ff3b 	bl	8007a1c <_strtol_r>
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	9e05      	ldr	r6, [sp, #20]
 8006baa:	1ac2      	subs	r2, r0, r3
 8006bac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006bb0:	429e      	cmp	r6, r3
 8006bb2:	bf28      	it	cs
 8006bb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006bb8:	4912      	ldr	r1, [pc, #72]	; (8006c04 <_scanf_float+0x418>)
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f000 f82c 	bl	8006c18 <siprintf>
 8006bc0:	e7d0      	b.n	8006b64 <_scanf_float+0x378>
 8006bc2:	9903      	ldr	r1, [sp, #12]
 8006bc4:	f012 0f04 	tst.w	r2, #4
 8006bc8:	f103 0204 	add.w	r2, r3, #4
 8006bcc:	600a      	str	r2, [r1, #0]
 8006bce:	d1d9      	bne.n	8006b84 <_scanf_float+0x398>
 8006bd0:	f8d3 8000 	ldr.w	r8, [r3]
 8006bd4:	ee10 2a10 	vmov	r2, s0
 8006bd8:	ee10 0a10 	vmov	r0, s0
 8006bdc:	463b      	mov	r3, r7
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 ffa4 	bl	8000b2c <__aeabi_dcmpun>
 8006be4:	b128      	cbz	r0, 8006bf2 <_scanf_float+0x406>
 8006be6:	4808      	ldr	r0, [pc, #32]	; (8006c08 <_scanf_float+0x41c>)
 8006be8:	f000 f810 	bl	8006c0c <nanf>
 8006bec:	ed88 0a00 	vstr	s0, [r8]
 8006bf0:	e7cb      	b.n	8006b8a <_scanf_float+0x39e>
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	f7f9 fff7 	bl	8000be8 <__aeabi_d2f>
 8006bfa:	f8c8 0000 	str.w	r0, [r8]
 8006bfe:	e7c4      	b.n	8006b8a <_scanf_float+0x39e>
 8006c00:	2500      	movs	r5, #0
 8006c02:	e634      	b.n	800686e <_scanf_float+0x82>
 8006c04:	0800aad4 	.word	0x0800aad4
 8006c08:	0800ade0 	.word	0x0800ade0

08006c0c <nanf>:
 8006c0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c14 <nanf+0x8>
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	7fc00000 	.word	0x7fc00000

08006c18 <siprintf>:
 8006c18:	b40e      	push	{r1, r2, r3}
 8006c1a:	b500      	push	{lr}
 8006c1c:	b09c      	sub	sp, #112	; 0x70
 8006c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c20:	9002      	str	r0, [sp, #8]
 8006c22:	9006      	str	r0, [sp, #24]
 8006c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c28:	4809      	ldr	r0, [pc, #36]	; (8006c50 <siprintf+0x38>)
 8006c2a:	9107      	str	r1, [sp, #28]
 8006c2c:	9104      	str	r1, [sp, #16]
 8006c2e:	4909      	ldr	r1, [pc, #36]	; (8006c54 <siprintf+0x3c>)
 8006c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c34:	9105      	str	r1, [sp, #20]
 8006c36:	6800      	ldr	r0, [r0, #0]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	a902      	add	r1, sp, #8
 8006c3c:	f002 ff1a 	bl	8009a74 <_svfiprintf_r>
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	b01c      	add	sp, #112	; 0x70
 8006c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c4c:	b003      	add	sp, #12
 8006c4e:	4770      	bx	lr
 8006c50:	20000024 	.word	0x20000024
 8006c54:	ffff0208 	.word	0xffff0208

08006c58 <strncat>:
 8006c58:	b530      	push	{r4, r5, lr}
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	7825      	ldrb	r5, [r4, #0]
 8006c5e:	4623      	mov	r3, r4
 8006c60:	3401      	adds	r4, #1
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	d1fa      	bne.n	8006c5c <strncat+0x4>
 8006c66:	3a01      	subs	r2, #1
 8006c68:	d304      	bcc.n	8006c74 <strncat+0x1c>
 8006c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6e:	f803 4b01 	strb.w	r4, [r3], #1
 8006c72:	b904      	cbnz	r4, 8006c76 <strncat+0x1e>
 8006c74:	bd30      	pop	{r4, r5, pc}
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	d1f5      	bne.n	8006c66 <strncat+0xe>
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	e7f3      	b.n	8006c66 <strncat+0xe>

08006c7e <strstr>:
 8006c7e:	780a      	ldrb	r2, [r1, #0]
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	b96a      	cbnz	r2, 8006ca0 <strstr+0x22>
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d109      	bne.n	8006c9e <strstr+0x20>
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	4605      	mov	r5, r0
 8006c8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f6      	beq.n	8006c84 <strstr+0x6>
 8006c96:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006c9a:	429e      	cmp	r6, r3
 8006c9c:	d0f7      	beq.n	8006c8e <strstr+0x10>
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	7803      	ldrb	r3, [r0, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1ef      	bne.n	8006c86 <strstr+0x8>
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	e7ec      	b.n	8006c84 <strstr+0x6>

08006caa <sulp>:
 8006caa:	b570      	push	{r4, r5, r6, lr}
 8006cac:	4604      	mov	r4, r0
 8006cae:	460d      	mov	r5, r1
 8006cb0:	ec45 4b10 	vmov	d0, r4, r5
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	f002 fc3b 	bl	8009530 <__ulp>
 8006cba:	ec51 0b10 	vmov	r0, r1, d0
 8006cbe:	b17e      	cbz	r6, 8006ce0 <sulp+0x36>
 8006cc0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dd09      	ble.n	8006ce0 <sulp+0x36>
 8006ccc:	051b      	lsls	r3, r3, #20
 8006cce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cd2:	2400      	movs	r4, #0
 8006cd4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cd8:	4622      	mov	r2, r4
 8006cda:	462b      	mov	r3, r5
 8006cdc:	f7f9 fc8c 	bl	80005f8 <__aeabi_dmul>
 8006ce0:	bd70      	pop	{r4, r5, r6, pc}
 8006ce2:	0000      	movs	r0, r0
 8006ce4:	0000      	movs	r0, r0
	...

08006ce8 <_strtod_l>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	ed2d 8b02 	vpush	{d8}
 8006cf0:	b09d      	sub	sp, #116	; 0x74
 8006cf2:	461f      	mov	r7, r3
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9318      	str	r3, [sp, #96]	; 0x60
 8006cf8:	4ba2      	ldr	r3, [pc, #648]	; (8006f84 <_strtod_l+0x29c>)
 8006cfa:	9213      	str	r2, [sp, #76]	; 0x4c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	9305      	str	r3, [sp, #20]
 8006d00:	4604      	mov	r4, r0
 8006d02:	4618      	mov	r0, r3
 8006d04:	4688      	mov	r8, r1
 8006d06:	f7f9 fa63 	bl	80001d0 <strlen>
 8006d0a:	f04f 0a00 	mov.w	sl, #0
 8006d0e:	4605      	mov	r5, r0
 8006d10:	f04f 0b00 	mov.w	fp, #0
 8006d14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d1a:	781a      	ldrb	r2, [r3, #0]
 8006d1c:	2a2b      	cmp	r2, #43	; 0x2b
 8006d1e:	d04e      	beq.n	8006dbe <_strtod_l+0xd6>
 8006d20:	d83b      	bhi.n	8006d9a <_strtod_l+0xb2>
 8006d22:	2a0d      	cmp	r2, #13
 8006d24:	d834      	bhi.n	8006d90 <_strtod_l+0xa8>
 8006d26:	2a08      	cmp	r2, #8
 8006d28:	d834      	bhi.n	8006d94 <_strtod_l+0xac>
 8006d2a:	2a00      	cmp	r2, #0
 8006d2c:	d03e      	beq.n	8006dac <_strtod_l+0xc4>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	930a      	str	r3, [sp, #40]	; 0x28
 8006d32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d34:	7833      	ldrb	r3, [r6, #0]
 8006d36:	2b30      	cmp	r3, #48	; 0x30
 8006d38:	f040 80b0 	bne.w	8006e9c <_strtod_l+0x1b4>
 8006d3c:	7873      	ldrb	r3, [r6, #1]
 8006d3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d42:	2b58      	cmp	r3, #88	; 0x58
 8006d44:	d168      	bne.n	8006e18 <_strtod_l+0x130>
 8006d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	ab18      	add	r3, sp, #96	; 0x60
 8006d4c:	9702      	str	r7, [sp, #8]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4a8d      	ldr	r2, [pc, #564]	; (8006f88 <_strtod_l+0x2a0>)
 8006d52:	ab19      	add	r3, sp, #100	; 0x64
 8006d54:	a917      	add	r1, sp, #92	; 0x5c
 8006d56:	4620      	mov	r0, r4
 8006d58:	f001 fd44 	bl	80087e4 <__gethex>
 8006d5c:	f010 0707 	ands.w	r7, r0, #7
 8006d60:	4605      	mov	r5, r0
 8006d62:	d005      	beq.n	8006d70 <_strtod_l+0x88>
 8006d64:	2f06      	cmp	r7, #6
 8006d66:	d12c      	bne.n	8006dc2 <_strtod_l+0xda>
 8006d68:	3601      	adds	r6, #1
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f040 8590 	bne.w	8007898 <_strtod_l+0xbb0>
 8006d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d7a:	b1eb      	cbz	r3, 8006db8 <_strtod_l+0xd0>
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d82:	ec43 2b10 	vmov	d0, r2, r3
 8006d86:	b01d      	add	sp, #116	; 0x74
 8006d88:	ecbd 8b02 	vpop	{d8}
 8006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d90:	2a20      	cmp	r2, #32
 8006d92:	d1cc      	bne.n	8006d2e <_strtod_l+0x46>
 8006d94:	3301      	adds	r3, #1
 8006d96:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d98:	e7be      	b.n	8006d18 <_strtod_l+0x30>
 8006d9a:	2a2d      	cmp	r2, #45	; 0x2d
 8006d9c:	d1c7      	bne.n	8006d2e <_strtod_l+0x46>
 8006d9e:	2201      	movs	r2, #1
 8006da0:	920a      	str	r2, [sp, #40]	; 0x28
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1c2      	bne.n	8006d32 <_strtod_l+0x4a>
 8006dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f040 856e 	bne.w	8007894 <_strtod_l+0xbac>
 8006db8:	4652      	mov	r2, sl
 8006dba:	465b      	mov	r3, fp
 8006dbc:	e7e1      	b.n	8006d82 <_strtod_l+0x9a>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	e7ee      	b.n	8006da0 <_strtod_l+0xb8>
 8006dc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006dc4:	b13a      	cbz	r2, 8006dd6 <_strtod_l+0xee>
 8006dc6:	2135      	movs	r1, #53	; 0x35
 8006dc8:	a81a      	add	r0, sp, #104	; 0x68
 8006dca:	f002 fcbc 	bl	8009746 <__copybits>
 8006dce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f002 f87b 	bl	8008ecc <_Bfree>
 8006dd6:	3f01      	subs	r7, #1
 8006dd8:	2f04      	cmp	r7, #4
 8006dda:	d806      	bhi.n	8006dea <_strtod_l+0x102>
 8006ddc:	e8df f007 	tbb	[pc, r7]
 8006de0:	1714030a 	.word	0x1714030a
 8006de4:	0a          	.byte	0x0a
 8006de5:	00          	.byte	0x00
 8006de6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006dea:	0728      	lsls	r0, r5, #28
 8006dec:	d5c0      	bpl.n	8006d70 <_strtod_l+0x88>
 8006dee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006df2:	e7bd      	b.n	8006d70 <_strtod_l+0x88>
 8006df4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006df8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006dfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006dfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e06:	e7f0      	b.n	8006dea <_strtod_l+0x102>
 8006e08:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006f8c <_strtod_l+0x2a4>
 8006e0c:	e7ed      	b.n	8006dea <_strtod_l+0x102>
 8006e0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e12:	f04f 3aff 	mov.w	sl, #4294967295
 8006e16:	e7e8      	b.n	8006dea <_strtod_l+0x102>
 8006e18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	2b30      	cmp	r3, #48	; 0x30
 8006e22:	d0f9      	beq.n	8006e18 <_strtod_l+0x130>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0a3      	beq.n	8006d70 <_strtod_l+0x88>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f04f 0900 	mov.w	r9, #0
 8006e2e:	9304      	str	r3, [sp, #16]
 8006e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e32:	9308      	str	r3, [sp, #32]
 8006e34:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e38:	464f      	mov	r7, r9
 8006e3a:	220a      	movs	r2, #10
 8006e3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e3e:	7806      	ldrb	r6, [r0, #0]
 8006e40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e44:	b2d9      	uxtb	r1, r3
 8006e46:	2909      	cmp	r1, #9
 8006e48:	d92a      	bls.n	8006ea0 <_strtod_l+0x1b8>
 8006e4a:	9905      	ldr	r1, [sp, #20]
 8006e4c:	462a      	mov	r2, r5
 8006e4e:	f002 ff2b 	bl	8009ca8 <strncmp>
 8006e52:	b398      	cbz	r0, 8006ebc <_strtod_l+0x1d4>
 8006e54:	2000      	movs	r0, #0
 8006e56:	4632      	mov	r2, r6
 8006e58:	463d      	mov	r5, r7
 8006e5a:	9005      	str	r0, [sp, #20]
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2a65      	cmp	r2, #101	; 0x65
 8006e60:	d001      	beq.n	8006e66 <_strtod_l+0x17e>
 8006e62:	2a45      	cmp	r2, #69	; 0x45
 8006e64:	d118      	bne.n	8006e98 <_strtod_l+0x1b0>
 8006e66:	b91d      	cbnz	r5, 8006e70 <_strtod_l+0x188>
 8006e68:	9a04      	ldr	r2, [sp, #16]
 8006e6a:	4302      	orrs	r2, r0
 8006e6c:	d09e      	beq.n	8006dac <_strtod_l+0xc4>
 8006e6e:	2500      	movs	r5, #0
 8006e70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e74:	f108 0201 	add.w	r2, r8, #1
 8006e78:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e7e:	2a2b      	cmp	r2, #43	; 0x2b
 8006e80:	d075      	beq.n	8006f6e <_strtod_l+0x286>
 8006e82:	2a2d      	cmp	r2, #45	; 0x2d
 8006e84:	d07b      	beq.n	8006f7e <_strtod_l+0x296>
 8006e86:	f04f 0c00 	mov.w	ip, #0
 8006e8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e8e:	2909      	cmp	r1, #9
 8006e90:	f240 8082 	bls.w	8006f98 <_strtod_l+0x2b0>
 8006e94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e98:	2600      	movs	r6, #0
 8006e9a:	e09d      	b.n	8006fd8 <_strtod_l+0x2f0>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e7c4      	b.n	8006e2a <_strtod_l+0x142>
 8006ea0:	2f08      	cmp	r7, #8
 8006ea2:	bfd8      	it	le
 8006ea4:	9907      	ldrle	r1, [sp, #28]
 8006ea6:	f100 0001 	add.w	r0, r0, #1
 8006eaa:	bfda      	itte	le
 8006eac:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eb0:	9307      	strle	r3, [sp, #28]
 8006eb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006eb6:	3701      	adds	r7, #1
 8006eb8:	9017      	str	r0, [sp, #92]	; 0x5c
 8006eba:	e7bf      	b.n	8006e3c <_strtod_l+0x154>
 8006ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ebe:	195a      	adds	r2, r3, r5
 8006ec0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ec2:	5d5a      	ldrb	r2, [r3, r5]
 8006ec4:	2f00      	cmp	r7, #0
 8006ec6:	d037      	beq.n	8006f38 <_strtod_l+0x250>
 8006ec8:	9005      	str	r0, [sp, #20]
 8006eca:	463d      	mov	r5, r7
 8006ecc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ed0:	2b09      	cmp	r3, #9
 8006ed2:	d912      	bls.n	8006efa <_strtod_l+0x212>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e7c2      	b.n	8006e5e <_strtod_l+0x176>
 8006ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ede:	785a      	ldrb	r2, [r3, #1]
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	2a30      	cmp	r2, #48	; 0x30
 8006ee4:	d0f8      	beq.n	8006ed8 <_strtod_l+0x1f0>
 8006ee6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	f200 84d9 	bhi.w	80078a2 <_strtod_l+0xbba>
 8006ef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ef2:	9005      	str	r0, [sp, #20]
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	9308      	str	r3, [sp, #32]
 8006ef8:	4605      	mov	r5, r0
 8006efa:	3a30      	subs	r2, #48	; 0x30
 8006efc:	f100 0301 	add.w	r3, r0, #1
 8006f00:	d014      	beq.n	8006f2c <_strtod_l+0x244>
 8006f02:	9905      	ldr	r1, [sp, #20]
 8006f04:	4419      	add	r1, r3
 8006f06:	9105      	str	r1, [sp, #20]
 8006f08:	462b      	mov	r3, r5
 8006f0a:	eb00 0e05 	add.w	lr, r0, r5
 8006f0e:	210a      	movs	r1, #10
 8006f10:	4573      	cmp	r3, lr
 8006f12:	d113      	bne.n	8006f3c <_strtod_l+0x254>
 8006f14:	182b      	adds	r3, r5, r0
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	f105 0501 	add.w	r5, r5, #1
 8006f1c:	4405      	add	r5, r0
 8006f1e:	dc1c      	bgt.n	8006f5a <_strtod_l+0x272>
 8006f20:	9907      	ldr	r1, [sp, #28]
 8006f22:	230a      	movs	r3, #10
 8006f24:	fb03 2301 	mla	r3, r3, r1, r2
 8006f28:	9307      	str	r3, [sp, #28]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f2e:	1c51      	adds	r1, r2, #1
 8006f30:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f32:	7852      	ldrb	r2, [r2, #1]
 8006f34:	4618      	mov	r0, r3
 8006f36:	e7c9      	b.n	8006ecc <_strtod_l+0x1e4>
 8006f38:	4638      	mov	r0, r7
 8006f3a:	e7d2      	b.n	8006ee2 <_strtod_l+0x1fa>
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	dc04      	bgt.n	8006f4a <_strtod_l+0x262>
 8006f40:	9e07      	ldr	r6, [sp, #28]
 8006f42:	434e      	muls	r6, r1
 8006f44:	9607      	str	r6, [sp, #28]
 8006f46:	3301      	adds	r3, #1
 8006f48:	e7e2      	b.n	8006f10 <_strtod_l+0x228>
 8006f4a:	f103 0c01 	add.w	ip, r3, #1
 8006f4e:	f1bc 0f10 	cmp.w	ip, #16
 8006f52:	bfd8      	it	le
 8006f54:	fb01 f909 	mulle.w	r9, r1, r9
 8006f58:	e7f5      	b.n	8006f46 <_strtod_l+0x25e>
 8006f5a:	2d10      	cmp	r5, #16
 8006f5c:	bfdc      	itt	le
 8006f5e:	230a      	movle	r3, #10
 8006f60:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f64:	e7e1      	b.n	8006f2a <_strtod_l+0x242>
 8006f66:	2300      	movs	r3, #0
 8006f68:	9305      	str	r3, [sp, #20]
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e77c      	b.n	8006e68 <_strtod_l+0x180>
 8006f6e:	f04f 0c00 	mov.w	ip, #0
 8006f72:	f108 0202 	add.w	r2, r8, #2
 8006f76:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f78:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f7c:	e785      	b.n	8006e8a <_strtod_l+0x1a2>
 8006f7e:	f04f 0c01 	mov.w	ip, #1
 8006f82:	e7f6      	b.n	8006f72 <_strtod_l+0x28a>
 8006f84:	0800ac28 	.word	0x0800ac28
 8006f88:	0800aadc 	.word	0x0800aadc
 8006f8c:	7ff00000 	.word	0x7ff00000
 8006f90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f92:	1c51      	adds	r1, r2, #1
 8006f94:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f96:	7852      	ldrb	r2, [r2, #1]
 8006f98:	2a30      	cmp	r2, #48	; 0x30
 8006f9a:	d0f9      	beq.n	8006f90 <_strtod_l+0x2a8>
 8006f9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006fa0:	2908      	cmp	r1, #8
 8006fa2:	f63f af79 	bhi.w	8006e98 <_strtod_l+0x1b0>
 8006fa6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006faa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fac:	9206      	str	r2, [sp, #24]
 8006fae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fb0:	1c51      	adds	r1, r2, #1
 8006fb2:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fb4:	7852      	ldrb	r2, [r2, #1]
 8006fb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006fba:	2e09      	cmp	r6, #9
 8006fbc:	d937      	bls.n	800702e <_strtod_l+0x346>
 8006fbe:	9e06      	ldr	r6, [sp, #24]
 8006fc0:	1b89      	subs	r1, r1, r6
 8006fc2:	2908      	cmp	r1, #8
 8006fc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fc8:	dc02      	bgt.n	8006fd0 <_strtod_l+0x2e8>
 8006fca:	4576      	cmp	r6, lr
 8006fcc:	bfa8      	it	ge
 8006fce:	4676      	movge	r6, lr
 8006fd0:	f1bc 0f00 	cmp.w	ip, #0
 8006fd4:	d000      	beq.n	8006fd8 <_strtod_l+0x2f0>
 8006fd6:	4276      	negs	r6, r6
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	d14d      	bne.n	8007078 <_strtod_l+0x390>
 8006fdc:	9904      	ldr	r1, [sp, #16]
 8006fde:	4301      	orrs	r1, r0
 8006fe0:	f47f aec6 	bne.w	8006d70 <_strtod_l+0x88>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f47f aee1 	bne.w	8006dac <_strtod_l+0xc4>
 8006fea:	2a69      	cmp	r2, #105	; 0x69
 8006fec:	d027      	beq.n	800703e <_strtod_l+0x356>
 8006fee:	dc24      	bgt.n	800703a <_strtod_l+0x352>
 8006ff0:	2a49      	cmp	r2, #73	; 0x49
 8006ff2:	d024      	beq.n	800703e <_strtod_l+0x356>
 8006ff4:	2a4e      	cmp	r2, #78	; 0x4e
 8006ff6:	f47f aed9 	bne.w	8006dac <_strtod_l+0xc4>
 8006ffa:	499f      	ldr	r1, [pc, #636]	; (8007278 <_strtod_l+0x590>)
 8006ffc:	a817      	add	r0, sp, #92	; 0x5c
 8006ffe:	f001 fe49 	bl	8008c94 <__match>
 8007002:	2800      	cmp	r0, #0
 8007004:	f43f aed2 	beq.w	8006dac <_strtod_l+0xc4>
 8007008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b28      	cmp	r3, #40	; 0x28
 800700e:	d12d      	bne.n	800706c <_strtod_l+0x384>
 8007010:	499a      	ldr	r1, [pc, #616]	; (800727c <_strtod_l+0x594>)
 8007012:	aa1a      	add	r2, sp, #104	; 0x68
 8007014:	a817      	add	r0, sp, #92	; 0x5c
 8007016:	f001 fe51 	bl	8008cbc <__hexnan>
 800701a:	2805      	cmp	r0, #5
 800701c:	d126      	bne.n	800706c <_strtod_l+0x384>
 800701e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007020:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007024:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007028:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800702c:	e6a0      	b.n	8006d70 <_strtod_l+0x88>
 800702e:	210a      	movs	r1, #10
 8007030:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007034:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007038:	e7b9      	b.n	8006fae <_strtod_l+0x2c6>
 800703a:	2a6e      	cmp	r2, #110	; 0x6e
 800703c:	e7db      	b.n	8006ff6 <_strtod_l+0x30e>
 800703e:	4990      	ldr	r1, [pc, #576]	; (8007280 <_strtod_l+0x598>)
 8007040:	a817      	add	r0, sp, #92	; 0x5c
 8007042:	f001 fe27 	bl	8008c94 <__match>
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f aeb0 	beq.w	8006dac <_strtod_l+0xc4>
 800704c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800704e:	498d      	ldr	r1, [pc, #564]	; (8007284 <_strtod_l+0x59c>)
 8007050:	3b01      	subs	r3, #1
 8007052:	a817      	add	r0, sp, #92	; 0x5c
 8007054:	9317      	str	r3, [sp, #92]	; 0x5c
 8007056:	f001 fe1d 	bl	8008c94 <__match>
 800705a:	b910      	cbnz	r0, 8007062 <_strtod_l+0x37a>
 800705c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800705e:	3301      	adds	r3, #1
 8007060:	9317      	str	r3, [sp, #92]	; 0x5c
 8007062:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007294 <_strtod_l+0x5ac>
 8007066:	f04f 0a00 	mov.w	sl, #0
 800706a:	e681      	b.n	8006d70 <_strtod_l+0x88>
 800706c:	4886      	ldr	r0, [pc, #536]	; (8007288 <_strtod_l+0x5a0>)
 800706e:	f002 fe03 	bl	8009c78 <nan>
 8007072:	ec5b ab10 	vmov	sl, fp, d0
 8007076:	e67b      	b.n	8006d70 <_strtod_l+0x88>
 8007078:	9b05      	ldr	r3, [sp, #20]
 800707a:	9807      	ldr	r0, [sp, #28]
 800707c:	1af3      	subs	r3, r6, r3
 800707e:	2f00      	cmp	r7, #0
 8007080:	bf08      	it	eq
 8007082:	462f      	moveq	r7, r5
 8007084:	2d10      	cmp	r5, #16
 8007086:	9306      	str	r3, [sp, #24]
 8007088:	46a8      	mov	r8, r5
 800708a:	bfa8      	it	ge
 800708c:	f04f 0810 	movge.w	r8, #16
 8007090:	f7f9 fa38 	bl	8000504 <__aeabi_ui2d>
 8007094:	2d09      	cmp	r5, #9
 8007096:	4682      	mov	sl, r0
 8007098:	468b      	mov	fp, r1
 800709a:	dd13      	ble.n	80070c4 <_strtod_l+0x3dc>
 800709c:	4b7b      	ldr	r3, [pc, #492]	; (800728c <_strtod_l+0x5a4>)
 800709e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80070a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070a6:	f7f9 faa7 	bl	80005f8 <__aeabi_dmul>
 80070aa:	4682      	mov	sl, r0
 80070ac:	4648      	mov	r0, r9
 80070ae:	468b      	mov	fp, r1
 80070b0:	f7f9 fa28 	bl	8000504 <__aeabi_ui2d>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4650      	mov	r0, sl
 80070ba:	4659      	mov	r1, fp
 80070bc:	f7f9 f8e6 	bl	800028c <__adddf3>
 80070c0:	4682      	mov	sl, r0
 80070c2:	468b      	mov	fp, r1
 80070c4:	2d0f      	cmp	r5, #15
 80070c6:	dc38      	bgt.n	800713a <_strtod_l+0x452>
 80070c8:	9b06      	ldr	r3, [sp, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f43f ae50 	beq.w	8006d70 <_strtod_l+0x88>
 80070d0:	dd24      	ble.n	800711c <_strtod_l+0x434>
 80070d2:	2b16      	cmp	r3, #22
 80070d4:	dc0b      	bgt.n	80070ee <_strtod_l+0x406>
 80070d6:	496d      	ldr	r1, [pc, #436]	; (800728c <_strtod_l+0x5a4>)
 80070d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070e0:	4652      	mov	r2, sl
 80070e2:	465b      	mov	r3, fp
 80070e4:	f7f9 fa88 	bl	80005f8 <__aeabi_dmul>
 80070e8:	4682      	mov	sl, r0
 80070ea:	468b      	mov	fp, r1
 80070ec:	e640      	b.n	8006d70 <_strtod_l+0x88>
 80070ee:	9a06      	ldr	r2, [sp, #24]
 80070f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80070f4:	4293      	cmp	r3, r2
 80070f6:	db20      	blt.n	800713a <_strtod_l+0x452>
 80070f8:	4c64      	ldr	r4, [pc, #400]	; (800728c <_strtod_l+0x5a4>)
 80070fa:	f1c5 050f 	rsb	r5, r5, #15
 80070fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007102:	4652      	mov	r2, sl
 8007104:	465b      	mov	r3, fp
 8007106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800710a:	f7f9 fa75 	bl	80005f8 <__aeabi_dmul>
 800710e:	9b06      	ldr	r3, [sp, #24]
 8007110:	1b5d      	subs	r5, r3, r5
 8007112:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007116:	e9d4 2300 	ldrd	r2, r3, [r4]
 800711a:	e7e3      	b.n	80070e4 <_strtod_l+0x3fc>
 800711c:	9b06      	ldr	r3, [sp, #24]
 800711e:	3316      	adds	r3, #22
 8007120:	db0b      	blt.n	800713a <_strtod_l+0x452>
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	1b9e      	subs	r6, r3, r6
 8007126:	4b59      	ldr	r3, [pc, #356]	; (800728c <_strtod_l+0x5a4>)
 8007128:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800712c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007130:	4650      	mov	r0, sl
 8007132:	4659      	mov	r1, fp
 8007134:	f7f9 fb8a 	bl	800084c <__aeabi_ddiv>
 8007138:	e7d6      	b.n	80070e8 <_strtod_l+0x400>
 800713a:	9b06      	ldr	r3, [sp, #24]
 800713c:	eba5 0808 	sub.w	r8, r5, r8
 8007140:	4498      	add	r8, r3
 8007142:	f1b8 0f00 	cmp.w	r8, #0
 8007146:	dd74      	ble.n	8007232 <_strtod_l+0x54a>
 8007148:	f018 030f 	ands.w	r3, r8, #15
 800714c:	d00a      	beq.n	8007164 <_strtod_l+0x47c>
 800714e:	494f      	ldr	r1, [pc, #316]	; (800728c <_strtod_l+0x5a4>)
 8007150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007154:	4652      	mov	r2, sl
 8007156:	465b      	mov	r3, fp
 8007158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	4682      	mov	sl, r0
 8007162:	468b      	mov	fp, r1
 8007164:	f038 080f 	bics.w	r8, r8, #15
 8007168:	d04f      	beq.n	800720a <_strtod_l+0x522>
 800716a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800716e:	dd22      	ble.n	80071b6 <_strtod_l+0x4ce>
 8007170:	2500      	movs	r5, #0
 8007172:	462e      	mov	r6, r5
 8007174:	9507      	str	r5, [sp, #28]
 8007176:	9505      	str	r5, [sp, #20]
 8007178:	2322      	movs	r3, #34	; 0x22
 800717a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007294 <_strtod_l+0x5ac>
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	f04f 0a00 	mov.w	sl, #0
 8007184:	9b07      	ldr	r3, [sp, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f43f adf2 	beq.w	8006d70 <_strtod_l+0x88>
 800718c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800718e:	4620      	mov	r0, r4
 8007190:	f001 fe9c 	bl	8008ecc <_Bfree>
 8007194:	9905      	ldr	r1, [sp, #20]
 8007196:	4620      	mov	r0, r4
 8007198:	f001 fe98 	bl	8008ecc <_Bfree>
 800719c:	4631      	mov	r1, r6
 800719e:	4620      	mov	r0, r4
 80071a0:	f001 fe94 	bl	8008ecc <_Bfree>
 80071a4:	9907      	ldr	r1, [sp, #28]
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 fe90 	bl	8008ecc <_Bfree>
 80071ac:	4629      	mov	r1, r5
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 fe8c 	bl	8008ecc <_Bfree>
 80071b4:	e5dc      	b.n	8006d70 <_strtod_l+0x88>
 80071b6:	4b36      	ldr	r3, [pc, #216]	; (8007290 <_strtod_l+0x5a8>)
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	2300      	movs	r3, #0
 80071bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071c0:	4650      	mov	r0, sl
 80071c2:	4659      	mov	r1, fp
 80071c4:	4699      	mov	r9, r3
 80071c6:	f1b8 0f01 	cmp.w	r8, #1
 80071ca:	dc21      	bgt.n	8007210 <_strtod_l+0x528>
 80071cc:	b10b      	cbz	r3, 80071d2 <_strtod_l+0x4ea>
 80071ce:	4682      	mov	sl, r0
 80071d0:	468b      	mov	fp, r1
 80071d2:	4b2f      	ldr	r3, [pc, #188]	; (8007290 <_strtod_l+0x5a8>)
 80071d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071dc:	4652      	mov	r2, sl
 80071de:	465b      	mov	r3, fp
 80071e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071e4:	f7f9 fa08 	bl	80005f8 <__aeabi_dmul>
 80071e8:	4b2a      	ldr	r3, [pc, #168]	; (8007294 <_strtod_l+0x5ac>)
 80071ea:	460a      	mov	r2, r1
 80071ec:	400b      	ands	r3, r1
 80071ee:	492a      	ldr	r1, [pc, #168]	; (8007298 <_strtod_l+0x5b0>)
 80071f0:	428b      	cmp	r3, r1
 80071f2:	4682      	mov	sl, r0
 80071f4:	d8bc      	bhi.n	8007170 <_strtod_l+0x488>
 80071f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80071fa:	428b      	cmp	r3, r1
 80071fc:	bf86      	itte	hi
 80071fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800729c <_strtod_l+0x5b4>
 8007202:	f04f 3aff 	movhi.w	sl, #4294967295
 8007206:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800720a:	2300      	movs	r3, #0
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	e084      	b.n	800731a <_strtod_l+0x632>
 8007210:	f018 0f01 	tst.w	r8, #1
 8007214:	d005      	beq.n	8007222 <_strtod_l+0x53a>
 8007216:	9b04      	ldr	r3, [sp, #16]
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f7f9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8007220:	2301      	movs	r3, #1
 8007222:	9a04      	ldr	r2, [sp, #16]
 8007224:	3208      	adds	r2, #8
 8007226:	f109 0901 	add.w	r9, r9, #1
 800722a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800722e:	9204      	str	r2, [sp, #16]
 8007230:	e7c9      	b.n	80071c6 <_strtod_l+0x4de>
 8007232:	d0ea      	beq.n	800720a <_strtod_l+0x522>
 8007234:	f1c8 0800 	rsb	r8, r8, #0
 8007238:	f018 020f 	ands.w	r2, r8, #15
 800723c:	d00a      	beq.n	8007254 <_strtod_l+0x56c>
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <_strtod_l+0x5a4>)
 8007240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007244:	4650      	mov	r0, sl
 8007246:	4659      	mov	r1, fp
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f9 fafe 	bl	800084c <__aeabi_ddiv>
 8007250:	4682      	mov	sl, r0
 8007252:	468b      	mov	fp, r1
 8007254:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007258:	d0d7      	beq.n	800720a <_strtod_l+0x522>
 800725a:	f1b8 0f1f 	cmp.w	r8, #31
 800725e:	dd1f      	ble.n	80072a0 <_strtod_l+0x5b8>
 8007260:	2500      	movs	r5, #0
 8007262:	462e      	mov	r6, r5
 8007264:	9507      	str	r5, [sp, #28]
 8007266:	9505      	str	r5, [sp, #20]
 8007268:	2322      	movs	r3, #34	; 0x22
 800726a:	f04f 0a00 	mov.w	sl, #0
 800726e:	f04f 0b00 	mov.w	fp, #0
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	e786      	b.n	8007184 <_strtod_l+0x49c>
 8007276:	bf00      	nop
 8007278:	0800aaad 	.word	0x0800aaad
 800727c:	0800aaf0 	.word	0x0800aaf0
 8007280:	0800aaa5 	.word	0x0800aaa5
 8007284:	0800ab33 	.word	0x0800ab33
 8007288:	0800ade0 	.word	0x0800ade0
 800728c:	0800acc0 	.word	0x0800acc0
 8007290:	0800ac98 	.word	0x0800ac98
 8007294:	7ff00000 	.word	0x7ff00000
 8007298:	7ca00000 	.word	0x7ca00000
 800729c:	7fefffff 	.word	0x7fefffff
 80072a0:	f018 0310 	ands.w	r3, r8, #16
 80072a4:	bf18      	it	ne
 80072a6:	236a      	movne	r3, #106	; 0x6a
 80072a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007658 <_strtod_l+0x970>
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	4650      	mov	r0, sl
 80072b0:	4659      	mov	r1, fp
 80072b2:	2300      	movs	r3, #0
 80072b4:	f018 0f01 	tst.w	r8, #1
 80072b8:	d004      	beq.n	80072c4 <_strtod_l+0x5dc>
 80072ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072be:	f7f9 f99b 	bl	80005f8 <__aeabi_dmul>
 80072c2:	2301      	movs	r3, #1
 80072c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072c8:	f109 0908 	add.w	r9, r9, #8
 80072cc:	d1f2      	bne.n	80072b4 <_strtod_l+0x5cc>
 80072ce:	b10b      	cbz	r3, 80072d4 <_strtod_l+0x5ec>
 80072d0:	4682      	mov	sl, r0
 80072d2:	468b      	mov	fp, r1
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	b1c3      	cbz	r3, 800730a <_strtod_l+0x622>
 80072d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	4659      	mov	r1, fp
 80072e4:	dd11      	ble.n	800730a <_strtod_l+0x622>
 80072e6:	2b1f      	cmp	r3, #31
 80072e8:	f340 8124 	ble.w	8007534 <_strtod_l+0x84c>
 80072ec:	2b34      	cmp	r3, #52	; 0x34
 80072ee:	bfde      	ittt	le
 80072f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072f4:	f04f 33ff 	movle.w	r3, #4294967295
 80072f8:	fa03 f202 	lslle.w	r2, r3, r2
 80072fc:	f04f 0a00 	mov.w	sl, #0
 8007300:	bfcc      	ite	gt
 8007302:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007306:	ea02 0b01 	andle.w	fp, r2, r1
 800730a:	2200      	movs	r2, #0
 800730c:	2300      	movs	r3, #0
 800730e:	4650      	mov	r0, sl
 8007310:	4659      	mov	r1, fp
 8007312:	f7f9 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007316:	2800      	cmp	r0, #0
 8007318:	d1a2      	bne.n	8007260 <_strtod_l+0x578>
 800731a:	9b07      	ldr	r3, [sp, #28]
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	9908      	ldr	r1, [sp, #32]
 8007320:	462b      	mov	r3, r5
 8007322:	463a      	mov	r2, r7
 8007324:	4620      	mov	r0, r4
 8007326:	f001 fe39 	bl	8008f9c <__s2b>
 800732a:	9007      	str	r0, [sp, #28]
 800732c:	2800      	cmp	r0, #0
 800732e:	f43f af1f 	beq.w	8007170 <_strtod_l+0x488>
 8007332:	9b05      	ldr	r3, [sp, #20]
 8007334:	1b9e      	subs	r6, r3, r6
 8007336:	9b06      	ldr	r3, [sp, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	bfb4      	ite	lt
 800733c:	4633      	movlt	r3, r6
 800733e:	2300      	movge	r3, #0
 8007340:	930c      	str	r3, [sp, #48]	; 0x30
 8007342:	9b06      	ldr	r3, [sp, #24]
 8007344:	2500      	movs	r5, #0
 8007346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800734a:	9312      	str	r3, [sp, #72]	; 0x48
 800734c:	462e      	mov	r6, r5
 800734e:	9b07      	ldr	r3, [sp, #28]
 8007350:	4620      	mov	r0, r4
 8007352:	6859      	ldr	r1, [r3, #4]
 8007354:	f001 fd7a 	bl	8008e4c <_Balloc>
 8007358:	9005      	str	r0, [sp, #20]
 800735a:	2800      	cmp	r0, #0
 800735c:	f43f af0c 	beq.w	8007178 <_strtod_l+0x490>
 8007360:	9b07      	ldr	r3, [sp, #28]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	3202      	adds	r2, #2
 8007366:	f103 010c 	add.w	r1, r3, #12
 800736a:	0092      	lsls	r2, r2, #2
 800736c:	300c      	adds	r0, #12
 800736e:	f001 fd5f 	bl	8008e30 <memcpy>
 8007372:	ec4b ab10 	vmov	d0, sl, fp
 8007376:	aa1a      	add	r2, sp, #104	; 0x68
 8007378:	a919      	add	r1, sp, #100	; 0x64
 800737a:	4620      	mov	r0, r4
 800737c:	f002 f954 	bl	8009628 <__d2b>
 8007380:	ec4b ab18 	vmov	d8, sl, fp
 8007384:	9018      	str	r0, [sp, #96]	; 0x60
 8007386:	2800      	cmp	r0, #0
 8007388:	f43f aef6 	beq.w	8007178 <_strtod_l+0x490>
 800738c:	2101      	movs	r1, #1
 800738e:	4620      	mov	r0, r4
 8007390:	f001 fe9e 	bl	80090d0 <__i2b>
 8007394:	4606      	mov	r6, r0
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f aeee 	beq.w	8007178 <_strtod_l+0x490>
 800739c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800739e:	9904      	ldr	r1, [sp, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bfab      	itete	ge
 80073a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80073a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80073a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80073ae:	bfac      	ite	ge
 80073b0:	eb03 0902 	addge.w	r9, r3, r2
 80073b4:	1ad7      	sublt	r7, r2, r3
 80073b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073b8:	eba3 0801 	sub.w	r8, r3, r1
 80073bc:	4490      	add	r8, r2
 80073be:	4ba1      	ldr	r3, [pc, #644]	; (8007644 <_strtod_l+0x95c>)
 80073c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80073c4:	4598      	cmp	r8, r3
 80073c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073ca:	f280 80c7 	bge.w	800755c <_strtod_l+0x874>
 80073ce:	eba3 0308 	sub.w	r3, r3, r8
 80073d2:	2b1f      	cmp	r3, #31
 80073d4:	eba2 0203 	sub.w	r2, r2, r3
 80073d8:	f04f 0101 	mov.w	r1, #1
 80073dc:	f300 80b1 	bgt.w	8007542 <_strtod_l+0x85a>
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	930d      	str	r3, [sp, #52]	; 0x34
 80073e6:	2300      	movs	r3, #0
 80073e8:	9308      	str	r3, [sp, #32]
 80073ea:	eb09 0802 	add.w	r8, r9, r2
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	45c1      	cmp	r9, r8
 80073f2:	4417      	add	r7, r2
 80073f4:	441f      	add	r7, r3
 80073f6:	464b      	mov	r3, r9
 80073f8:	bfa8      	it	ge
 80073fa:	4643      	movge	r3, r8
 80073fc:	42bb      	cmp	r3, r7
 80073fe:	bfa8      	it	ge
 8007400:	463b      	movge	r3, r7
 8007402:	2b00      	cmp	r3, #0
 8007404:	bfc2      	ittt	gt
 8007406:	eba8 0803 	subgt.w	r8, r8, r3
 800740a:	1aff      	subgt	r7, r7, r3
 800740c:	eba9 0903 	subgt.w	r9, r9, r3
 8007410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007412:	2b00      	cmp	r3, #0
 8007414:	dd17      	ble.n	8007446 <_strtod_l+0x75e>
 8007416:	4631      	mov	r1, r6
 8007418:	461a      	mov	r2, r3
 800741a:	4620      	mov	r0, r4
 800741c:	f001 ff18 	bl	8009250 <__pow5mult>
 8007420:	4606      	mov	r6, r0
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f aea8 	beq.w	8007178 <_strtod_l+0x490>
 8007428:	4601      	mov	r1, r0
 800742a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800742c:	4620      	mov	r0, r4
 800742e:	f001 fe65 	bl	80090fc <__multiply>
 8007432:	900b      	str	r0, [sp, #44]	; 0x2c
 8007434:	2800      	cmp	r0, #0
 8007436:	f43f ae9f 	beq.w	8007178 <_strtod_l+0x490>
 800743a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800743c:	4620      	mov	r0, r4
 800743e:	f001 fd45 	bl	8008ecc <_Bfree>
 8007442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007444:	9318      	str	r3, [sp, #96]	; 0x60
 8007446:	f1b8 0f00 	cmp.w	r8, #0
 800744a:	f300 808c 	bgt.w	8007566 <_strtod_l+0x87e>
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	dd08      	ble.n	8007466 <_strtod_l+0x77e>
 8007454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007456:	9905      	ldr	r1, [sp, #20]
 8007458:	4620      	mov	r0, r4
 800745a:	f001 fef9 	bl	8009250 <__pow5mult>
 800745e:	9005      	str	r0, [sp, #20]
 8007460:	2800      	cmp	r0, #0
 8007462:	f43f ae89 	beq.w	8007178 <_strtod_l+0x490>
 8007466:	2f00      	cmp	r7, #0
 8007468:	dd08      	ble.n	800747c <_strtod_l+0x794>
 800746a:	9905      	ldr	r1, [sp, #20]
 800746c:	463a      	mov	r2, r7
 800746e:	4620      	mov	r0, r4
 8007470:	f001 ff48 	bl	8009304 <__lshift>
 8007474:	9005      	str	r0, [sp, #20]
 8007476:	2800      	cmp	r0, #0
 8007478:	f43f ae7e 	beq.w	8007178 <_strtod_l+0x490>
 800747c:	f1b9 0f00 	cmp.w	r9, #0
 8007480:	dd08      	ble.n	8007494 <_strtod_l+0x7ac>
 8007482:	4631      	mov	r1, r6
 8007484:	464a      	mov	r2, r9
 8007486:	4620      	mov	r0, r4
 8007488:	f001 ff3c 	bl	8009304 <__lshift>
 800748c:	4606      	mov	r6, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f ae72 	beq.w	8007178 <_strtod_l+0x490>
 8007494:	9a05      	ldr	r2, [sp, #20]
 8007496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007498:	4620      	mov	r0, r4
 800749a:	f001 ffbf 	bl	800941c <__mdiff>
 800749e:	4605      	mov	r5, r0
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f43f ae69 	beq.w	8007178 <_strtod_l+0x490>
 80074a6:	68c3      	ldr	r3, [r0, #12]
 80074a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074aa:	2300      	movs	r3, #0
 80074ac:	60c3      	str	r3, [r0, #12]
 80074ae:	4631      	mov	r1, r6
 80074b0:	f001 ff98 	bl	80093e4 <__mcmp>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	da60      	bge.n	800757a <_strtod_l+0x892>
 80074b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ba:	ea53 030a 	orrs.w	r3, r3, sl
 80074be:	f040 8082 	bne.w	80075c6 <_strtod_l+0x8de>
 80074c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d17d      	bne.n	80075c6 <_strtod_l+0x8de>
 80074ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074ce:	0d1b      	lsrs	r3, r3, #20
 80074d0:	051b      	lsls	r3, r3, #20
 80074d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074d6:	d976      	bls.n	80075c6 <_strtod_l+0x8de>
 80074d8:	696b      	ldr	r3, [r5, #20]
 80074da:	b913      	cbnz	r3, 80074e2 <_strtod_l+0x7fa>
 80074dc:	692b      	ldr	r3, [r5, #16]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	dd71      	ble.n	80075c6 <_strtod_l+0x8de>
 80074e2:	4629      	mov	r1, r5
 80074e4:	2201      	movs	r2, #1
 80074e6:	4620      	mov	r0, r4
 80074e8:	f001 ff0c 	bl	8009304 <__lshift>
 80074ec:	4631      	mov	r1, r6
 80074ee:	4605      	mov	r5, r0
 80074f0:	f001 ff78 	bl	80093e4 <__mcmp>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	dd66      	ble.n	80075c6 <_strtod_l+0x8de>
 80074f8:	9904      	ldr	r1, [sp, #16]
 80074fa:	4a53      	ldr	r2, [pc, #332]	; (8007648 <_strtod_l+0x960>)
 80074fc:	465b      	mov	r3, fp
 80074fe:	2900      	cmp	r1, #0
 8007500:	f000 8081 	beq.w	8007606 <_strtod_l+0x91e>
 8007504:	ea02 010b 	and.w	r1, r2, fp
 8007508:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800750c:	dc7b      	bgt.n	8007606 <_strtod_l+0x91e>
 800750e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007512:	f77f aea9 	ble.w	8007268 <_strtod_l+0x580>
 8007516:	4b4d      	ldr	r3, [pc, #308]	; (800764c <_strtod_l+0x964>)
 8007518:	4650      	mov	r0, sl
 800751a:	4659      	mov	r1, fp
 800751c:	2200      	movs	r2, #0
 800751e:	f7f9 f86b 	bl	80005f8 <__aeabi_dmul>
 8007522:	460b      	mov	r3, r1
 8007524:	4303      	orrs	r3, r0
 8007526:	bf08      	it	eq
 8007528:	2322      	moveq	r3, #34	; 0x22
 800752a:	4682      	mov	sl, r0
 800752c:	468b      	mov	fp, r1
 800752e:	bf08      	it	eq
 8007530:	6023      	streq	r3, [r4, #0]
 8007532:	e62b      	b.n	800718c <_strtod_l+0x4a4>
 8007534:	f04f 32ff 	mov.w	r2, #4294967295
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	ea03 0a0a 	and.w	sl, r3, sl
 8007540:	e6e3      	b.n	800730a <_strtod_l+0x622>
 8007542:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007546:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800754a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800754e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007552:	fa01 f308 	lsl.w	r3, r1, r8
 8007556:	9308      	str	r3, [sp, #32]
 8007558:	910d      	str	r1, [sp, #52]	; 0x34
 800755a:	e746      	b.n	80073ea <_strtod_l+0x702>
 800755c:	2300      	movs	r3, #0
 800755e:	9308      	str	r3, [sp, #32]
 8007560:	2301      	movs	r3, #1
 8007562:	930d      	str	r3, [sp, #52]	; 0x34
 8007564:	e741      	b.n	80073ea <_strtod_l+0x702>
 8007566:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007568:	4642      	mov	r2, r8
 800756a:	4620      	mov	r0, r4
 800756c:	f001 feca 	bl	8009304 <__lshift>
 8007570:	9018      	str	r0, [sp, #96]	; 0x60
 8007572:	2800      	cmp	r0, #0
 8007574:	f47f af6b 	bne.w	800744e <_strtod_l+0x766>
 8007578:	e5fe      	b.n	8007178 <_strtod_l+0x490>
 800757a:	465f      	mov	r7, fp
 800757c:	d16e      	bne.n	800765c <_strtod_l+0x974>
 800757e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007584:	b342      	cbz	r2, 80075d8 <_strtod_l+0x8f0>
 8007586:	4a32      	ldr	r2, [pc, #200]	; (8007650 <_strtod_l+0x968>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d128      	bne.n	80075de <_strtod_l+0x8f6>
 800758c:	9b04      	ldr	r3, [sp, #16]
 800758e:	4651      	mov	r1, sl
 8007590:	b1eb      	cbz	r3, 80075ce <_strtod_l+0x8e6>
 8007592:	4b2d      	ldr	r3, [pc, #180]	; (8007648 <_strtod_l+0x960>)
 8007594:	403b      	ands	r3, r7
 8007596:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800759a:	f04f 32ff 	mov.w	r2, #4294967295
 800759e:	d819      	bhi.n	80075d4 <_strtod_l+0x8ec>
 80075a0:	0d1b      	lsrs	r3, r3, #20
 80075a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075a6:	fa02 f303 	lsl.w	r3, r2, r3
 80075aa:	4299      	cmp	r1, r3
 80075ac:	d117      	bne.n	80075de <_strtod_l+0x8f6>
 80075ae:	4b29      	ldr	r3, [pc, #164]	; (8007654 <_strtod_l+0x96c>)
 80075b0:	429f      	cmp	r7, r3
 80075b2:	d102      	bne.n	80075ba <_strtod_l+0x8d2>
 80075b4:	3101      	adds	r1, #1
 80075b6:	f43f addf 	beq.w	8007178 <_strtod_l+0x490>
 80075ba:	4b23      	ldr	r3, [pc, #140]	; (8007648 <_strtod_l+0x960>)
 80075bc:	403b      	ands	r3, r7
 80075be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075c2:	f04f 0a00 	mov.w	sl, #0
 80075c6:	9b04      	ldr	r3, [sp, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1a4      	bne.n	8007516 <_strtod_l+0x82e>
 80075cc:	e5de      	b.n	800718c <_strtod_l+0x4a4>
 80075ce:	f04f 33ff 	mov.w	r3, #4294967295
 80075d2:	e7ea      	b.n	80075aa <_strtod_l+0x8c2>
 80075d4:	4613      	mov	r3, r2
 80075d6:	e7e8      	b.n	80075aa <_strtod_l+0x8c2>
 80075d8:	ea53 030a 	orrs.w	r3, r3, sl
 80075dc:	d08c      	beq.n	80074f8 <_strtod_l+0x810>
 80075de:	9b08      	ldr	r3, [sp, #32]
 80075e0:	b1db      	cbz	r3, 800761a <_strtod_l+0x932>
 80075e2:	423b      	tst	r3, r7
 80075e4:	d0ef      	beq.n	80075c6 <_strtod_l+0x8de>
 80075e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e8:	9a04      	ldr	r2, [sp, #16]
 80075ea:	4650      	mov	r0, sl
 80075ec:	4659      	mov	r1, fp
 80075ee:	b1c3      	cbz	r3, 8007622 <_strtod_l+0x93a>
 80075f0:	f7ff fb5b 	bl	8006caa <sulp>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	ec51 0b18 	vmov	r0, r1, d8
 80075fc:	f7f8 fe46 	bl	800028c <__adddf3>
 8007600:	4682      	mov	sl, r0
 8007602:	468b      	mov	fp, r1
 8007604:	e7df      	b.n	80075c6 <_strtod_l+0x8de>
 8007606:	4013      	ands	r3, r2
 8007608:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800760c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007610:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007614:	f04f 3aff 	mov.w	sl, #4294967295
 8007618:	e7d5      	b.n	80075c6 <_strtod_l+0x8de>
 800761a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800761c:	ea13 0f0a 	tst.w	r3, sl
 8007620:	e7e0      	b.n	80075e4 <_strtod_l+0x8fc>
 8007622:	f7ff fb42 	bl	8006caa <sulp>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	ec51 0b18 	vmov	r0, r1, d8
 800762e:	f7f8 fe2b 	bl	8000288 <__aeabi_dsub>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4682      	mov	sl, r0
 8007638:	468b      	mov	fp, r1
 800763a:	f7f9 fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800763e:	2800      	cmp	r0, #0
 8007640:	d0c1      	beq.n	80075c6 <_strtod_l+0x8de>
 8007642:	e611      	b.n	8007268 <_strtod_l+0x580>
 8007644:	fffffc02 	.word	0xfffffc02
 8007648:	7ff00000 	.word	0x7ff00000
 800764c:	39500000 	.word	0x39500000
 8007650:	000fffff 	.word	0x000fffff
 8007654:	7fefffff 	.word	0x7fefffff
 8007658:	0800ab08 	.word	0x0800ab08
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	f002 f83e 	bl	80096e0 <__ratio>
 8007664:	ec59 8b10 	vmov	r8, r9, d0
 8007668:	ee10 0a10 	vmov	r0, s0
 800766c:	2200      	movs	r2, #0
 800766e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007672:	4649      	mov	r1, r9
 8007674:	f7f9 fa3c 	bl	8000af0 <__aeabi_dcmple>
 8007678:	2800      	cmp	r0, #0
 800767a:	d07a      	beq.n	8007772 <_strtod_l+0xa8a>
 800767c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d04a      	beq.n	8007718 <_strtod_l+0xa30>
 8007682:	4b95      	ldr	r3, [pc, #596]	; (80078d8 <_strtod_l+0xbf0>)
 8007684:	2200      	movs	r2, #0
 8007686:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800768a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078d8 <_strtod_l+0xbf0>
 800768e:	f04f 0800 	mov.w	r8, #0
 8007692:	4b92      	ldr	r3, [pc, #584]	; (80078dc <_strtod_l+0xbf4>)
 8007694:	403b      	ands	r3, r7
 8007696:	930d      	str	r3, [sp, #52]	; 0x34
 8007698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800769a:	4b91      	ldr	r3, [pc, #580]	; (80078e0 <_strtod_l+0xbf8>)
 800769c:	429a      	cmp	r2, r3
 800769e:	f040 80b0 	bne.w	8007802 <_strtod_l+0xb1a>
 80076a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80076aa:	ec4b ab10 	vmov	d0, sl, fp
 80076ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076b2:	f001 ff3d 	bl	8009530 <__ulp>
 80076b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076ba:	ec53 2b10 	vmov	r2, r3, d0
 80076be:	f7f8 ff9b 	bl	80005f8 <__aeabi_dmul>
 80076c2:	4652      	mov	r2, sl
 80076c4:	465b      	mov	r3, fp
 80076c6:	f7f8 fde1 	bl	800028c <__adddf3>
 80076ca:	460b      	mov	r3, r1
 80076cc:	4983      	ldr	r1, [pc, #524]	; (80078dc <_strtod_l+0xbf4>)
 80076ce:	4a85      	ldr	r2, [pc, #532]	; (80078e4 <_strtod_l+0xbfc>)
 80076d0:	4019      	ands	r1, r3
 80076d2:	4291      	cmp	r1, r2
 80076d4:	4682      	mov	sl, r0
 80076d6:	d960      	bls.n	800779a <_strtod_l+0xab2>
 80076d8:	ee18 3a90 	vmov	r3, s17
 80076dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d104      	bne.n	80076ee <_strtod_l+0xa06>
 80076e4:	ee18 3a10 	vmov	r3, s16
 80076e8:	3301      	adds	r3, #1
 80076ea:	f43f ad45 	beq.w	8007178 <_strtod_l+0x490>
 80076ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80078f0 <_strtod_l+0xc08>
 80076f2:	f04f 3aff 	mov.w	sl, #4294967295
 80076f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076f8:	4620      	mov	r0, r4
 80076fa:	f001 fbe7 	bl	8008ecc <_Bfree>
 80076fe:	9905      	ldr	r1, [sp, #20]
 8007700:	4620      	mov	r0, r4
 8007702:	f001 fbe3 	bl	8008ecc <_Bfree>
 8007706:	4631      	mov	r1, r6
 8007708:	4620      	mov	r0, r4
 800770a:	f001 fbdf 	bl	8008ecc <_Bfree>
 800770e:	4629      	mov	r1, r5
 8007710:	4620      	mov	r0, r4
 8007712:	f001 fbdb 	bl	8008ecc <_Bfree>
 8007716:	e61a      	b.n	800734e <_strtod_l+0x666>
 8007718:	f1ba 0f00 	cmp.w	sl, #0
 800771c:	d11b      	bne.n	8007756 <_strtod_l+0xa6e>
 800771e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007722:	b9f3      	cbnz	r3, 8007762 <_strtod_l+0xa7a>
 8007724:	4b6c      	ldr	r3, [pc, #432]	; (80078d8 <_strtod_l+0xbf0>)
 8007726:	2200      	movs	r2, #0
 8007728:	4640      	mov	r0, r8
 800772a:	4649      	mov	r1, r9
 800772c:	f7f9 f9d6 	bl	8000adc <__aeabi_dcmplt>
 8007730:	b9d0      	cbnz	r0, 8007768 <_strtod_l+0xa80>
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	4b6c      	ldr	r3, [pc, #432]	; (80078e8 <_strtod_l+0xc00>)
 8007738:	2200      	movs	r2, #0
 800773a:	f7f8 ff5d 	bl	80005f8 <__aeabi_dmul>
 800773e:	4680      	mov	r8, r0
 8007740:	4689      	mov	r9, r1
 8007742:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007746:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800774a:	9315      	str	r3, [sp, #84]	; 0x54
 800774c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007750:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007754:	e79d      	b.n	8007692 <_strtod_l+0x9aa>
 8007756:	f1ba 0f01 	cmp.w	sl, #1
 800775a:	d102      	bne.n	8007762 <_strtod_l+0xa7a>
 800775c:	2f00      	cmp	r7, #0
 800775e:	f43f ad83 	beq.w	8007268 <_strtod_l+0x580>
 8007762:	4b62      	ldr	r3, [pc, #392]	; (80078ec <_strtod_l+0xc04>)
 8007764:	2200      	movs	r2, #0
 8007766:	e78e      	b.n	8007686 <_strtod_l+0x99e>
 8007768:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80078e8 <_strtod_l+0xc00>
 800776c:	f04f 0800 	mov.w	r8, #0
 8007770:	e7e7      	b.n	8007742 <_strtod_l+0xa5a>
 8007772:	4b5d      	ldr	r3, [pc, #372]	; (80078e8 <_strtod_l+0xc00>)
 8007774:	4640      	mov	r0, r8
 8007776:	4649      	mov	r1, r9
 8007778:	2200      	movs	r2, #0
 800777a:	f7f8 ff3d 	bl	80005f8 <__aeabi_dmul>
 800777e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007780:	4680      	mov	r8, r0
 8007782:	4689      	mov	r9, r1
 8007784:	b933      	cbnz	r3, 8007794 <_strtod_l+0xaac>
 8007786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800778a:	900e      	str	r0, [sp, #56]	; 0x38
 800778c:	930f      	str	r3, [sp, #60]	; 0x3c
 800778e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007792:	e7dd      	b.n	8007750 <_strtod_l+0xa68>
 8007794:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007798:	e7f9      	b.n	800778e <_strtod_l+0xaa6>
 800779a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1a8      	bne.n	80076f6 <_strtod_l+0xa0e>
 80077a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077aa:	0d1b      	lsrs	r3, r3, #20
 80077ac:	051b      	lsls	r3, r3, #20
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d1a1      	bne.n	80076f6 <_strtod_l+0xa0e>
 80077b2:	4640      	mov	r0, r8
 80077b4:	4649      	mov	r1, r9
 80077b6:	f7f9 fbf1 	bl	8000f9c <__aeabi_d2lz>
 80077ba:	f7f8 feef 	bl	800059c <__aeabi_l2d>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4640      	mov	r0, r8
 80077c4:	4649      	mov	r1, r9
 80077c6:	f7f8 fd5f 	bl	8000288 <__aeabi_dsub>
 80077ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077d0:	ea43 030a 	orr.w	r3, r3, sl
 80077d4:	4313      	orrs	r3, r2
 80077d6:	4680      	mov	r8, r0
 80077d8:	4689      	mov	r9, r1
 80077da:	d055      	beq.n	8007888 <_strtod_l+0xba0>
 80077dc:	a336      	add	r3, pc, #216	; (adr r3, 80078b8 <_strtod_l+0xbd0>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f9 f97b 	bl	8000adc <__aeabi_dcmplt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f47f acd0 	bne.w	800718c <_strtod_l+0x4a4>
 80077ec:	a334      	add	r3, pc, #208	; (adr r3, 80078c0 <_strtod_l+0xbd8>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	f7f9 f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	f43f af7b 	beq.w	80076f6 <_strtod_l+0xa0e>
 8007800:	e4c4      	b.n	800718c <_strtod_l+0x4a4>
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	b333      	cbz	r3, 8007854 <_strtod_l+0xb6c>
 8007806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007808:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800780c:	d822      	bhi.n	8007854 <_strtod_l+0xb6c>
 800780e:	a32e      	add	r3, pc, #184	; (adr r3, 80078c8 <_strtod_l+0xbe0>)
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f9 f96a 	bl	8000af0 <__aeabi_dcmple>
 800781c:	b1a0      	cbz	r0, 8007848 <_strtod_l+0xb60>
 800781e:	4649      	mov	r1, r9
 8007820:	4640      	mov	r0, r8
 8007822:	f7f9 f9c1 	bl	8000ba8 <__aeabi_d2uiz>
 8007826:	2801      	cmp	r0, #1
 8007828:	bf38      	it	cc
 800782a:	2001      	movcc	r0, #1
 800782c:	f7f8 fe6a 	bl	8000504 <__aeabi_ui2d>
 8007830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007832:	4680      	mov	r8, r0
 8007834:	4689      	mov	r9, r1
 8007836:	bb23      	cbnz	r3, 8007882 <_strtod_l+0xb9a>
 8007838:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800783c:	9010      	str	r0, [sp, #64]	; 0x40
 800783e:	9311      	str	r3, [sp, #68]	; 0x44
 8007840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007844:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800784c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	9309      	str	r3, [sp, #36]	; 0x24
 8007854:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007858:	eeb0 0a48 	vmov.f32	s0, s16
 800785c:	eef0 0a68 	vmov.f32	s1, s17
 8007860:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007864:	f001 fe64 	bl	8009530 <__ulp>
 8007868:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800786c:	ec53 2b10 	vmov	r2, r3, d0
 8007870:	f7f8 fec2 	bl	80005f8 <__aeabi_dmul>
 8007874:	ec53 2b18 	vmov	r2, r3, d8
 8007878:	f7f8 fd08 	bl	800028c <__adddf3>
 800787c:	4682      	mov	sl, r0
 800787e:	468b      	mov	fp, r1
 8007880:	e78d      	b.n	800779e <_strtod_l+0xab6>
 8007882:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007886:	e7db      	b.n	8007840 <_strtod_l+0xb58>
 8007888:	a311      	add	r3, pc, #68	; (adr r3, 80078d0 <_strtod_l+0xbe8>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f9 f925 	bl	8000adc <__aeabi_dcmplt>
 8007892:	e7b2      	b.n	80077fa <_strtod_l+0xb12>
 8007894:	2300      	movs	r3, #0
 8007896:	930a      	str	r3, [sp, #40]	; 0x28
 8007898:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800789a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	f7ff ba6b 	b.w	8006d78 <_strtod_l+0x90>
 80078a2:	2a65      	cmp	r2, #101	; 0x65
 80078a4:	f43f ab5f 	beq.w	8006f66 <_strtod_l+0x27e>
 80078a8:	2a45      	cmp	r2, #69	; 0x45
 80078aa:	f43f ab5c 	beq.w	8006f66 <_strtod_l+0x27e>
 80078ae:	2301      	movs	r3, #1
 80078b0:	f7ff bb94 	b.w	8006fdc <_strtod_l+0x2f4>
 80078b4:	f3af 8000 	nop.w
 80078b8:	94a03595 	.word	0x94a03595
 80078bc:	3fdfffff 	.word	0x3fdfffff
 80078c0:	35afe535 	.word	0x35afe535
 80078c4:	3fe00000 	.word	0x3fe00000
 80078c8:	ffc00000 	.word	0xffc00000
 80078cc:	41dfffff 	.word	0x41dfffff
 80078d0:	94a03595 	.word	0x94a03595
 80078d4:	3fcfffff 	.word	0x3fcfffff
 80078d8:	3ff00000 	.word	0x3ff00000
 80078dc:	7ff00000 	.word	0x7ff00000
 80078e0:	7fe00000 	.word	0x7fe00000
 80078e4:	7c9fffff 	.word	0x7c9fffff
 80078e8:	3fe00000 	.word	0x3fe00000
 80078ec:	bff00000 	.word	0xbff00000
 80078f0:	7fefffff 	.word	0x7fefffff

080078f4 <_strtod_r>:
 80078f4:	4b01      	ldr	r3, [pc, #4]	; (80078fc <_strtod_r+0x8>)
 80078f6:	f7ff b9f7 	b.w	8006ce8 <_strtod_l>
 80078fa:	bf00      	nop
 80078fc:	2000008c 	.word	0x2000008c

08007900 <strtod>:
 8007900:	460a      	mov	r2, r1
 8007902:	4601      	mov	r1, r0
 8007904:	4802      	ldr	r0, [pc, #8]	; (8007910 <strtod+0x10>)
 8007906:	4b03      	ldr	r3, [pc, #12]	; (8007914 <strtod+0x14>)
 8007908:	6800      	ldr	r0, [r0, #0]
 800790a:	f7ff b9ed 	b.w	8006ce8 <_strtod_l>
 800790e:	bf00      	nop
 8007910:	20000024 	.word	0x20000024
 8007914:	2000008c 	.word	0x2000008c

08007918 <_strtol_l.constprop.0>:
 8007918:	2b01      	cmp	r3, #1
 800791a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791e:	d001      	beq.n	8007924 <_strtol_l.constprop.0+0xc>
 8007920:	2b24      	cmp	r3, #36	; 0x24
 8007922:	d906      	bls.n	8007932 <_strtol_l.constprop.0+0x1a>
 8007924:	f7fe fac6 	bl	8005eb4 <__errno>
 8007928:	2316      	movs	r3, #22
 800792a:	6003      	str	r3, [r0, #0]
 800792c:	2000      	movs	r0, #0
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a18 <_strtol_l.constprop.0+0x100>
 8007936:	460d      	mov	r5, r1
 8007938:	462e      	mov	r6, r5
 800793a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800793e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007942:	f017 0708 	ands.w	r7, r7, #8
 8007946:	d1f7      	bne.n	8007938 <_strtol_l.constprop.0+0x20>
 8007948:	2c2d      	cmp	r4, #45	; 0x2d
 800794a:	d132      	bne.n	80079b2 <_strtol_l.constprop.0+0x9a>
 800794c:	782c      	ldrb	r4, [r5, #0]
 800794e:	2701      	movs	r7, #1
 8007950:	1cb5      	adds	r5, r6, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d05b      	beq.n	8007a0e <_strtol_l.constprop.0+0xf6>
 8007956:	2b10      	cmp	r3, #16
 8007958:	d109      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 800795a:	2c30      	cmp	r4, #48	; 0x30
 800795c:	d107      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 800795e:	782c      	ldrb	r4, [r5, #0]
 8007960:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007964:	2c58      	cmp	r4, #88	; 0x58
 8007966:	d14d      	bne.n	8007a04 <_strtol_l.constprop.0+0xec>
 8007968:	786c      	ldrb	r4, [r5, #1]
 800796a:	2310      	movs	r3, #16
 800796c:	3502      	adds	r5, #2
 800796e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007972:	f108 38ff 	add.w	r8, r8, #4294967295
 8007976:	f04f 0c00 	mov.w	ip, #0
 800797a:	fbb8 f9f3 	udiv	r9, r8, r3
 800797e:	4666      	mov	r6, ip
 8007980:	fb03 8a19 	mls	sl, r3, r9, r8
 8007984:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007988:	f1be 0f09 	cmp.w	lr, #9
 800798c:	d816      	bhi.n	80079bc <_strtol_l.constprop.0+0xa4>
 800798e:	4674      	mov	r4, lr
 8007990:	42a3      	cmp	r3, r4
 8007992:	dd24      	ble.n	80079de <_strtol_l.constprop.0+0xc6>
 8007994:	f1bc 0f00 	cmp.w	ip, #0
 8007998:	db1e      	blt.n	80079d8 <_strtol_l.constprop.0+0xc0>
 800799a:	45b1      	cmp	r9, r6
 800799c:	d31c      	bcc.n	80079d8 <_strtol_l.constprop.0+0xc0>
 800799e:	d101      	bne.n	80079a4 <_strtol_l.constprop.0+0x8c>
 80079a0:	45a2      	cmp	sl, r4
 80079a2:	db19      	blt.n	80079d8 <_strtol_l.constprop.0+0xc0>
 80079a4:	fb06 4603 	mla	r6, r6, r3, r4
 80079a8:	f04f 0c01 	mov.w	ip, #1
 80079ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079b0:	e7e8      	b.n	8007984 <_strtol_l.constprop.0+0x6c>
 80079b2:	2c2b      	cmp	r4, #43	; 0x2b
 80079b4:	bf04      	itt	eq
 80079b6:	782c      	ldrbeq	r4, [r5, #0]
 80079b8:	1cb5      	addeq	r5, r6, #2
 80079ba:	e7ca      	b.n	8007952 <_strtol_l.constprop.0+0x3a>
 80079bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079c0:	f1be 0f19 	cmp.w	lr, #25
 80079c4:	d801      	bhi.n	80079ca <_strtol_l.constprop.0+0xb2>
 80079c6:	3c37      	subs	r4, #55	; 0x37
 80079c8:	e7e2      	b.n	8007990 <_strtol_l.constprop.0+0x78>
 80079ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079ce:	f1be 0f19 	cmp.w	lr, #25
 80079d2:	d804      	bhi.n	80079de <_strtol_l.constprop.0+0xc6>
 80079d4:	3c57      	subs	r4, #87	; 0x57
 80079d6:	e7db      	b.n	8007990 <_strtol_l.constprop.0+0x78>
 80079d8:	f04f 3cff 	mov.w	ip, #4294967295
 80079dc:	e7e6      	b.n	80079ac <_strtol_l.constprop.0+0x94>
 80079de:	f1bc 0f00 	cmp.w	ip, #0
 80079e2:	da05      	bge.n	80079f0 <_strtol_l.constprop.0+0xd8>
 80079e4:	2322      	movs	r3, #34	; 0x22
 80079e6:	6003      	str	r3, [r0, #0]
 80079e8:	4646      	mov	r6, r8
 80079ea:	b942      	cbnz	r2, 80079fe <_strtol_l.constprop.0+0xe6>
 80079ec:	4630      	mov	r0, r6
 80079ee:	e79e      	b.n	800792e <_strtol_l.constprop.0+0x16>
 80079f0:	b107      	cbz	r7, 80079f4 <_strtol_l.constprop.0+0xdc>
 80079f2:	4276      	negs	r6, r6
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d0f9      	beq.n	80079ec <_strtol_l.constprop.0+0xd4>
 80079f8:	f1bc 0f00 	cmp.w	ip, #0
 80079fc:	d000      	beq.n	8007a00 <_strtol_l.constprop.0+0xe8>
 80079fe:	1e69      	subs	r1, r5, #1
 8007a00:	6011      	str	r1, [r2, #0]
 8007a02:	e7f3      	b.n	80079ec <_strtol_l.constprop.0+0xd4>
 8007a04:	2430      	movs	r4, #48	; 0x30
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1b1      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	e7af      	b.n	800796e <_strtol_l.constprop.0+0x56>
 8007a0e:	2c30      	cmp	r4, #48	; 0x30
 8007a10:	d0a5      	beq.n	800795e <_strtol_l.constprop.0+0x46>
 8007a12:	230a      	movs	r3, #10
 8007a14:	e7ab      	b.n	800796e <_strtol_l.constprop.0+0x56>
 8007a16:	bf00      	nop
 8007a18:	0800a999 	.word	0x0800a999

08007a1c <_strtol_r>:
 8007a1c:	f7ff bf7c 	b.w	8007918 <_strtol_l.constprop.0>

08007a20 <quorem>:
 8007a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	6903      	ldr	r3, [r0, #16]
 8007a26:	690c      	ldr	r4, [r1, #16]
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	4607      	mov	r7, r0
 8007a2c:	f2c0 8081 	blt.w	8007b32 <quorem+0x112>
 8007a30:	3c01      	subs	r4, #1
 8007a32:	f101 0814 	add.w	r8, r1, #20
 8007a36:	f100 0514 	add.w	r5, r0, #20
 8007a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a58:	d331      	bcc.n	8007abe <quorem+0x9e>
 8007a5a:	f04f 0e00 	mov.w	lr, #0
 8007a5e:	4640      	mov	r0, r8
 8007a60:	46ac      	mov	ip, r5
 8007a62:	46f2      	mov	sl, lr
 8007a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a68:	b293      	uxth	r3, r2
 8007a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ebaa 0303 	sub.w	r3, sl, r3
 8007a78:	f8dc a000 	ldr.w	sl, [ip]
 8007a7c:	0c12      	lsrs	r2, r2, #16
 8007a7e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a82:	fb06 e202 	mla	r2, r6, r2, lr
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	9b00      	ldr	r3, [sp, #0]
 8007a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a8e:	b292      	uxth	r2, r2
 8007a90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a98:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a9c:	4581      	cmp	r9, r0
 8007a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8007aa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aaa:	d2db      	bcs.n	8007a64 <quorem+0x44>
 8007aac:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ab0:	b92b      	cbnz	r3, 8007abe <quorem+0x9e>
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	d32e      	bcc.n	8007b1a <quorem+0xfa>
 8007abc:	613c      	str	r4, [r7, #16]
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f001 fc90 	bl	80093e4 <__mcmp>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	db24      	blt.n	8007b12 <quorem+0xf2>
 8007ac8:	3601      	adds	r6, #1
 8007aca:	4628      	mov	r0, r5
 8007acc:	f04f 0c00 	mov.w	ip, #0
 8007ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ad8:	b293      	uxth	r3, r2
 8007ada:	ebac 0303 	sub.w	r3, ip, r3
 8007ade:	0c12      	lsrs	r2, r2, #16
 8007ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007af2:	45c1      	cmp	r9, r8
 8007af4:	f840 3b04 	str.w	r3, [r0], #4
 8007af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007afc:	d2e8      	bcs.n	8007ad0 <quorem+0xb0>
 8007afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b06:	b922      	cbnz	r2, 8007b12 <quorem+0xf2>
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	429d      	cmp	r5, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	d30a      	bcc.n	8007b26 <quorem+0x106>
 8007b10:	613c      	str	r4, [r7, #16]
 8007b12:	4630      	mov	r0, r6
 8007b14:	b003      	add	sp, #12
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	6812      	ldr	r2, [r2, #0]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	d1cc      	bne.n	8007abc <quorem+0x9c>
 8007b22:	3c01      	subs	r4, #1
 8007b24:	e7c7      	b.n	8007ab6 <quorem+0x96>
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	d1f0      	bne.n	8007b10 <quorem+0xf0>
 8007b2e:	3c01      	subs	r4, #1
 8007b30:	e7eb      	b.n	8007b0a <quorem+0xea>
 8007b32:	2000      	movs	r0, #0
 8007b34:	e7ee      	b.n	8007b14 <quorem+0xf4>
	...

08007b38 <_dtoa_r>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	ed2d 8b04 	vpush	{d8-d9}
 8007b40:	ec57 6b10 	vmov	r6, r7, d0
 8007b44:	b093      	sub	sp, #76	; 0x4c
 8007b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b4c:	9106      	str	r1, [sp, #24]
 8007b4e:	ee10 aa10 	vmov	sl, s0
 8007b52:	4604      	mov	r4, r0
 8007b54:	9209      	str	r2, [sp, #36]	; 0x24
 8007b56:	930c      	str	r3, [sp, #48]	; 0x30
 8007b58:	46bb      	mov	fp, r7
 8007b5a:	b975      	cbnz	r5, 8007b7a <_dtoa_r+0x42>
 8007b5c:	2010      	movs	r0, #16
 8007b5e:	f001 f94d 	bl	8008dfc <malloc>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6260      	str	r0, [r4, #36]	; 0x24
 8007b66:	b920      	cbnz	r0, 8007b72 <_dtoa_r+0x3a>
 8007b68:	4ba7      	ldr	r3, [pc, #668]	; (8007e08 <_dtoa_r+0x2d0>)
 8007b6a:	21ea      	movs	r1, #234	; 0xea
 8007b6c:	48a7      	ldr	r0, [pc, #668]	; (8007e0c <_dtoa_r+0x2d4>)
 8007b6e:	f002 f8bd 	bl	8009cec <__assert_func>
 8007b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b76:	6005      	str	r5, [r0, #0]
 8007b78:	60c5      	str	r5, [r0, #12]
 8007b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7c:	6819      	ldr	r1, [r3, #0]
 8007b7e:	b151      	cbz	r1, 8007b96 <_dtoa_r+0x5e>
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	604a      	str	r2, [r1, #4]
 8007b84:	2301      	movs	r3, #1
 8007b86:	4093      	lsls	r3, r2
 8007b88:	608b      	str	r3, [r1, #8]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f001 f99e 	bl	8008ecc <_Bfree>
 8007b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	1e3b      	subs	r3, r7, #0
 8007b98:	bfaa      	itet	ge
 8007b9a:	2300      	movge	r3, #0
 8007b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ba0:	f8c8 3000 	strge.w	r3, [r8]
 8007ba4:	4b9a      	ldr	r3, [pc, #616]	; (8007e10 <_dtoa_r+0x2d8>)
 8007ba6:	bfbc      	itt	lt
 8007ba8:	2201      	movlt	r2, #1
 8007baa:	f8c8 2000 	strlt.w	r2, [r8]
 8007bae:	ea33 030b 	bics.w	r3, r3, fp
 8007bb2:	d11b      	bne.n	8007bec <_dtoa_r+0xb4>
 8007bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bc0:	4333      	orrs	r3, r6
 8007bc2:	f000 8592 	beq.w	80086ea <_dtoa_r+0xbb2>
 8007bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc8:	b963      	cbnz	r3, 8007be4 <_dtoa_r+0xac>
 8007bca:	4b92      	ldr	r3, [pc, #584]	; (8007e14 <_dtoa_r+0x2dc>)
 8007bcc:	e022      	b.n	8007c14 <_dtoa_r+0xdc>
 8007bce:	4b92      	ldr	r3, [pc, #584]	; (8007e18 <_dtoa_r+0x2e0>)
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	9801      	ldr	r0, [sp, #4]
 8007bda:	b013      	add	sp, #76	; 0x4c
 8007bdc:	ecbd 8b04 	vpop	{d8-d9}
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	4b8b      	ldr	r3, [pc, #556]	; (8007e14 <_dtoa_r+0x2dc>)
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	3303      	adds	r3, #3
 8007bea:	e7f3      	b.n	8007bd4 <_dtoa_r+0x9c>
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4650      	mov	r0, sl
 8007bf2:	4659      	mov	r1, fp
 8007bf4:	f7f8 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bf8:	ec4b ab19 	vmov	d9, sl, fp
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	b158      	cbz	r0, 8007c18 <_dtoa_r+0xe0>
 8007c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c02:	2301      	movs	r3, #1
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 856b 	beq.w	80086e4 <_dtoa_r+0xbac>
 8007c0e:	4883      	ldr	r0, [pc, #524]	; (8007e1c <_dtoa_r+0x2e4>)
 8007c10:	6018      	str	r0, [r3, #0]
 8007c12:	1e43      	subs	r3, r0, #1
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	e7df      	b.n	8007bd8 <_dtoa_r+0xa0>
 8007c18:	ec4b ab10 	vmov	d0, sl, fp
 8007c1c:	aa10      	add	r2, sp, #64	; 0x40
 8007c1e:	a911      	add	r1, sp, #68	; 0x44
 8007c20:	4620      	mov	r0, r4
 8007c22:	f001 fd01 	bl	8009628 <__d2b>
 8007c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c2a:	ee08 0a10 	vmov	s16, r0
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	f000 8084 	beq.w	8007d3c <_dtoa_r+0x204>
 8007c34:	ee19 3a90 	vmov	r3, s19
 8007c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c40:	4656      	mov	r6, sl
 8007c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c4e:	4b74      	ldr	r3, [pc, #464]	; (8007e20 <_dtoa_r+0x2e8>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	4630      	mov	r0, r6
 8007c54:	4639      	mov	r1, r7
 8007c56:	f7f8 fb17 	bl	8000288 <__aeabi_dsub>
 8007c5a:	a365      	add	r3, pc, #404	; (adr r3, 8007df0 <_dtoa_r+0x2b8>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f7f8 fcca 	bl	80005f8 <__aeabi_dmul>
 8007c64:	a364      	add	r3, pc, #400	; (adr r3, 8007df8 <_dtoa_r+0x2c0>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fb0f 	bl	800028c <__adddf3>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	4628      	mov	r0, r5
 8007c72:	460f      	mov	r7, r1
 8007c74:	f7f8 fc56 	bl	8000524 <__aeabi_i2d>
 8007c78:	a361      	add	r3, pc, #388	; (adr r3, 8007e00 <_dtoa_r+0x2c8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fcbb 	bl	80005f8 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 faff 	bl	800028c <__adddf3>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460f      	mov	r7, r1
 8007c92:	f7f8 ff61 	bl	8000b58 <__aeabi_d2iz>
 8007c96:	2200      	movs	r2, #0
 8007c98:	9000      	str	r0, [sp, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 ff1c 	bl	8000adc <__aeabi_dcmplt>
 8007ca4:	b150      	cbz	r0, 8007cbc <_dtoa_r+0x184>
 8007ca6:	9800      	ldr	r0, [sp, #0]
 8007ca8:	f7f8 fc3c 	bl	8000524 <__aeabi_i2d>
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	f7f8 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb4:	b910      	cbnz	r0, 8007cbc <_dtoa_r+0x184>
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	2b16      	cmp	r3, #22
 8007cc0:	d85a      	bhi.n	8007d78 <_dtoa_r+0x240>
 8007cc2:	9a00      	ldr	r2, [sp, #0]
 8007cc4:	4b57      	ldr	r3, [pc, #348]	; (8007e24 <_dtoa_r+0x2ec>)
 8007cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	ec51 0b19 	vmov	r0, r1, d9
 8007cd2:	f7f8 ff03 	bl	8000adc <__aeabi_dcmplt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d050      	beq.n	8007d7c <_dtoa_r+0x244>
 8007cda:	9b00      	ldr	r3, [sp, #0]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ce6:	1b5d      	subs	r5, r3, r5
 8007ce8:	1e6b      	subs	r3, r5, #1
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	bf45      	ittet	mi
 8007cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cf2:	9304      	strmi	r3, [sp, #16]
 8007cf4:	2300      	movpl	r3, #0
 8007cf6:	2300      	movmi	r3, #0
 8007cf8:	bf4c      	ite	mi
 8007cfa:	9305      	strmi	r3, [sp, #20]
 8007cfc:	9304      	strpl	r3, [sp, #16]
 8007cfe:	9b00      	ldr	r3, [sp, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	db3d      	blt.n	8007d80 <_dtoa_r+0x248>
 8007d04:	9b05      	ldr	r3, [sp, #20]
 8007d06:	9a00      	ldr	r2, [sp, #0]
 8007d08:	920a      	str	r2, [sp, #40]	; 0x28
 8007d0a:	4413      	add	r3, r2
 8007d0c:	9305      	str	r3, [sp, #20]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9307      	str	r3, [sp, #28]
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	f200 8089 	bhi.w	8007e2c <_dtoa_r+0x2f4>
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	bfc4      	itt	gt
 8007d1e:	3b04      	subgt	r3, #4
 8007d20:	9306      	strgt	r3, [sp, #24]
 8007d22:	9b06      	ldr	r3, [sp, #24]
 8007d24:	f1a3 0302 	sub.w	r3, r3, #2
 8007d28:	bfcc      	ite	gt
 8007d2a:	2500      	movgt	r5, #0
 8007d2c:	2501      	movle	r5, #1
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	f200 8087 	bhi.w	8007e42 <_dtoa_r+0x30a>
 8007d34:	e8df f003 	tbb	[pc, r3]
 8007d38:	59383a2d 	.word	0x59383a2d
 8007d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d40:	441d      	add	r5, r3
 8007d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	bfc1      	itttt	gt
 8007d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d5a:	bfda      	itte	le
 8007d5c:	f1c3 0320 	rsble	r3, r3, #32
 8007d60:	fa06 f003 	lslle.w	r0, r6, r3
 8007d64:	4318      	orrgt	r0, r3
 8007d66:	f7f8 fbcd 	bl	8000504 <__aeabi_ui2d>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d72:	3d01      	subs	r5, #1
 8007d74:	930e      	str	r3, [sp, #56]	; 0x38
 8007d76:	e76a      	b.n	8007c4e <_dtoa_r+0x116>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e7b2      	b.n	8007ce2 <_dtoa_r+0x1aa>
 8007d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d7e:	e7b1      	b.n	8007ce4 <_dtoa_r+0x1ac>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	9a00      	ldr	r2, [sp, #0]
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	4253      	negs	r3, r2
 8007d8a:	9307      	str	r3, [sp, #28]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d90:	e7bf      	b.n	8007d12 <_dtoa_r+0x1da>
 8007d92:	2300      	movs	r3, #0
 8007d94:	9308      	str	r3, [sp, #32]
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dc55      	bgt.n	8007e48 <_dtoa_r+0x310>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007da2:	461a      	mov	r2, r3
 8007da4:	9209      	str	r2, [sp, #36]	; 0x24
 8007da6:	e00c      	b.n	8007dc2 <_dtoa_r+0x28a>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e7f3      	b.n	8007d94 <_dtoa_r+0x25c>
 8007dac:	2300      	movs	r3, #0
 8007dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	9b00      	ldr	r3, [sp, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	3301      	adds	r3, #1
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	bfb8      	it	lt
 8007dc0:	2301      	movlt	r3, #1
 8007dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	6042      	str	r2, [r0, #4]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	f102 0614 	add.w	r6, r2, #20
 8007dce:	429e      	cmp	r6, r3
 8007dd0:	6841      	ldr	r1, [r0, #4]
 8007dd2:	d93d      	bls.n	8007e50 <_dtoa_r+0x318>
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f001 f839 	bl	8008e4c <_Balloc>
 8007dda:	9001      	str	r0, [sp, #4]
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d13b      	bne.n	8007e58 <_dtoa_r+0x320>
 8007de0:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <_dtoa_r+0x2f0>)
 8007de2:	4602      	mov	r2, r0
 8007de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007de8:	e6c0      	b.n	8007b6c <_dtoa_r+0x34>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e7df      	b.n	8007dae <_dtoa_r+0x276>
 8007dee:	bf00      	nop
 8007df0:	636f4361 	.word	0x636f4361
 8007df4:	3fd287a7 	.word	0x3fd287a7
 8007df8:	8b60c8b3 	.word	0x8b60c8b3
 8007dfc:	3fc68a28 	.word	0x3fc68a28
 8007e00:	509f79fb 	.word	0x509f79fb
 8007e04:	3fd34413 	.word	0x3fd34413
 8007e08:	0800ab3d 	.word	0x0800ab3d
 8007e0c:	0800ab54 	.word	0x0800ab54
 8007e10:	7ff00000 	.word	0x7ff00000
 8007e14:	0800ab39 	.word	0x0800ab39
 8007e18:	0800ab30 	.word	0x0800ab30
 8007e1c:	0800aab1 	.word	0x0800aab1
 8007e20:	3ff80000 	.word	0x3ff80000
 8007e24:	0800acc0 	.word	0x0800acc0
 8007e28:	0800abaf 	.word	0x0800abaf
 8007e2c:	2501      	movs	r5, #1
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9306      	str	r3, [sp, #24]
 8007e32:	9508      	str	r5, [sp, #32]
 8007e34:	f04f 33ff 	mov.w	r3, #4294967295
 8007e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2312      	movs	r3, #18
 8007e40:	e7b0      	b.n	8007da4 <_dtoa_r+0x26c>
 8007e42:	2301      	movs	r3, #1
 8007e44:	9308      	str	r3, [sp, #32]
 8007e46:	e7f5      	b.n	8007e34 <_dtoa_r+0x2fc>
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e4e:	e7b8      	b.n	8007dc2 <_dtoa_r+0x28a>
 8007e50:	3101      	adds	r1, #1
 8007e52:	6041      	str	r1, [r0, #4]
 8007e54:	0052      	lsls	r2, r2, #1
 8007e56:	e7b8      	b.n	8007dca <_dtoa_r+0x292>
 8007e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	2b0e      	cmp	r3, #14
 8007e62:	f200 809d 	bhi.w	8007fa0 <_dtoa_r+0x468>
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	f000 809a 	beq.w	8007fa0 <_dtoa_r+0x468>
 8007e6c:	9b00      	ldr	r3, [sp, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dd32      	ble.n	8007ed8 <_dtoa_r+0x3a0>
 8007e72:	4ab7      	ldr	r2, [pc, #732]	; (8008150 <_dtoa_r+0x618>)
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e80:	9b00      	ldr	r3, [sp, #0]
 8007e82:	05d8      	lsls	r0, r3, #23
 8007e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e88:	d516      	bpl.n	8007eb8 <_dtoa_r+0x380>
 8007e8a:	4bb2      	ldr	r3, [pc, #712]	; (8008154 <_dtoa_r+0x61c>)
 8007e8c:	ec51 0b19 	vmov	r0, r1, d9
 8007e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e94:	f7f8 fcda 	bl	800084c <__aeabi_ddiv>
 8007e98:	f007 070f 	and.w	r7, r7, #15
 8007e9c:	4682      	mov	sl, r0
 8007e9e:	468b      	mov	fp, r1
 8007ea0:	2503      	movs	r5, #3
 8007ea2:	4eac      	ldr	r6, [pc, #688]	; (8008154 <_dtoa_r+0x61c>)
 8007ea4:	b957      	cbnz	r7, 8007ebc <_dtoa_r+0x384>
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4650      	mov	r0, sl
 8007eac:	4659      	mov	r1, fp
 8007eae:	f7f8 fccd 	bl	800084c <__aeabi_ddiv>
 8007eb2:	4682      	mov	sl, r0
 8007eb4:	468b      	mov	fp, r1
 8007eb6:	e028      	b.n	8007f0a <_dtoa_r+0x3d2>
 8007eb8:	2502      	movs	r5, #2
 8007eba:	e7f2      	b.n	8007ea2 <_dtoa_r+0x36a>
 8007ebc:	07f9      	lsls	r1, r7, #31
 8007ebe:	d508      	bpl.n	8007ed2 <_dtoa_r+0x39a>
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ec8:	f7f8 fb96 	bl	80005f8 <__aeabi_dmul>
 8007ecc:	3501      	adds	r5, #1
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4689      	mov	r9, r1
 8007ed2:	107f      	asrs	r7, r7, #1
 8007ed4:	3608      	adds	r6, #8
 8007ed6:	e7e5      	b.n	8007ea4 <_dtoa_r+0x36c>
 8007ed8:	f000 809b 	beq.w	8008012 <_dtoa_r+0x4da>
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	4f9d      	ldr	r7, [pc, #628]	; (8008154 <_dtoa_r+0x61c>)
 8007ee0:	425e      	negs	r6, r3
 8007ee2:	4b9b      	ldr	r3, [pc, #620]	; (8008150 <_dtoa_r+0x618>)
 8007ee4:	f006 020f 	and.w	r2, r6, #15
 8007ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	ec51 0b19 	vmov	r0, r1, d9
 8007ef4:	f7f8 fb80 	bl	80005f8 <__aeabi_dmul>
 8007ef8:	1136      	asrs	r6, r6, #4
 8007efa:	4682      	mov	sl, r0
 8007efc:	468b      	mov	fp, r1
 8007efe:	2300      	movs	r3, #0
 8007f00:	2502      	movs	r5, #2
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	d17a      	bne.n	8007ffc <_dtoa_r+0x4c4>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1d3      	bne.n	8007eb2 <_dtoa_r+0x37a>
 8007f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8082 	beq.w	8008016 <_dtoa_r+0x4de>
 8007f12:	4b91      	ldr	r3, [pc, #580]	; (8008158 <_dtoa_r+0x620>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	4650      	mov	r0, sl
 8007f18:	4659      	mov	r1, fp
 8007f1a:	f7f8 fddf 	bl	8000adc <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d079      	beq.n	8008016 <_dtoa_r+0x4de>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d076      	beq.n	8008016 <_dtoa_r+0x4de>
 8007f28:	9b02      	ldr	r3, [sp, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dd36      	ble.n	8007f9c <_dtoa_r+0x464>
 8007f2e:	9b00      	ldr	r3, [sp, #0]
 8007f30:	4650      	mov	r0, sl
 8007f32:	4659      	mov	r1, fp
 8007f34:	1e5f      	subs	r7, r3, #1
 8007f36:	2200      	movs	r2, #0
 8007f38:	4b88      	ldr	r3, [pc, #544]	; (800815c <_dtoa_r+0x624>)
 8007f3a:	f7f8 fb5d 	bl	80005f8 <__aeabi_dmul>
 8007f3e:	9e02      	ldr	r6, [sp, #8]
 8007f40:	4682      	mov	sl, r0
 8007f42:	468b      	mov	fp, r1
 8007f44:	3501      	adds	r5, #1
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7f8 faec 	bl	8000524 <__aeabi_i2d>
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	465b      	mov	r3, fp
 8007f50:	f7f8 fb52 	bl	80005f8 <__aeabi_dmul>
 8007f54:	4b82      	ldr	r3, [pc, #520]	; (8008160 <_dtoa_r+0x628>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	f7f8 f998 	bl	800028c <__adddf3>
 8007f5c:	46d0      	mov	r8, sl
 8007f5e:	46d9      	mov	r9, fp
 8007f60:	4682      	mov	sl, r0
 8007f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	d158      	bne.n	800801c <_dtoa_r+0x4e4>
 8007f6a:	4b7e      	ldr	r3, [pc, #504]	; (8008164 <_dtoa_r+0x62c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f7f8 f989 	bl	8000288 <__aeabi_dsub>
 8007f76:	4652      	mov	r2, sl
 8007f78:	465b      	mov	r3, fp
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	f7f8 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	f040 8295 	bne.w	80084b2 <_dtoa_r+0x97a>
 8007f88:	4652      	mov	r2, sl
 8007f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 fda3 	bl	8000adc <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f040 8289 	bne.w	80084ae <_dtoa_r+0x976>
 8007f9c:	ec5b ab19 	vmov	sl, fp, d9
 8007fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f2c0 8148 	blt.w	8008238 <_dtoa_r+0x700>
 8007fa8:	9a00      	ldr	r2, [sp, #0]
 8007faa:	2a0e      	cmp	r2, #14
 8007fac:	f300 8144 	bgt.w	8008238 <_dtoa_r+0x700>
 8007fb0:	4b67      	ldr	r3, [pc, #412]	; (8008150 <_dtoa_r+0x618>)
 8007fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f280 80d5 	bge.w	800816c <_dtoa_r+0x634>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f300 80d1 	bgt.w	800816c <_dtoa_r+0x634>
 8007fca:	f040 826f 	bne.w	80084ac <_dtoa_r+0x974>
 8007fce:	4b65      	ldr	r3, [pc, #404]	; (8008164 <_dtoa_r+0x62c>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 fb0f 	bl	80005f8 <__aeabi_dmul>
 8007fda:	4652      	mov	r2, sl
 8007fdc:	465b      	mov	r3, fp
 8007fde:	f7f8 fd91 	bl	8000b04 <__aeabi_dcmpge>
 8007fe2:	9e03      	ldr	r6, [sp, #12]
 8007fe4:	4637      	mov	r7, r6
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f040 8245 	bne.w	8008476 <_dtoa_r+0x93e>
 8007fec:	9d01      	ldr	r5, [sp, #4]
 8007fee:	2331      	movs	r3, #49	; 0x31
 8007ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ff4:	9b00      	ldr	r3, [sp, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	e240      	b.n	800847e <_dtoa_r+0x946>
 8007ffc:	07f2      	lsls	r2, r6, #31
 8007ffe:	d505      	bpl.n	800800c <_dtoa_r+0x4d4>
 8008000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	3501      	adds	r5, #1
 800800a:	2301      	movs	r3, #1
 800800c:	1076      	asrs	r6, r6, #1
 800800e:	3708      	adds	r7, #8
 8008010:	e777      	b.n	8007f02 <_dtoa_r+0x3ca>
 8008012:	2502      	movs	r5, #2
 8008014:	e779      	b.n	8007f0a <_dtoa_r+0x3d2>
 8008016:	9f00      	ldr	r7, [sp, #0]
 8008018:	9e03      	ldr	r6, [sp, #12]
 800801a:	e794      	b.n	8007f46 <_dtoa_r+0x40e>
 800801c:	9901      	ldr	r1, [sp, #4]
 800801e:	4b4c      	ldr	r3, [pc, #304]	; (8008150 <_dtoa_r+0x618>)
 8008020:	4431      	add	r1, r6
 8008022:	910d      	str	r1, [sp, #52]	; 0x34
 8008024:	9908      	ldr	r1, [sp, #32]
 8008026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800802a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800802e:	2900      	cmp	r1, #0
 8008030:	d043      	beq.n	80080ba <_dtoa_r+0x582>
 8008032:	494d      	ldr	r1, [pc, #308]	; (8008168 <_dtoa_r+0x630>)
 8008034:	2000      	movs	r0, #0
 8008036:	f7f8 fc09 	bl	800084c <__aeabi_ddiv>
 800803a:	4652      	mov	r2, sl
 800803c:	465b      	mov	r3, fp
 800803e:	f7f8 f923 	bl	8000288 <__aeabi_dsub>
 8008042:	9d01      	ldr	r5, [sp, #4]
 8008044:	4682      	mov	sl, r0
 8008046:	468b      	mov	fp, r1
 8008048:	4649      	mov	r1, r9
 800804a:	4640      	mov	r0, r8
 800804c:	f7f8 fd84 	bl	8000b58 <__aeabi_d2iz>
 8008050:	4606      	mov	r6, r0
 8008052:	f7f8 fa67 	bl	8000524 <__aeabi_i2d>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 f913 	bl	8000288 <__aeabi_dsub>
 8008062:	3630      	adds	r6, #48	; 0x30
 8008064:	f805 6b01 	strb.w	r6, [r5], #1
 8008068:	4652      	mov	r2, sl
 800806a:	465b      	mov	r3, fp
 800806c:	4680      	mov	r8, r0
 800806e:	4689      	mov	r9, r1
 8008070:	f7f8 fd34 	bl	8000adc <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	d163      	bne.n	8008140 <_dtoa_r+0x608>
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	4936      	ldr	r1, [pc, #216]	; (8008158 <_dtoa_r+0x620>)
 800807e:	2000      	movs	r0, #0
 8008080:	f7f8 f902 	bl	8000288 <__aeabi_dsub>
 8008084:	4652      	mov	r2, sl
 8008086:	465b      	mov	r3, fp
 8008088:	f7f8 fd28 	bl	8000adc <__aeabi_dcmplt>
 800808c:	2800      	cmp	r0, #0
 800808e:	f040 80b5 	bne.w	80081fc <_dtoa_r+0x6c4>
 8008092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008094:	429d      	cmp	r5, r3
 8008096:	d081      	beq.n	8007f9c <_dtoa_r+0x464>
 8008098:	4b30      	ldr	r3, [pc, #192]	; (800815c <_dtoa_r+0x624>)
 800809a:	2200      	movs	r2, #0
 800809c:	4650      	mov	r0, sl
 800809e:	4659      	mov	r1, fp
 80080a0:	f7f8 faaa 	bl	80005f8 <__aeabi_dmul>
 80080a4:	4b2d      	ldr	r3, [pc, #180]	; (800815c <_dtoa_r+0x624>)
 80080a6:	4682      	mov	sl, r0
 80080a8:	468b      	mov	fp, r1
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	2200      	movs	r2, #0
 80080b0:	f7f8 faa2 	bl	80005f8 <__aeabi_dmul>
 80080b4:	4680      	mov	r8, r0
 80080b6:	4689      	mov	r9, r1
 80080b8:	e7c6      	b.n	8008048 <_dtoa_r+0x510>
 80080ba:	4650      	mov	r0, sl
 80080bc:	4659      	mov	r1, fp
 80080be:	f7f8 fa9b 	bl	80005f8 <__aeabi_dmul>
 80080c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080c4:	9d01      	ldr	r5, [sp, #4]
 80080c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080c8:	4682      	mov	sl, r0
 80080ca:	468b      	mov	fp, r1
 80080cc:	4649      	mov	r1, r9
 80080ce:	4640      	mov	r0, r8
 80080d0:	f7f8 fd42 	bl	8000b58 <__aeabi_d2iz>
 80080d4:	4606      	mov	r6, r0
 80080d6:	f7f8 fa25 	bl	8000524 <__aeabi_i2d>
 80080da:	3630      	adds	r6, #48	; 0x30
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4640      	mov	r0, r8
 80080e2:	4649      	mov	r1, r9
 80080e4:	f7f8 f8d0 	bl	8000288 <__aeabi_dsub>
 80080e8:	f805 6b01 	strb.w	r6, [r5], #1
 80080ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ee:	429d      	cmp	r5, r3
 80080f0:	4680      	mov	r8, r0
 80080f2:	4689      	mov	r9, r1
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	d124      	bne.n	8008144 <_dtoa_r+0x60c>
 80080fa:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <_dtoa_r+0x630>)
 80080fc:	4650      	mov	r0, sl
 80080fe:	4659      	mov	r1, fp
 8008100:	f7f8 f8c4 	bl	800028c <__adddf3>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4640      	mov	r0, r8
 800810a:	4649      	mov	r1, r9
 800810c:	f7f8 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	d173      	bne.n	80081fc <_dtoa_r+0x6c4>
 8008114:	4652      	mov	r2, sl
 8008116:	465b      	mov	r3, fp
 8008118:	4913      	ldr	r1, [pc, #76]	; (8008168 <_dtoa_r+0x630>)
 800811a:	2000      	movs	r0, #0
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4640      	mov	r0, r8
 8008126:	4649      	mov	r1, r9
 8008128:	f7f8 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800812c:	2800      	cmp	r0, #0
 800812e:	f43f af35 	beq.w	8007f9c <_dtoa_r+0x464>
 8008132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008134:	1e6b      	subs	r3, r5, #1
 8008136:	930f      	str	r3, [sp, #60]	; 0x3c
 8008138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800813c:	2b30      	cmp	r3, #48	; 0x30
 800813e:	d0f8      	beq.n	8008132 <_dtoa_r+0x5fa>
 8008140:	9700      	str	r7, [sp, #0]
 8008142:	e049      	b.n	80081d8 <_dtoa_r+0x6a0>
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <_dtoa_r+0x624>)
 8008146:	f7f8 fa57 	bl	80005f8 <__aeabi_dmul>
 800814a:	4680      	mov	r8, r0
 800814c:	4689      	mov	r9, r1
 800814e:	e7bd      	b.n	80080cc <_dtoa_r+0x594>
 8008150:	0800acc0 	.word	0x0800acc0
 8008154:	0800ac98 	.word	0x0800ac98
 8008158:	3ff00000 	.word	0x3ff00000
 800815c:	40240000 	.word	0x40240000
 8008160:	401c0000 	.word	0x401c0000
 8008164:	40140000 	.word	0x40140000
 8008168:	3fe00000 	.word	0x3fe00000
 800816c:	9d01      	ldr	r5, [sp, #4]
 800816e:	4656      	mov	r6, sl
 8008170:	465f      	mov	r7, fp
 8008172:	4642      	mov	r2, r8
 8008174:	464b      	mov	r3, r9
 8008176:	4630      	mov	r0, r6
 8008178:	4639      	mov	r1, r7
 800817a:	f7f8 fb67 	bl	800084c <__aeabi_ddiv>
 800817e:	f7f8 fceb 	bl	8000b58 <__aeabi_d2iz>
 8008182:	4682      	mov	sl, r0
 8008184:	f7f8 f9ce 	bl	8000524 <__aeabi_i2d>
 8008188:	4642      	mov	r2, r8
 800818a:	464b      	mov	r3, r9
 800818c:	f7f8 fa34 	bl	80005f8 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4630      	mov	r0, r6
 8008196:	4639      	mov	r1, r7
 8008198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800819c:	f7f8 f874 	bl	8000288 <__aeabi_dsub>
 80081a0:	f805 6b01 	strb.w	r6, [r5], #1
 80081a4:	9e01      	ldr	r6, [sp, #4]
 80081a6:	9f03      	ldr	r7, [sp, #12]
 80081a8:	1bae      	subs	r6, r5, r6
 80081aa:	42b7      	cmp	r7, r6
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	d135      	bne.n	800821e <_dtoa_r+0x6e6>
 80081b2:	f7f8 f86b 	bl	800028c <__adddf3>
 80081b6:	4642      	mov	r2, r8
 80081b8:	464b      	mov	r3, r9
 80081ba:	4606      	mov	r6, r0
 80081bc:	460f      	mov	r7, r1
 80081be:	f7f8 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80081c2:	b9d0      	cbnz	r0, 80081fa <_dtoa_r+0x6c2>
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80081d0:	b110      	cbz	r0, 80081d8 <_dtoa_r+0x6a0>
 80081d2:	f01a 0f01 	tst.w	sl, #1
 80081d6:	d110      	bne.n	80081fa <_dtoa_r+0x6c2>
 80081d8:	4620      	mov	r0, r4
 80081da:	ee18 1a10 	vmov	r1, s16
 80081de:	f000 fe75 	bl	8008ecc <_Bfree>
 80081e2:	2300      	movs	r3, #0
 80081e4:	9800      	ldr	r0, [sp, #0]
 80081e6:	702b      	strb	r3, [r5, #0]
 80081e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ea:	3001      	adds	r0, #1
 80081ec:	6018      	str	r0, [r3, #0]
 80081ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f43f acf1 	beq.w	8007bd8 <_dtoa_r+0xa0>
 80081f6:	601d      	str	r5, [r3, #0]
 80081f8:	e4ee      	b.n	8007bd8 <_dtoa_r+0xa0>
 80081fa:	9f00      	ldr	r7, [sp, #0]
 80081fc:	462b      	mov	r3, r5
 80081fe:	461d      	mov	r5, r3
 8008200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008204:	2a39      	cmp	r2, #57	; 0x39
 8008206:	d106      	bne.n	8008216 <_dtoa_r+0x6de>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d1f7      	bne.n	80081fe <_dtoa_r+0x6c6>
 800820e:	9901      	ldr	r1, [sp, #4]
 8008210:	2230      	movs	r2, #48	; 0x30
 8008212:	3701      	adds	r7, #1
 8008214:	700a      	strb	r2, [r1, #0]
 8008216:	781a      	ldrb	r2, [r3, #0]
 8008218:	3201      	adds	r2, #1
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	e790      	b.n	8008140 <_dtoa_r+0x608>
 800821e:	4ba6      	ldr	r3, [pc, #664]	; (80084b8 <_dtoa_r+0x980>)
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 f9e9 	bl	80005f8 <__aeabi_dmul>
 8008226:	2200      	movs	r2, #0
 8008228:	2300      	movs	r3, #0
 800822a:	4606      	mov	r6, r0
 800822c:	460f      	mov	r7, r1
 800822e:	f7f8 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008232:	2800      	cmp	r0, #0
 8008234:	d09d      	beq.n	8008172 <_dtoa_r+0x63a>
 8008236:	e7cf      	b.n	80081d8 <_dtoa_r+0x6a0>
 8008238:	9a08      	ldr	r2, [sp, #32]
 800823a:	2a00      	cmp	r2, #0
 800823c:	f000 80d7 	beq.w	80083ee <_dtoa_r+0x8b6>
 8008240:	9a06      	ldr	r2, [sp, #24]
 8008242:	2a01      	cmp	r2, #1
 8008244:	f300 80ba 	bgt.w	80083bc <_dtoa_r+0x884>
 8008248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800824a:	2a00      	cmp	r2, #0
 800824c:	f000 80b2 	beq.w	80083b4 <_dtoa_r+0x87c>
 8008250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008254:	9e07      	ldr	r6, [sp, #28]
 8008256:	9d04      	ldr	r5, [sp, #16]
 8008258:	9a04      	ldr	r2, [sp, #16]
 800825a:	441a      	add	r2, r3
 800825c:	9204      	str	r2, [sp, #16]
 800825e:	9a05      	ldr	r2, [sp, #20]
 8008260:	2101      	movs	r1, #1
 8008262:	441a      	add	r2, r3
 8008264:	4620      	mov	r0, r4
 8008266:	9205      	str	r2, [sp, #20]
 8008268:	f000 ff32 	bl	80090d0 <__i2b>
 800826c:	4607      	mov	r7, r0
 800826e:	2d00      	cmp	r5, #0
 8008270:	dd0c      	ble.n	800828c <_dtoa_r+0x754>
 8008272:	9b05      	ldr	r3, [sp, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	dd09      	ble.n	800828c <_dtoa_r+0x754>
 8008278:	42ab      	cmp	r3, r5
 800827a:	9a04      	ldr	r2, [sp, #16]
 800827c:	bfa8      	it	ge
 800827e:	462b      	movge	r3, r5
 8008280:	1ad2      	subs	r2, r2, r3
 8008282:	9204      	str	r2, [sp, #16]
 8008284:	9a05      	ldr	r2, [sp, #20]
 8008286:	1aed      	subs	r5, r5, r3
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	b31b      	cbz	r3, 80082d8 <_dtoa_r+0x7a0>
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80af 	beq.w	80083f6 <_dtoa_r+0x8be>
 8008298:	2e00      	cmp	r6, #0
 800829a:	dd13      	ble.n	80082c4 <_dtoa_r+0x78c>
 800829c:	4639      	mov	r1, r7
 800829e:	4632      	mov	r2, r6
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 ffd5 	bl	8009250 <__pow5mult>
 80082a6:	ee18 2a10 	vmov	r2, s16
 80082aa:	4601      	mov	r1, r0
 80082ac:	4607      	mov	r7, r0
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 ff24 	bl	80090fc <__multiply>
 80082b4:	ee18 1a10 	vmov	r1, s16
 80082b8:	4680      	mov	r8, r0
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fe06 	bl	8008ecc <_Bfree>
 80082c0:	ee08 8a10 	vmov	s16, r8
 80082c4:	9b07      	ldr	r3, [sp, #28]
 80082c6:	1b9a      	subs	r2, r3, r6
 80082c8:	d006      	beq.n	80082d8 <_dtoa_r+0x7a0>
 80082ca:	ee18 1a10 	vmov	r1, s16
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 ffbe 	bl	8009250 <__pow5mult>
 80082d4:	ee08 0a10 	vmov	s16, r0
 80082d8:	2101      	movs	r1, #1
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fef8 	bl	80090d0 <__i2b>
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	4606      	mov	r6, r0
 80082e6:	f340 8088 	ble.w	80083fa <_dtoa_r+0x8c2>
 80082ea:	461a      	mov	r2, r3
 80082ec:	4601      	mov	r1, r0
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 ffae 	bl	8009250 <__pow5mult>
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	4606      	mov	r6, r0
 80082fa:	f340 8081 	ble.w	8008400 <_dtoa_r+0x8c8>
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	6933      	ldr	r3, [r6, #16]
 8008304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008308:	6918      	ldr	r0, [r3, #16]
 800830a:	f000 fe91 	bl	8009030 <__hi0bits>
 800830e:	f1c0 0020 	rsb	r0, r0, #32
 8008312:	9b05      	ldr	r3, [sp, #20]
 8008314:	4418      	add	r0, r3
 8008316:	f010 001f 	ands.w	r0, r0, #31
 800831a:	f000 8092 	beq.w	8008442 <_dtoa_r+0x90a>
 800831e:	f1c0 0320 	rsb	r3, r0, #32
 8008322:	2b04      	cmp	r3, #4
 8008324:	f340 808a 	ble.w	800843c <_dtoa_r+0x904>
 8008328:	f1c0 001c 	rsb	r0, r0, #28
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	4403      	add	r3, r0
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	4403      	add	r3, r0
 8008336:	4405      	add	r5, r0
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	dd07      	ble.n	8008350 <_dtoa_r+0x818>
 8008340:	ee18 1a10 	vmov	r1, s16
 8008344:	461a      	mov	r2, r3
 8008346:	4620      	mov	r0, r4
 8008348:	f000 ffdc 	bl	8009304 <__lshift>
 800834c:	ee08 0a10 	vmov	s16, r0
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd05      	ble.n	8008362 <_dtoa_r+0x82a>
 8008356:	4631      	mov	r1, r6
 8008358:	461a      	mov	r2, r3
 800835a:	4620      	mov	r0, r4
 800835c:	f000 ffd2 	bl	8009304 <__lshift>
 8008360:	4606      	mov	r6, r0
 8008362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d06e      	beq.n	8008446 <_dtoa_r+0x90e>
 8008368:	ee18 0a10 	vmov	r0, s16
 800836c:	4631      	mov	r1, r6
 800836e:	f001 f839 	bl	80093e4 <__mcmp>
 8008372:	2800      	cmp	r0, #0
 8008374:	da67      	bge.n	8008446 <_dtoa_r+0x90e>
 8008376:	9b00      	ldr	r3, [sp, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	ee18 1a10 	vmov	r1, s16
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	220a      	movs	r2, #10
 8008382:	2300      	movs	r3, #0
 8008384:	4620      	mov	r0, r4
 8008386:	f000 fdc3 	bl	8008f10 <__multadd>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	ee08 0a10 	vmov	s16, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 81b1 	beq.w	80086f8 <_dtoa_r+0xbc0>
 8008396:	2300      	movs	r3, #0
 8008398:	4639      	mov	r1, r7
 800839a:	220a      	movs	r2, #10
 800839c:	4620      	mov	r0, r4
 800839e:	f000 fdb7 	bl	8008f10 <__multadd>
 80083a2:	9b02      	ldr	r3, [sp, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	4607      	mov	r7, r0
 80083a8:	f300 808e 	bgt.w	80084c8 <_dtoa_r+0x990>
 80083ac:	9b06      	ldr	r3, [sp, #24]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	dc51      	bgt.n	8008456 <_dtoa_r+0x91e>
 80083b2:	e089      	b.n	80084c8 <_dtoa_r+0x990>
 80083b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083ba:	e74b      	b.n	8008254 <_dtoa_r+0x71c>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	1e5e      	subs	r6, r3, #1
 80083c0:	9b07      	ldr	r3, [sp, #28]
 80083c2:	42b3      	cmp	r3, r6
 80083c4:	bfbf      	itttt	lt
 80083c6:	9b07      	ldrlt	r3, [sp, #28]
 80083c8:	9607      	strlt	r6, [sp, #28]
 80083ca:	1af2      	sublt	r2, r6, r3
 80083cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083ce:	bfb6      	itet	lt
 80083d0:	189b      	addlt	r3, r3, r2
 80083d2:	1b9e      	subge	r6, r3, r6
 80083d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	bfb8      	it	lt
 80083da:	2600      	movlt	r6, #0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bfb7      	itett	lt
 80083e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083e8:	1a9d      	sublt	r5, r3, r2
 80083ea:	2300      	movlt	r3, #0
 80083ec:	e734      	b.n	8008258 <_dtoa_r+0x720>
 80083ee:	9e07      	ldr	r6, [sp, #28]
 80083f0:	9d04      	ldr	r5, [sp, #16]
 80083f2:	9f08      	ldr	r7, [sp, #32]
 80083f4:	e73b      	b.n	800826e <_dtoa_r+0x736>
 80083f6:	9a07      	ldr	r2, [sp, #28]
 80083f8:	e767      	b.n	80082ca <_dtoa_r+0x792>
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	dc18      	bgt.n	8008432 <_dtoa_r+0x8fa>
 8008400:	f1ba 0f00 	cmp.w	sl, #0
 8008404:	d115      	bne.n	8008432 <_dtoa_r+0x8fa>
 8008406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800840a:	b993      	cbnz	r3, 8008432 <_dtoa_r+0x8fa>
 800840c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008410:	0d1b      	lsrs	r3, r3, #20
 8008412:	051b      	lsls	r3, r3, #20
 8008414:	b183      	cbz	r3, 8008438 <_dtoa_r+0x900>
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	3301      	adds	r3, #1
 800841a:	9304      	str	r3, [sp, #16]
 800841c:	9b05      	ldr	r3, [sp, #20]
 800841e:	3301      	adds	r3, #1
 8008420:	9305      	str	r3, [sp, #20]
 8008422:	f04f 0801 	mov.w	r8, #1
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	2b00      	cmp	r3, #0
 800842a:	f47f af6a 	bne.w	8008302 <_dtoa_r+0x7ca>
 800842e:	2001      	movs	r0, #1
 8008430:	e76f      	b.n	8008312 <_dtoa_r+0x7da>
 8008432:	f04f 0800 	mov.w	r8, #0
 8008436:	e7f6      	b.n	8008426 <_dtoa_r+0x8ee>
 8008438:	4698      	mov	r8, r3
 800843a:	e7f4      	b.n	8008426 <_dtoa_r+0x8ee>
 800843c:	f43f af7d 	beq.w	800833a <_dtoa_r+0x802>
 8008440:	4618      	mov	r0, r3
 8008442:	301c      	adds	r0, #28
 8008444:	e772      	b.n	800832c <_dtoa_r+0x7f4>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc37      	bgt.n	80084bc <_dtoa_r+0x984>
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	2b02      	cmp	r3, #2
 8008450:	dd34      	ble.n	80084bc <_dtoa_r+0x984>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	9302      	str	r3, [sp, #8]
 8008456:	9b02      	ldr	r3, [sp, #8]
 8008458:	b96b      	cbnz	r3, 8008476 <_dtoa_r+0x93e>
 800845a:	4631      	mov	r1, r6
 800845c:	2205      	movs	r2, #5
 800845e:	4620      	mov	r0, r4
 8008460:	f000 fd56 	bl	8008f10 <__multadd>
 8008464:	4601      	mov	r1, r0
 8008466:	4606      	mov	r6, r0
 8008468:	ee18 0a10 	vmov	r0, s16
 800846c:	f000 ffba 	bl	80093e4 <__mcmp>
 8008470:	2800      	cmp	r0, #0
 8008472:	f73f adbb 	bgt.w	8007fec <_dtoa_r+0x4b4>
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	9d01      	ldr	r5, [sp, #4]
 800847a:	43db      	mvns	r3, r3
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	4631      	mov	r1, r6
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fd21 	bl	8008ecc <_Bfree>
 800848a:	2f00      	cmp	r7, #0
 800848c:	f43f aea4 	beq.w	80081d8 <_dtoa_r+0x6a0>
 8008490:	f1b8 0f00 	cmp.w	r8, #0
 8008494:	d005      	beq.n	80084a2 <_dtoa_r+0x96a>
 8008496:	45b8      	cmp	r8, r7
 8008498:	d003      	beq.n	80084a2 <_dtoa_r+0x96a>
 800849a:	4641      	mov	r1, r8
 800849c:	4620      	mov	r0, r4
 800849e:	f000 fd15 	bl	8008ecc <_Bfree>
 80084a2:	4639      	mov	r1, r7
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fd11 	bl	8008ecc <_Bfree>
 80084aa:	e695      	b.n	80081d8 <_dtoa_r+0x6a0>
 80084ac:	2600      	movs	r6, #0
 80084ae:	4637      	mov	r7, r6
 80084b0:	e7e1      	b.n	8008476 <_dtoa_r+0x93e>
 80084b2:	9700      	str	r7, [sp, #0]
 80084b4:	4637      	mov	r7, r6
 80084b6:	e599      	b.n	8007fec <_dtoa_r+0x4b4>
 80084b8:	40240000 	.word	0x40240000
 80084bc:	9b08      	ldr	r3, [sp, #32]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80ca 	beq.w	8008658 <_dtoa_r+0xb20>
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	9302      	str	r3, [sp, #8]
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	dd05      	ble.n	80084d8 <_dtoa_r+0x9a0>
 80084cc:	4639      	mov	r1, r7
 80084ce:	462a      	mov	r2, r5
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 ff17 	bl	8009304 <__lshift>
 80084d6:	4607      	mov	r7, r0
 80084d8:	f1b8 0f00 	cmp.w	r8, #0
 80084dc:	d05b      	beq.n	8008596 <_dtoa_r+0xa5e>
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fcb3 	bl	8008e4c <_Balloc>
 80084e6:	4605      	mov	r5, r0
 80084e8:	b928      	cbnz	r0, 80084f6 <_dtoa_r+0x9be>
 80084ea:	4b87      	ldr	r3, [pc, #540]	; (8008708 <_dtoa_r+0xbd0>)
 80084ec:	4602      	mov	r2, r0
 80084ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084f2:	f7ff bb3b 	b.w	8007b6c <_dtoa_r+0x34>
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	3202      	adds	r2, #2
 80084fa:	0092      	lsls	r2, r2, #2
 80084fc:	f107 010c 	add.w	r1, r7, #12
 8008500:	300c      	adds	r0, #12
 8008502:	f000 fc95 	bl	8008e30 <memcpy>
 8008506:	2201      	movs	r2, #1
 8008508:	4629      	mov	r1, r5
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fefa 	bl	8009304 <__lshift>
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	f103 0901 	add.w	r9, r3, #1
 8008516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800851a:	4413      	add	r3, r2
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	f00a 0301 	and.w	r3, sl, #1
 8008522:	46b8      	mov	r8, r7
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	4607      	mov	r7, r0
 8008528:	4631      	mov	r1, r6
 800852a:	ee18 0a10 	vmov	r0, s16
 800852e:	f7ff fa77 	bl	8007a20 <quorem>
 8008532:	4641      	mov	r1, r8
 8008534:	9002      	str	r0, [sp, #8]
 8008536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800853a:	ee18 0a10 	vmov	r0, s16
 800853e:	f000 ff51 	bl	80093e4 <__mcmp>
 8008542:	463a      	mov	r2, r7
 8008544:	9003      	str	r0, [sp, #12]
 8008546:	4631      	mov	r1, r6
 8008548:	4620      	mov	r0, r4
 800854a:	f000 ff67 	bl	800941c <__mdiff>
 800854e:	68c2      	ldr	r2, [r0, #12]
 8008550:	f109 3bff 	add.w	fp, r9, #4294967295
 8008554:	4605      	mov	r5, r0
 8008556:	bb02      	cbnz	r2, 800859a <_dtoa_r+0xa62>
 8008558:	4601      	mov	r1, r0
 800855a:	ee18 0a10 	vmov	r0, s16
 800855e:	f000 ff41 	bl	80093e4 <__mcmp>
 8008562:	4602      	mov	r2, r0
 8008564:	4629      	mov	r1, r5
 8008566:	4620      	mov	r0, r4
 8008568:	9207      	str	r2, [sp, #28]
 800856a:	f000 fcaf 	bl	8008ecc <_Bfree>
 800856e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008572:	ea43 0102 	orr.w	r1, r3, r2
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	430b      	orrs	r3, r1
 800857a:	464d      	mov	r5, r9
 800857c:	d10f      	bne.n	800859e <_dtoa_r+0xa66>
 800857e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008582:	d02a      	beq.n	80085da <_dtoa_r+0xaa2>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd02      	ble.n	8008590 <_dtoa_r+0xa58>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008590:	f88b a000 	strb.w	sl, [fp]
 8008594:	e775      	b.n	8008482 <_dtoa_r+0x94a>
 8008596:	4638      	mov	r0, r7
 8008598:	e7ba      	b.n	8008510 <_dtoa_r+0x9d8>
 800859a:	2201      	movs	r2, #1
 800859c:	e7e2      	b.n	8008564 <_dtoa_r+0xa2c>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	db04      	blt.n	80085ae <_dtoa_r+0xa76>
 80085a4:	9906      	ldr	r1, [sp, #24]
 80085a6:	430b      	orrs	r3, r1
 80085a8:	9904      	ldr	r1, [sp, #16]
 80085aa:	430b      	orrs	r3, r1
 80085ac:	d122      	bne.n	80085f4 <_dtoa_r+0xabc>
 80085ae:	2a00      	cmp	r2, #0
 80085b0:	ddee      	ble.n	8008590 <_dtoa_r+0xa58>
 80085b2:	ee18 1a10 	vmov	r1, s16
 80085b6:	2201      	movs	r2, #1
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fea3 	bl	8009304 <__lshift>
 80085be:	4631      	mov	r1, r6
 80085c0:	ee08 0a10 	vmov	s16, r0
 80085c4:	f000 ff0e 	bl	80093e4 <__mcmp>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	dc03      	bgt.n	80085d4 <_dtoa_r+0xa9c>
 80085cc:	d1e0      	bne.n	8008590 <_dtoa_r+0xa58>
 80085ce:	f01a 0f01 	tst.w	sl, #1
 80085d2:	d0dd      	beq.n	8008590 <_dtoa_r+0xa58>
 80085d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085d8:	d1d7      	bne.n	800858a <_dtoa_r+0xa52>
 80085da:	2339      	movs	r3, #57	; 0x39
 80085dc:	f88b 3000 	strb.w	r3, [fp]
 80085e0:	462b      	mov	r3, r5
 80085e2:	461d      	mov	r5, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085ea:	2a39      	cmp	r2, #57	; 0x39
 80085ec:	d071      	beq.n	80086d2 <_dtoa_r+0xb9a>
 80085ee:	3201      	adds	r2, #1
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	e746      	b.n	8008482 <_dtoa_r+0x94a>
 80085f4:	2a00      	cmp	r2, #0
 80085f6:	dd07      	ble.n	8008608 <_dtoa_r+0xad0>
 80085f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085fc:	d0ed      	beq.n	80085da <_dtoa_r+0xaa2>
 80085fe:	f10a 0301 	add.w	r3, sl, #1
 8008602:	f88b 3000 	strb.w	r3, [fp]
 8008606:	e73c      	b.n	8008482 <_dtoa_r+0x94a>
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800860e:	4599      	cmp	r9, r3
 8008610:	d047      	beq.n	80086a2 <_dtoa_r+0xb6a>
 8008612:	ee18 1a10 	vmov	r1, s16
 8008616:	2300      	movs	r3, #0
 8008618:	220a      	movs	r2, #10
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fc78 	bl	8008f10 <__multadd>
 8008620:	45b8      	cmp	r8, r7
 8008622:	ee08 0a10 	vmov	s16, r0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	f04f 020a 	mov.w	r2, #10
 800862e:	4641      	mov	r1, r8
 8008630:	4620      	mov	r0, r4
 8008632:	d106      	bne.n	8008642 <_dtoa_r+0xb0a>
 8008634:	f000 fc6c 	bl	8008f10 <__multadd>
 8008638:	4680      	mov	r8, r0
 800863a:	4607      	mov	r7, r0
 800863c:	f109 0901 	add.w	r9, r9, #1
 8008640:	e772      	b.n	8008528 <_dtoa_r+0x9f0>
 8008642:	f000 fc65 	bl	8008f10 <__multadd>
 8008646:	4639      	mov	r1, r7
 8008648:	4680      	mov	r8, r0
 800864a:	2300      	movs	r3, #0
 800864c:	220a      	movs	r2, #10
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fc5e 	bl	8008f10 <__multadd>
 8008654:	4607      	mov	r7, r0
 8008656:	e7f1      	b.n	800863c <_dtoa_r+0xb04>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	9d01      	ldr	r5, [sp, #4]
 800865e:	ee18 0a10 	vmov	r0, s16
 8008662:	4631      	mov	r1, r6
 8008664:	f7ff f9dc 	bl	8007a20 <quorem>
 8008668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	f805 ab01 	strb.w	sl, [r5], #1
 8008672:	1aea      	subs	r2, r5, r3
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	4293      	cmp	r3, r2
 8008678:	dd09      	ble.n	800868e <_dtoa_r+0xb56>
 800867a:	ee18 1a10 	vmov	r1, s16
 800867e:	2300      	movs	r3, #0
 8008680:	220a      	movs	r2, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fc44 	bl	8008f10 <__multadd>
 8008688:	ee08 0a10 	vmov	s16, r0
 800868c:	e7e7      	b.n	800865e <_dtoa_r+0xb26>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfc8      	it	gt
 8008694:	461d      	movgt	r5, r3
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	bfd8      	it	le
 800869a:	2501      	movle	r5, #1
 800869c:	441d      	add	r5, r3
 800869e:	f04f 0800 	mov.w	r8, #0
 80086a2:	ee18 1a10 	vmov	r1, s16
 80086a6:	2201      	movs	r2, #1
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fe2b 	bl	8009304 <__lshift>
 80086ae:	4631      	mov	r1, r6
 80086b0:	ee08 0a10 	vmov	s16, r0
 80086b4:	f000 fe96 	bl	80093e4 <__mcmp>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	dc91      	bgt.n	80085e0 <_dtoa_r+0xaa8>
 80086bc:	d102      	bne.n	80086c4 <_dtoa_r+0xb8c>
 80086be:	f01a 0f01 	tst.w	sl, #1
 80086c2:	d18d      	bne.n	80085e0 <_dtoa_r+0xaa8>
 80086c4:	462b      	mov	r3, r5
 80086c6:	461d      	mov	r5, r3
 80086c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086cc:	2a30      	cmp	r2, #48	; 0x30
 80086ce:	d0fa      	beq.n	80086c6 <_dtoa_r+0xb8e>
 80086d0:	e6d7      	b.n	8008482 <_dtoa_r+0x94a>
 80086d2:	9a01      	ldr	r2, [sp, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d184      	bne.n	80085e2 <_dtoa_r+0xaaa>
 80086d8:	9b00      	ldr	r3, [sp, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2331      	movs	r3, #49	; 0x31
 80086e0:	7013      	strb	r3, [r2, #0]
 80086e2:	e6ce      	b.n	8008482 <_dtoa_r+0x94a>
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <_dtoa_r+0xbd4>)
 80086e6:	f7ff ba95 	b.w	8007c14 <_dtoa_r+0xdc>
 80086ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f47f aa6e 	bne.w	8007bce <_dtoa_r+0x96>
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <_dtoa_r+0xbd8>)
 80086f4:	f7ff ba8e 	b.w	8007c14 <_dtoa_r+0xdc>
 80086f8:	9b02      	ldr	r3, [sp, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dcae      	bgt.n	800865c <_dtoa_r+0xb24>
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	2b02      	cmp	r3, #2
 8008702:	f73f aea8 	bgt.w	8008456 <_dtoa_r+0x91e>
 8008706:	e7a9      	b.n	800865c <_dtoa_r+0xb24>
 8008708:	0800abaf 	.word	0x0800abaf
 800870c:	0800aab0 	.word	0x0800aab0
 8008710:	0800ab30 	.word	0x0800ab30

08008714 <rshift>:
 8008714:	6903      	ldr	r3, [r0, #16]
 8008716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800871a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800871e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008722:	f100 0414 	add.w	r4, r0, #20
 8008726:	dd45      	ble.n	80087b4 <rshift+0xa0>
 8008728:	f011 011f 	ands.w	r1, r1, #31
 800872c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008734:	d10c      	bne.n	8008750 <rshift+0x3c>
 8008736:	f100 0710 	add.w	r7, r0, #16
 800873a:	4629      	mov	r1, r5
 800873c:	42b1      	cmp	r1, r6
 800873e:	d334      	bcc.n	80087aa <rshift+0x96>
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	1eea      	subs	r2, r5, #3
 8008746:	4296      	cmp	r6, r2
 8008748:	bf38      	it	cc
 800874a:	2300      	movcc	r3, #0
 800874c:	4423      	add	r3, r4
 800874e:	e015      	b.n	800877c <rshift+0x68>
 8008750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008754:	f1c1 0820 	rsb	r8, r1, #32
 8008758:	40cf      	lsrs	r7, r1
 800875a:	f105 0e04 	add.w	lr, r5, #4
 800875e:	46a1      	mov	r9, r4
 8008760:	4576      	cmp	r6, lr
 8008762:	46f4      	mov	ip, lr
 8008764:	d815      	bhi.n	8008792 <rshift+0x7e>
 8008766:	1a9a      	subs	r2, r3, r2
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	3a04      	subs	r2, #4
 800876c:	3501      	adds	r5, #1
 800876e:	42ae      	cmp	r6, r5
 8008770:	bf38      	it	cc
 8008772:	2200      	movcc	r2, #0
 8008774:	18a3      	adds	r3, r4, r2
 8008776:	50a7      	str	r7, [r4, r2]
 8008778:	b107      	cbz	r7, 800877c <rshift+0x68>
 800877a:	3304      	adds	r3, #4
 800877c:	1b1a      	subs	r2, r3, r4
 800877e:	42a3      	cmp	r3, r4
 8008780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008784:	bf08      	it	eq
 8008786:	2300      	moveq	r3, #0
 8008788:	6102      	str	r2, [r0, #16]
 800878a:	bf08      	it	eq
 800878c:	6143      	streq	r3, [r0, #20]
 800878e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008792:	f8dc c000 	ldr.w	ip, [ip]
 8008796:	fa0c fc08 	lsl.w	ip, ip, r8
 800879a:	ea4c 0707 	orr.w	r7, ip, r7
 800879e:	f849 7b04 	str.w	r7, [r9], #4
 80087a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087a6:	40cf      	lsrs	r7, r1
 80087a8:	e7da      	b.n	8008760 <rshift+0x4c>
 80087aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80087ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80087b2:	e7c3      	b.n	800873c <rshift+0x28>
 80087b4:	4623      	mov	r3, r4
 80087b6:	e7e1      	b.n	800877c <rshift+0x68>

080087b8 <__hexdig_fun>:
 80087b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087bc:	2b09      	cmp	r3, #9
 80087be:	d802      	bhi.n	80087c6 <__hexdig_fun+0xe>
 80087c0:	3820      	subs	r0, #32
 80087c2:	b2c0      	uxtb	r0, r0
 80087c4:	4770      	bx	lr
 80087c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d801      	bhi.n	80087d2 <__hexdig_fun+0x1a>
 80087ce:	3847      	subs	r0, #71	; 0x47
 80087d0:	e7f7      	b.n	80087c2 <__hexdig_fun+0xa>
 80087d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d801      	bhi.n	80087de <__hexdig_fun+0x26>
 80087da:	3827      	subs	r0, #39	; 0x27
 80087dc:	e7f1      	b.n	80087c2 <__hexdig_fun+0xa>
 80087de:	2000      	movs	r0, #0
 80087e0:	4770      	bx	lr
	...

080087e4 <__gethex>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	ed2d 8b02 	vpush	{d8}
 80087ec:	b089      	sub	sp, #36	; 0x24
 80087ee:	ee08 0a10 	vmov	s16, r0
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	4bb4      	ldr	r3, [pc, #720]	; (8008ac8 <__gethex+0x2e4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	4618      	mov	r0, r3
 80087fc:	468b      	mov	fp, r1
 80087fe:	4690      	mov	r8, r2
 8008800:	f7f7 fce6 	bl	80001d0 <strlen>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	f8db 2000 	ldr.w	r2, [fp]
 800880a:	4403      	add	r3, r0
 800880c:	4682      	mov	sl, r0
 800880e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	1c93      	adds	r3, r2, #2
 8008816:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800881a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800881e:	32fe      	adds	r2, #254	; 0xfe
 8008820:	18d1      	adds	r1, r2, r3
 8008822:	461f      	mov	r7, r3
 8008824:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008828:	9100      	str	r1, [sp, #0]
 800882a:	2830      	cmp	r0, #48	; 0x30
 800882c:	d0f8      	beq.n	8008820 <__gethex+0x3c>
 800882e:	f7ff ffc3 	bl	80087b8 <__hexdig_fun>
 8008832:	4604      	mov	r4, r0
 8008834:	2800      	cmp	r0, #0
 8008836:	d13a      	bne.n	80088ae <__gethex+0xca>
 8008838:	9901      	ldr	r1, [sp, #4]
 800883a:	4652      	mov	r2, sl
 800883c:	4638      	mov	r0, r7
 800883e:	f001 fa33 	bl	8009ca8 <strncmp>
 8008842:	4605      	mov	r5, r0
 8008844:	2800      	cmp	r0, #0
 8008846:	d168      	bne.n	800891a <__gethex+0x136>
 8008848:	f817 000a 	ldrb.w	r0, [r7, sl]
 800884c:	eb07 060a 	add.w	r6, r7, sl
 8008850:	f7ff ffb2 	bl	80087b8 <__hexdig_fun>
 8008854:	2800      	cmp	r0, #0
 8008856:	d062      	beq.n	800891e <__gethex+0x13a>
 8008858:	4633      	mov	r3, r6
 800885a:	7818      	ldrb	r0, [r3, #0]
 800885c:	2830      	cmp	r0, #48	; 0x30
 800885e:	461f      	mov	r7, r3
 8008860:	f103 0301 	add.w	r3, r3, #1
 8008864:	d0f9      	beq.n	800885a <__gethex+0x76>
 8008866:	f7ff ffa7 	bl	80087b8 <__hexdig_fun>
 800886a:	2301      	movs	r3, #1
 800886c:	fab0 f480 	clz	r4, r0
 8008870:	0964      	lsrs	r4, r4, #5
 8008872:	4635      	mov	r5, r6
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	463a      	mov	r2, r7
 8008878:	4616      	mov	r6, r2
 800887a:	3201      	adds	r2, #1
 800887c:	7830      	ldrb	r0, [r6, #0]
 800887e:	f7ff ff9b 	bl	80087b8 <__hexdig_fun>
 8008882:	2800      	cmp	r0, #0
 8008884:	d1f8      	bne.n	8008878 <__gethex+0x94>
 8008886:	9901      	ldr	r1, [sp, #4]
 8008888:	4652      	mov	r2, sl
 800888a:	4630      	mov	r0, r6
 800888c:	f001 fa0c 	bl	8009ca8 <strncmp>
 8008890:	b980      	cbnz	r0, 80088b4 <__gethex+0xd0>
 8008892:	b94d      	cbnz	r5, 80088a8 <__gethex+0xc4>
 8008894:	eb06 050a 	add.w	r5, r6, sl
 8008898:	462a      	mov	r2, r5
 800889a:	4616      	mov	r6, r2
 800889c:	3201      	adds	r2, #1
 800889e:	7830      	ldrb	r0, [r6, #0]
 80088a0:	f7ff ff8a 	bl	80087b8 <__hexdig_fun>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d1f8      	bne.n	800889a <__gethex+0xb6>
 80088a8:	1bad      	subs	r5, r5, r6
 80088aa:	00ad      	lsls	r5, r5, #2
 80088ac:	e004      	b.n	80088b8 <__gethex+0xd4>
 80088ae:	2400      	movs	r4, #0
 80088b0:	4625      	mov	r5, r4
 80088b2:	e7e0      	b.n	8008876 <__gethex+0x92>
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	d1f7      	bne.n	80088a8 <__gethex+0xc4>
 80088b8:	7833      	ldrb	r3, [r6, #0]
 80088ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088be:	2b50      	cmp	r3, #80	; 0x50
 80088c0:	d13b      	bne.n	800893a <__gethex+0x156>
 80088c2:	7873      	ldrb	r3, [r6, #1]
 80088c4:	2b2b      	cmp	r3, #43	; 0x2b
 80088c6:	d02c      	beq.n	8008922 <__gethex+0x13e>
 80088c8:	2b2d      	cmp	r3, #45	; 0x2d
 80088ca:	d02e      	beq.n	800892a <__gethex+0x146>
 80088cc:	1c71      	adds	r1, r6, #1
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	7808      	ldrb	r0, [r1, #0]
 80088d4:	f7ff ff70 	bl	80087b8 <__hexdig_fun>
 80088d8:	1e43      	subs	r3, r0, #1
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b18      	cmp	r3, #24
 80088de:	d82c      	bhi.n	800893a <__gethex+0x156>
 80088e0:	f1a0 0210 	sub.w	r2, r0, #16
 80088e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088e8:	f7ff ff66 	bl	80087b8 <__hexdig_fun>
 80088ec:	1e43      	subs	r3, r0, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b18      	cmp	r3, #24
 80088f2:	d91d      	bls.n	8008930 <__gethex+0x14c>
 80088f4:	f1b9 0f00 	cmp.w	r9, #0
 80088f8:	d000      	beq.n	80088fc <__gethex+0x118>
 80088fa:	4252      	negs	r2, r2
 80088fc:	4415      	add	r5, r2
 80088fe:	f8cb 1000 	str.w	r1, [fp]
 8008902:	b1e4      	cbz	r4, 800893e <__gethex+0x15a>
 8008904:	9b00      	ldr	r3, [sp, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	bf14      	ite	ne
 800890a:	2700      	movne	r7, #0
 800890c:	2706      	moveq	r7, #6
 800890e:	4638      	mov	r0, r7
 8008910:	b009      	add	sp, #36	; 0x24
 8008912:	ecbd 8b02 	vpop	{d8}
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	463e      	mov	r6, r7
 800891c:	4625      	mov	r5, r4
 800891e:	2401      	movs	r4, #1
 8008920:	e7ca      	b.n	80088b8 <__gethex+0xd4>
 8008922:	f04f 0900 	mov.w	r9, #0
 8008926:	1cb1      	adds	r1, r6, #2
 8008928:	e7d3      	b.n	80088d2 <__gethex+0xee>
 800892a:	f04f 0901 	mov.w	r9, #1
 800892e:	e7fa      	b.n	8008926 <__gethex+0x142>
 8008930:	230a      	movs	r3, #10
 8008932:	fb03 0202 	mla	r2, r3, r2, r0
 8008936:	3a10      	subs	r2, #16
 8008938:	e7d4      	b.n	80088e4 <__gethex+0x100>
 800893a:	4631      	mov	r1, r6
 800893c:	e7df      	b.n	80088fe <__gethex+0x11a>
 800893e:	1bf3      	subs	r3, r6, r7
 8008940:	3b01      	subs	r3, #1
 8008942:	4621      	mov	r1, r4
 8008944:	2b07      	cmp	r3, #7
 8008946:	dc0b      	bgt.n	8008960 <__gethex+0x17c>
 8008948:	ee18 0a10 	vmov	r0, s16
 800894c:	f000 fa7e 	bl	8008e4c <_Balloc>
 8008950:	4604      	mov	r4, r0
 8008952:	b940      	cbnz	r0, 8008966 <__gethex+0x182>
 8008954:	4b5d      	ldr	r3, [pc, #372]	; (8008acc <__gethex+0x2e8>)
 8008956:	4602      	mov	r2, r0
 8008958:	21de      	movs	r1, #222	; 0xde
 800895a:	485d      	ldr	r0, [pc, #372]	; (8008ad0 <__gethex+0x2ec>)
 800895c:	f001 f9c6 	bl	8009cec <__assert_func>
 8008960:	3101      	adds	r1, #1
 8008962:	105b      	asrs	r3, r3, #1
 8008964:	e7ee      	b.n	8008944 <__gethex+0x160>
 8008966:	f100 0914 	add.w	r9, r0, #20
 800896a:	f04f 0b00 	mov.w	fp, #0
 800896e:	f1ca 0301 	rsb	r3, sl, #1
 8008972:	f8cd 9008 	str.w	r9, [sp, #8]
 8008976:	f8cd b000 	str.w	fp, [sp]
 800897a:	9306      	str	r3, [sp, #24]
 800897c:	42b7      	cmp	r7, r6
 800897e:	d340      	bcc.n	8008a02 <__gethex+0x21e>
 8008980:	9802      	ldr	r0, [sp, #8]
 8008982:	9b00      	ldr	r3, [sp, #0]
 8008984:	f840 3b04 	str.w	r3, [r0], #4
 8008988:	eba0 0009 	sub.w	r0, r0, r9
 800898c:	1080      	asrs	r0, r0, #2
 800898e:	0146      	lsls	r6, r0, #5
 8008990:	6120      	str	r0, [r4, #16]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fb4c 	bl	8009030 <__hi0bits>
 8008998:	1a30      	subs	r0, r6, r0
 800899a:	f8d8 6000 	ldr.w	r6, [r8]
 800899e:	42b0      	cmp	r0, r6
 80089a0:	dd63      	ble.n	8008a6a <__gethex+0x286>
 80089a2:	1b87      	subs	r7, r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fef0 	bl	800978c <__any_on>
 80089ac:	4682      	mov	sl, r0
 80089ae:	b1a8      	cbz	r0, 80089dc <__gethex+0x1f8>
 80089b0:	1e7b      	subs	r3, r7, #1
 80089b2:	1159      	asrs	r1, r3, #5
 80089b4:	f003 021f 	and.w	r2, r3, #31
 80089b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80089bc:	f04f 0a01 	mov.w	sl, #1
 80089c0:	fa0a f202 	lsl.w	r2, sl, r2
 80089c4:	420a      	tst	r2, r1
 80089c6:	d009      	beq.n	80089dc <__gethex+0x1f8>
 80089c8:	4553      	cmp	r3, sl
 80089ca:	dd05      	ble.n	80089d8 <__gethex+0x1f4>
 80089cc:	1eb9      	subs	r1, r7, #2
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 fedc 	bl	800978c <__any_on>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d145      	bne.n	8008a64 <__gethex+0x280>
 80089d8:	f04f 0a02 	mov.w	sl, #2
 80089dc:	4639      	mov	r1, r7
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff fe98 	bl	8008714 <rshift>
 80089e4:	443d      	add	r5, r7
 80089e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089ea:	42ab      	cmp	r3, r5
 80089ec:	da4c      	bge.n	8008a88 <__gethex+0x2a4>
 80089ee:	ee18 0a10 	vmov	r0, s16
 80089f2:	4621      	mov	r1, r4
 80089f4:	f000 fa6a 	bl	8008ecc <_Bfree>
 80089f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089fa:	2300      	movs	r3, #0
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	27a3      	movs	r7, #163	; 0xa3
 8008a00:	e785      	b.n	800890e <__gethex+0x12a>
 8008a02:	1e73      	subs	r3, r6, #1
 8008a04:	9a05      	ldr	r2, [sp, #20]
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d019      	beq.n	8008a44 <__gethex+0x260>
 8008a10:	f1bb 0f20 	cmp.w	fp, #32
 8008a14:	d107      	bne.n	8008a26 <__gethex+0x242>
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	9a00      	ldr	r2, [sp, #0]
 8008a1a:	f843 2b04 	str.w	r2, [r3], #4
 8008a1e:	9302      	str	r3, [sp, #8]
 8008a20:	2300      	movs	r3, #0
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	469b      	mov	fp, r3
 8008a26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a2a:	f7ff fec5 	bl	80087b8 <__hexdig_fun>
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	f000 000f 	and.w	r0, r0, #15
 8008a34:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a38:	4303      	orrs	r3, r0
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	f10b 0b04 	add.w	fp, fp, #4
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	e00d      	b.n	8008a60 <__gethex+0x27c>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	9a06      	ldr	r2, [sp, #24]
 8008a48:	4413      	add	r3, r2
 8008a4a:	42bb      	cmp	r3, r7
 8008a4c:	d3e0      	bcc.n	8008a10 <__gethex+0x22c>
 8008a4e:	4618      	mov	r0, r3
 8008a50:	9901      	ldr	r1, [sp, #4]
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	4652      	mov	r2, sl
 8008a56:	f001 f927 	bl	8009ca8 <strncmp>
 8008a5a:	9b07      	ldr	r3, [sp, #28]
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d1d7      	bne.n	8008a10 <__gethex+0x22c>
 8008a60:	461e      	mov	r6, r3
 8008a62:	e78b      	b.n	800897c <__gethex+0x198>
 8008a64:	f04f 0a03 	mov.w	sl, #3
 8008a68:	e7b8      	b.n	80089dc <__gethex+0x1f8>
 8008a6a:	da0a      	bge.n	8008a82 <__gethex+0x29e>
 8008a6c:	1a37      	subs	r7, r6, r0
 8008a6e:	4621      	mov	r1, r4
 8008a70:	ee18 0a10 	vmov	r0, s16
 8008a74:	463a      	mov	r2, r7
 8008a76:	f000 fc45 	bl	8009304 <__lshift>
 8008a7a:	1bed      	subs	r5, r5, r7
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	f100 0914 	add.w	r9, r0, #20
 8008a82:	f04f 0a00 	mov.w	sl, #0
 8008a86:	e7ae      	b.n	80089e6 <__gethex+0x202>
 8008a88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a8c:	42a8      	cmp	r0, r5
 8008a8e:	dd72      	ble.n	8008b76 <__gethex+0x392>
 8008a90:	1b45      	subs	r5, r0, r5
 8008a92:	42ae      	cmp	r6, r5
 8008a94:	dc36      	bgt.n	8008b04 <__gethex+0x320>
 8008a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d02a      	beq.n	8008af4 <__gethex+0x310>
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d02c      	beq.n	8008afc <__gethex+0x318>
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d11c      	bne.n	8008ae0 <__gethex+0x2fc>
 8008aa6:	42ae      	cmp	r6, r5
 8008aa8:	d11a      	bne.n	8008ae0 <__gethex+0x2fc>
 8008aaa:	2e01      	cmp	r6, #1
 8008aac:	d112      	bne.n	8008ad4 <__gethex+0x2f0>
 8008aae:	9a04      	ldr	r2, [sp, #16]
 8008ab0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	f8c9 3000 	str.w	r3, [r9]
 8008abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ac0:	2762      	movs	r7, #98	; 0x62
 8008ac2:	601c      	str	r4, [r3, #0]
 8008ac4:	e723      	b.n	800890e <__gethex+0x12a>
 8008ac6:	bf00      	nop
 8008ac8:	0800ac28 	.word	0x0800ac28
 8008acc:	0800abaf 	.word	0x0800abaf
 8008ad0:	0800abc0 	.word	0x0800abc0
 8008ad4:	1e71      	subs	r1, r6, #1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 fe58 	bl	800978c <__any_on>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1e6      	bne.n	8008aae <__gethex+0x2ca>
 8008ae0:	ee18 0a10 	vmov	r0, s16
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f000 f9f1 	bl	8008ecc <_Bfree>
 8008aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008aec:	2300      	movs	r3, #0
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	2750      	movs	r7, #80	; 0x50
 8008af2:	e70c      	b.n	800890e <__gethex+0x12a>
 8008af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f2      	bne.n	8008ae0 <__gethex+0x2fc>
 8008afa:	e7d8      	b.n	8008aae <__gethex+0x2ca>
 8008afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1d5      	bne.n	8008aae <__gethex+0x2ca>
 8008b02:	e7ed      	b.n	8008ae0 <__gethex+0x2fc>
 8008b04:	1e6f      	subs	r7, r5, #1
 8008b06:	f1ba 0f00 	cmp.w	sl, #0
 8008b0a:	d131      	bne.n	8008b70 <__gethex+0x38c>
 8008b0c:	b127      	cbz	r7, 8008b18 <__gethex+0x334>
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fe3b 	bl	800978c <__any_on>
 8008b16:	4682      	mov	sl, r0
 8008b18:	117b      	asrs	r3, r7, #5
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b20:	f007 071f 	and.w	r7, r7, #31
 8008b24:	fa01 f707 	lsl.w	r7, r1, r7
 8008b28:	421f      	tst	r7, r3
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	bf18      	it	ne
 8008b30:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b34:	1b76      	subs	r6, r6, r5
 8008b36:	f7ff fded 	bl	8008714 <rshift>
 8008b3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b3e:	2702      	movs	r7, #2
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	d048      	beq.n	8008bd8 <__gethex+0x3f4>
 8008b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d015      	beq.n	8008b7a <__gethex+0x396>
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d017      	beq.n	8008b82 <__gethex+0x39e>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d109      	bne.n	8008b6a <__gethex+0x386>
 8008b56:	f01a 0f02 	tst.w	sl, #2
 8008b5a:	d006      	beq.n	8008b6a <__gethex+0x386>
 8008b5c:	f8d9 0000 	ldr.w	r0, [r9]
 8008b60:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b64:	f01a 0f01 	tst.w	sl, #1
 8008b68:	d10e      	bne.n	8008b88 <__gethex+0x3a4>
 8008b6a:	f047 0710 	orr.w	r7, r7, #16
 8008b6e:	e033      	b.n	8008bd8 <__gethex+0x3f4>
 8008b70:	f04f 0a01 	mov.w	sl, #1
 8008b74:	e7d0      	b.n	8008b18 <__gethex+0x334>
 8008b76:	2701      	movs	r7, #1
 8008b78:	e7e2      	b.n	8008b40 <__gethex+0x35c>
 8008b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7c:	f1c3 0301 	rsb	r3, r3, #1
 8008b80:	9315      	str	r3, [sp, #84]	; 0x54
 8008b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0f0      	beq.n	8008b6a <__gethex+0x386>
 8008b88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b8c:	f104 0314 	add.w	r3, r4, #20
 8008b90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b98:	f04f 0c00 	mov.w	ip, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ba6:	d01c      	beq.n	8008be2 <__gethex+0x3fe>
 8008ba8:	3201      	adds	r2, #1
 8008baa:	6002      	str	r2, [r0, #0]
 8008bac:	2f02      	cmp	r7, #2
 8008bae:	f104 0314 	add.w	r3, r4, #20
 8008bb2:	d13f      	bne.n	8008c34 <__gethex+0x450>
 8008bb4:	f8d8 2000 	ldr.w	r2, [r8]
 8008bb8:	3a01      	subs	r2, #1
 8008bba:	42b2      	cmp	r2, r6
 8008bbc:	d10a      	bne.n	8008bd4 <__gethex+0x3f0>
 8008bbe:	1171      	asrs	r1, r6, #5
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bc6:	f006 061f 	and.w	r6, r6, #31
 8008bca:	fa02 f606 	lsl.w	r6, r2, r6
 8008bce:	421e      	tst	r6, r3
 8008bd0:	bf18      	it	ne
 8008bd2:	4617      	movne	r7, r2
 8008bd4:	f047 0720 	orr.w	r7, r7, #32
 8008bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bda:	601c      	str	r4, [r3, #0]
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	601d      	str	r5, [r3, #0]
 8008be0:	e695      	b.n	800890e <__gethex+0x12a>
 8008be2:	4299      	cmp	r1, r3
 8008be4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008be8:	d8d8      	bhi.n	8008b9c <__gethex+0x3b8>
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	459b      	cmp	fp, r3
 8008bee:	db19      	blt.n	8008c24 <__gethex+0x440>
 8008bf0:	6861      	ldr	r1, [r4, #4]
 8008bf2:	ee18 0a10 	vmov	r0, s16
 8008bf6:	3101      	adds	r1, #1
 8008bf8:	f000 f928 	bl	8008e4c <_Balloc>
 8008bfc:	4681      	mov	r9, r0
 8008bfe:	b918      	cbnz	r0, 8008c08 <__gethex+0x424>
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <__gethex+0x488>)
 8008c02:	4602      	mov	r2, r0
 8008c04:	2184      	movs	r1, #132	; 0x84
 8008c06:	e6a8      	b.n	800895a <__gethex+0x176>
 8008c08:	6922      	ldr	r2, [r4, #16]
 8008c0a:	3202      	adds	r2, #2
 8008c0c:	f104 010c 	add.w	r1, r4, #12
 8008c10:	0092      	lsls	r2, r2, #2
 8008c12:	300c      	adds	r0, #12
 8008c14:	f000 f90c 	bl	8008e30 <memcpy>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	ee18 0a10 	vmov	r0, s16
 8008c1e:	f000 f955 	bl	8008ecc <_Bfree>
 8008c22:	464c      	mov	r4, r9
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c2c:	6122      	str	r2, [r4, #16]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	615a      	str	r2, [r3, #20]
 8008c32:	e7bb      	b.n	8008bac <__gethex+0x3c8>
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	455a      	cmp	r2, fp
 8008c38:	dd0b      	ble.n	8008c52 <__gethex+0x46e>
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f7ff fd69 	bl	8008714 <rshift>
 8008c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c46:	3501      	adds	r5, #1
 8008c48:	42ab      	cmp	r3, r5
 8008c4a:	f6ff aed0 	blt.w	80089ee <__gethex+0x20a>
 8008c4e:	2701      	movs	r7, #1
 8008c50:	e7c0      	b.n	8008bd4 <__gethex+0x3f0>
 8008c52:	f016 061f 	ands.w	r6, r6, #31
 8008c56:	d0fa      	beq.n	8008c4e <__gethex+0x46a>
 8008c58:	4453      	add	r3, sl
 8008c5a:	f1c6 0620 	rsb	r6, r6, #32
 8008c5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c62:	f000 f9e5 	bl	8009030 <__hi0bits>
 8008c66:	42b0      	cmp	r0, r6
 8008c68:	dbe7      	blt.n	8008c3a <__gethex+0x456>
 8008c6a:	e7f0      	b.n	8008c4e <__gethex+0x46a>
 8008c6c:	0800abaf 	.word	0x0800abaf

08008c70 <L_shift>:
 8008c70:	f1c2 0208 	rsb	r2, r2, #8
 8008c74:	0092      	lsls	r2, r2, #2
 8008c76:	b570      	push	{r4, r5, r6, lr}
 8008c78:	f1c2 0620 	rsb	r6, r2, #32
 8008c7c:	6843      	ldr	r3, [r0, #4]
 8008c7e:	6804      	ldr	r4, [r0, #0]
 8008c80:	fa03 f506 	lsl.w	r5, r3, r6
 8008c84:	432c      	orrs	r4, r5
 8008c86:	40d3      	lsrs	r3, r2
 8008c88:	6004      	str	r4, [r0, #0]
 8008c8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c8e:	4288      	cmp	r0, r1
 8008c90:	d3f4      	bcc.n	8008c7c <L_shift+0xc>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}

08008c94 <__match>:
 8008c94:	b530      	push	{r4, r5, lr}
 8008c96:	6803      	ldr	r3, [r0, #0]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9e:	b914      	cbnz	r4, 8008ca6 <__match+0x12>
 8008ca0:	6003      	str	r3, [r0, #0]
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	bd30      	pop	{r4, r5, pc}
 8008ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008caa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008cae:	2d19      	cmp	r5, #25
 8008cb0:	bf98      	it	ls
 8008cb2:	3220      	addls	r2, #32
 8008cb4:	42a2      	cmp	r2, r4
 8008cb6:	d0f0      	beq.n	8008c9a <__match+0x6>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7f3      	b.n	8008ca4 <__match+0x10>

08008cbc <__hexnan>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	680b      	ldr	r3, [r1, #0]
 8008cc2:	115e      	asrs	r6, r3, #5
 8008cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cc8:	f013 031f 	ands.w	r3, r3, #31
 8008ccc:	b087      	sub	sp, #28
 8008cce:	bf18      	it	ne
 8008cd0:	3604      	addne	r6, #4
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	1f37      	subs	r7, r6, #4
 8008cd6:	4690      	mov	r8, r2
 8008cd8:	6802      	ldr	r2, [r0, #0]
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	4682      	mov	sl, r0
 8008cde:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ce2:	46b9      	mov	r9, r7
 8008ce4:	463c      	mov	r4, r7
 8008ce6:	9502      	str	r5, [sp, #8]
 8008ce8:	46ab      	mov	fp, r5
 8008cea:	7851      	ldrb	r1, [r2, #1]
 8008cec:	1c53      	adds	r3, r2, #1
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	b341      	cbz	r1, 8008d44 <__hexnan+0x88>
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	9205      	str	r2, [sp, #20]
 8008cf6:	9104      	str	r1, [sp, #16]
 8008cf8:	f7ff fd5e 	bl	80087b8 <__hexdig_fun>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d14f      	bne.n	8008da0 <__hexnan+0xe4>
 8008d00:	9904      	ldr	r1, [sp, #16]
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	2920      	cmp	r1, #32
 8008d06:	d818      	bhi.n	8008d3a <__hexnan+0x7e>
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	459b      	cmp	fp, r3
 8008d0c:	dd13      	ble.n	8008d36 <__hexnan+0x7a>
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	d206      	bcs.n	8008d20 <__hexnan+0x64>
 8008d12:	2d07      	cmp	r5, #7
 8008d14:	dc04      	bgt.n	8008d20 <__hexnan+0x64>
 8008d16:	462a      	mov	r2, r5
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7ff ffa8 	bl	8008c70 <L_shift>
 8008d20:	4544      	cmp	r4, r8
 8008d22:	d950      	bls.n	8008dc6 <__hexnan+0x10a>
 8008d24:	2300      	movs	r3, #0
 8008d26:	f1a4 0904 	sub.w	r9, r4, #4
 8008d2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8008d32:	464c      	mov	r4, r9
 8008d34:	461d      	mov	r5, r3
 8008d36:	9a03      	ldr	r2, [sp, #12]
 8008d38:	e7d7      	b.n	8008cea <__hexnan+0x2e>
 8008d3a:	2929      	cmp	r1, #41	; 0x29
 8008d3c:	d156      	bne.n	8008dec <__hexnan+0x130>
 8008d3e:	3202      	adds	r2, #2
 8008d40:	f8ca 2000 	str.w	r2, [sl]
 8008d44:	f1bb 0f00 	cmp.w	fp, #0
 8008d48:	d050      	beq.n	8008dec <__hexnan+0x130>
 8008d4a:	454c      	cmp	r4, r9
 8008d4c:	d206      	bcs.n	8008d5c <__hexnan+0xa0>
 8008d4e:	2d07      	cmp	r5, #7
 8008d50:	dc04      	bgt.n	8008d5c <__hexnan+0xa0>
 8008d52:	462a      	mov	r2, r5
 8008d54:	4649      	mov	r1, r9
 8008d56:	4620      	mov	r0, r4
 8008d58:	f7ff ff8a 	bl	8008c70 <L_shift>
 8008d5c:	4544      	cmp	r4, r8
 8008d5e:	d934      	bls.n	8008dca <__hexnan+0x10e>
 8008d60:	f1a8 0204 	sub.w	r2, r8, #4
 8008d64:	4623      	mov	r3, r4
 8008d66:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d6e:	429f      	cmp	r7, r3
 8008d70:	d2f9      	bcs.n	8008d66 <__hexnan+0xaa>
 8008d72:	1b3b      	subs	r3, r7, r4
 8008d74:	f023 0303 	bic.w	r3, r3, #3
 8008d78:	3304      	adds	r3, #4
 8008d7a:	3401      	adds	r4, #1
 8008d7c:	3e03      	subs	r6, #3
 8008d7e:	42b4      	cmp	r4, r6
 8008d80:	bf88      	it	hi
 8008d82:	2304      	movhi	r3, #4
 8008d84:	4443      	add	r3, r8
 8008d86:	2200      	movs	r2, #0
 8008d88:	f843 2b04 	str.w	r2, [r3], #4
 8008d8c:	429f      	cmp	r7, r3
 8008d8e:	d2fb      	bcs.n	8008d88 <__hexnan+0xcc>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	b91b      	cbnz	r3, 8008d9c <__hexnan+0xe0>
 8008d94:	4547      	cmp	r7, r8
 8008d96:	d127      	bne.n	8008de8 <__hexnan+0x12c>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	2005      	movs	r0, #5
 8008d9e:	e026      	b.n	8008dee <__hexnan+0x132>
 8008da0:	3501      	adds	r5, #1
 8008da2:	2d08      	cmp	r5, #8
 8008da4:	f10b 0b01 	add.w	fp, fp, #1
 8008da8:	dd06      	ble.n	8008db8 <__hexnan+0xfc>
 8008daa:	4544      	cmp	r4, r8
 8008dac:	d9c3      	bls.n	8008d36 <__hexnan+0x7a>
 8008dae:	2300      	movs	r3, #0
 8008db0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008db4:	2501      	movs	r5, #1
 8008db6:	3c04      	subs	r4, #4
 8008db8:	6822      	ldr	r2, [r4, #0]
 8008dba:	f000 000f 	and.w	r0, r0, #15
 8008dbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008dc2:	6022      	str	r2, [r4, #0]
 8008dc4:	e7b7      	b.n	8008d36 <__hexnan+0x7a>
 8008dc6:	2508      	movs	r5, #8
 8008dc8:	e7b5      	b.n	8008d36 <__hexnan+0x7a>
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d0df      	beq.n	8008d90 <__hexnan+0xd4>
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd4:	f1c3 0320 	rsb	r3, r3, #32
 8008dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008de0:	401a      	ands	r2, r3
 8008de2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008de6:	e7d3      	b.n	8008d90 <__hexnan+0xd4>
 8008de8:	3f04      	subs	r7, #4
 8008dea:	e7d1      	b.n	8008d90 <__hexnan+0xd4>
 8008dec:	2004      	movs	r0, #4
 8008dee:	b007      	add	sp, #28
 8008df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008df4 <_localeconv_r>:
 8008df4:	4800      	ldr	r0, [pc, #0]	; (8008df8 <_localeconv_r+0x4>)
 8008df6:	4770      	bx	lr
 8008df8:	2000017c 	.word	0x2000017c

08008dfc <malloc>:
 8008dfc:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <malloc+0xc>)
 8008dfe:	4601      	mov	r1, r0
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	f000 bd67 	b.w	80098d4 <_malloc_r>
 8008e06:	bf00      	nop
 8008e08:	20000024 	.word	0x20000024

08008e0c <__ascii_mbtowc>:
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	b901      	cbnz	r1, 8008e12 <__ascii_mbtowc+0x6>
 8008e10:	a901      	add	r1, sp, #4
 8008e12:	b142      	cbz	r2, 8008e26 <__ascii_mbtowc+0x1a>
 8008e14:	b14b      	cbz	r3, 8008e2a <__ascii_mbtowc+0x1e>
 8008e16:	7813      	ldrb	r3, [r2, #0]
 8008e18:	600b      	str	r3, [r1, #0]
 8008e1a:	7812      	ldrb	r2, [r2, #0]
 8008e1c:	1e10      	subs	r0, r2, #0
 8008e1e:	bf18      	it	ne
 8008e20:	2001      	movne	r0, #1
 8008e22:	b002      	add	sp, #8
 8008e24:	4770      	bx	lr
 8008e26:	4610      	mov	r0, r2
 8008e28:	e7fb      	b.n	8008e22 <__ascii_mbtowc+0x16>
 8008e2a:	f06f 0001 	mvn.w	r0, #1
 8008e2e:	e7f8      	b.n	8008e22 <__ascii_mbtowc+0x16>

08008e30 <memcpy>:
 8008e30:	440a      	add	r2, r1
 8008e32:	4291      	cmp	r1, r2
 8008e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e38:	d100      	bne.n	8008e3c <memcpy+0xc>
 8008e3a:	4770      	bx	lr
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e46:	4291      	cmp	r1, r2
 8008e48:	d1f9      	bne.n	8008e3e <memcpy+0xe>
 8008e4a:	bd10      	pop	{r4, pc}

08008e4c <_Balloc>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
 8008e54:	b976      	cbnz	r6, 8008e74 <_Balloc+0x28>
 8008e56:	2010      	movs	r0, #16
 8008e58:	f7ff ffd0 	bl	8008dfc <malloc>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e60:	b920      	cbnz	r0, 8008e6c <_Balloc+0x20>
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <_Balloc+0x78>)
 8008e64:	4818      	ldr	r0, [pc, #96]	; (8008ec8 <_Balloc+0x7c>)
 8008e66:	2166      	movs	r1, #102	; 0x66
 8008e68:	f000 ff40 	bl	8009cec <__assert_func>
 8008e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e70:	6006      	str	r6, [r0, #0]
 8008e72:	60c6      	str	r6, [r0, #12]
 8008e74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e76:	68f3      	ldr	r3, [r6, #12]
 8008e78:	b183      	cbz	r3, 8008e9c <_Balloc+0x50>
 8008e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e82:	b9b8      	cbnz	r0, 8008eb4 <_Balloc+0x68>
 8008e84:	2101      	movs	r1, #1
 8008e86:	fa01 f605 	lsl.w	r6, r1, r5
 8008e8a:	1d72      	adds	r2, r6, #5
 8008e8c:	0092      	lsls	r2, r2, #2
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fc9d 	bl	80097ce <_calloc_r>
 8008e94:	b160      	cbz	r0, 8008eb0 <_Balloc+0x64>
 8008e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e9a:	e00e      	b.n	8008eba <_Balloc+0x6e>
 8008e9c:	2221      	movs	r2, #33	; 0x21
 8008e9e:	2104      	movs	r1, #4
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fc94 	bl	80097ce <_calloc_r>
 8008ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ea8:	60f0      	str	r0, [r6, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e4      	bne.n	8008e7a <_Balloc+0x2e>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	6802      	ldr	r2, [r0, #0]
 8008eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ec0:	e7f7      	b.n	8008eb2 <_Balloc+0x66>
 8008ec2:	bf00      	nop
 8008ec4:	0800ab3d 	.word	0x0800ab3d
 8008ec8:	0800ac3c 	.word	0x0800ac3c

08008ecc <_Bfree>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	b976      	cbnz	r6, 8008ef4 <_Bfree+0x28>
 8008ed6:	2010      	movs	r0, #16
 8008ed8:	f7ff ff90 	bl	8008dfc <malloc>
 8008edc:	4602      	mov	r2, r0
 8008ede:	6268      	str	r0, [r5, #36]	; 0x24
 8008ee0:	b920      	cbnz	r0, 8008eec <_Bfree+0x20>
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <_Bfree+0x3c>)
 8008ee4:	4809      	ldr	r0, [pc, #36]	; (8008f0c <_Bfree+0x40>)
 8008ee6:	218a      	movs	r1, #138	; 0x8a
 8008ee8:	f000 ff00 	bl	8009cec <__assert_func>
 8008eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef0:	6006      	str	r6, [r0, #0]
 8008ef2:	60c6      	str	r6, [r0, #12]
 8008ef4:	b13c      	cbz	r4, 8008f06 <_Bfree+0x3a>
 8008ef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ef8:	6862      	ldr	r2, [r4, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f00:	6021      	str	r1, [r4, #0]
 8008f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	0800ab3d 	.word	0x0800ab3d
 8008f0c:	0800ac3c 	.word	0x0800ac3c

08008f10 <__multadd>:
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	690d      	ldr	r5, [r1, #16]
 8008f16:	4607      	mov	r7, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	461e      	mov	r6, r3
 8008f1c:	f101 0c14 	add.w	ip, r1, #20
 8008f20:	2000      	movs	r0, #0
 8008f22:	f8dc 3000 	ldr.w	r3, [ip]
 8008f26:	b299      	uxth	r1, r3
 8008f28:	fb02 6101 	mla	r1, r2, r1, r6
 8008f2c:	0c1e      	lsrs	r6, r3, #16
 8008f2e:	0c0b      	lsrs	r3, r1, #16
 8008f30:	fb02 3306 	mla	r3, r2, r6, r3
 8008f34:	b289      	uxth	r1, r1
 8008f36:	3001      	adds	r0, #1
 8008f38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f3c:	4285      	cmp	r5, r0
 8008f3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f46:	dcec      	bgt.n	8008f22 <__multadd+0x12>
 8008f48:	b30e      	cbz	r6, 8008f8e <__multadd+0x7e>
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	42ab      	cmp	r3, r5
 8008f4e:	dc19      	bgt.n	8008f84 <__multadd+0x74>
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	4638      	mov	r0, r7
 8008f54:	3101      	adds	r1, #1
 8008f56:	f7ff ff79 	bl	8008e4c <_Balloc>
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	b928      	cbnz	r0, 8008f6a <__multadd+0x5a>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b0c      	ldr	r3, [pc, #48]	; (8008f94 <__multadd+0x84>)
 8008f62:	480d      	ldr	r0, [pc, #52]	; (8008f98 <__multadd+0x88>)
 8008f64:	21b5      	movs	r1, #181	; 0xb5
 8008f66:	f000 fec1 	bl	8009cec <__assert_func>
 8008f6a:	6922      	ldr	r2, [r4, #16]
 8008f6c:	3202      	adds	r2, #2
 8008f6e:	f104 010c 	add.w	r1, r4, #12
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	300c      	adds	r0, #12
 8008f76:	f7ff ff5b 	bl	8008e30 <memcpy>
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff ffa5 	bl	8008ecc <_Bfree>
 8008f82:	4644      	mov	r4, r8
 8008f84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f88:	3501      	adds	r5, #1
 8008f8a:	615e      	str	r6, [r3, #20]
 8008f8c:	6125      	str	r5, [r4, #16]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	0800abaf 	.word	0x0800abaf
 8008f98:	0800ac3c 	.word	0x0800ac3c

08008f9c <__s2b>:
 8008f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	4615      	mov	r5, r2
 8008fa4:	461f      	mov	r7, r3
 8008fa6:	2209      	movs	r2, #9
 8008fa8:	3308      	adds	r3, #8
 8008faa:	4606      	mov	r6, r0
 8008fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	db09      	blt.n	8008fcc <__s2b+0x30>
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7ff ff47 	bl	8008e4c <_Balloc>
 8008fbe:	b940      	cbnz	r0, 8008fd2 <__s2b+0x36>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	4b19      	ldr	r3, [pc, #100]	; (8009028 <__s2b+0x8c>)
 8008fc4:	4819      	ldr	r0, [pc, #100]	; (800902c <__s2b+0x90>)
 8008fc6:	21ce      	movs	r1, #206	; 0xce
 8008fc8:	f000 fe90 	bl	8009cec <__assert_func>
 8008fcc:	0052      	lsls	r2, r2, #1
 8008fce:	3101      	adds	r1, #1
 8008fd0:	e7f0      	b.n	8008fb4 <__s2b+0x18>
 8008fd2:	9b08      	ldr	r3, [sp, #32]
 8008fd4:	6143      	str	r3, [r0, #20]
 8008fd6:	2d09      	cmp	r5, #9
 8008fd8:	f04f 0301 	mov.w	r3, #1
 8008fdc:	6103      	str	r3, [r0, #16]
 8008fde:	dd16      	ble.n	800900e <__s2b+0x72>
 8008fe0:	f104 0909 	add.w	r9, r4, #9
 8008fe4:	46c8      	mov	r8, r9
 8008fe6:	442c      	add	r4, r5
 8008fe8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fec:	4601      	mov	r1, r0
 8008fee:	3b30      	subs	r3, #48	; 0x30
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ff8c 	bl	8008f10 <__multadd>
 8008ff8:	45a0      	cmp	r8, r4
 8008ffa:	d1f5      	bne.n	8008fe8 <__s2b+0x4c>
 8008ffc:	f1a5 0408 	sub.w	r4, r5, #8
 8009000:	444c      	add	r4, r9
 8009002:	1b2d      	subs	r5, r5, r4
 8009004:	1963      	adds	r3, r4, r5
 8009006:	42bb      	cmp	r3, r7
 8009008:	db04      	blt.n	8009014 <__s2b+0x78>
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	340a      	adds	r4, #10
 8009010:	2509      	movs	r5, #9
 8009012:	e7f6      	b.n	8009002 <__s2b+0x66>
 8009014:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009018:	4601      	mov	r1, r0
 800901a:	3b30      	subs	r3, #48	; 0x30
 800901c:	220a      	movs	r2, #10
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ff76 	bl	8008f10 <__multadd>
 8009024:	e7ee      	b.n	8009004 <__s2b+0x68>
 8009026:	bf00      	nop
 8009028:	0800abaf 	.word	0x0800abaf
 800902c:	0800ac3c 	.word	0x0800ac3c

08009030 <__hi0bits>:
 8009030:	0c03      	lsrs	r3, r0, #16
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	b9d3      	cbnz	r3, 800906c <__hi0bits+0x3c>
 8009036:	0400      	lsls	r0, r0, #16
 8009038:	2310      	movs	r3, #16
 800903a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800903e:	bf04      	itt	eq
 8009040:	0200      	lsleq	r0, r0, #8
 8009042:	3308      	addeq	r3, #8
 8009044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009048:	bf04      	itt	eq
 800904a:	0100      	lsleq	r0, r0, #4
 800904c:	3304      	addeq	r3, #4
 800904e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009052:	bf04      	itt	eq
 8009054:	0080      	lsleq	r0, r0, #2
 8009056:	3302      	addeq	r3, #2
 8009058:	2800      	cmp	r0, #0
 800905a:	db05      	blt.n	8009068 <__hi0bits+0x38>
 800905c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009060:	f103 0301 	add.w	r3, r3, #1
 8009064:	bf08      	it	eq
 8009066:	2320      	moveq	r3, #32
 8009068:	4618      	mov	r0, r3
 800906a:	4770      	bx	lr
 800906c:	2300      	movs	r3, #0
 800906e:	e7e4      	b.n	800903a <__hi0bits+0xa>

08009070 <__lo0bits>:
 8009070:	6803      	ldr	r3, [r0, #0]
 8009072:	f013 0207 	ands.w	r2, r3, #7
 8009076:	4601      	mov	r1, r0
 8009078:	d00b      	beq.n	8009092 <__lo0bits+0x22>
 800907a:	07da      	lsls	r2, r3, #31
 800907c:	d423      	bmi.n	80090c6 <__lo0bits+0x56>
 800907e:	0798      	lsls	r0, r3, #30
 8009080:	bf49      	itett	mi
 8009082:	085b      	lsrmi	r3, r3, #1
 8009084:	089b      	lsrpl	r3, r3, #2
 8009086:	2001      	movmi	r0, #1
 8009088:	600b      	strmi	r3, [r1, #0]
 800908a:	bf5c      	itt	pl
 800908c:	600b      	strpl	r3, [r1, #0]
 800908e:	2002      	movpl	r0, #2
 8009090:	4770      	bx	lr
 8009092:	b298      	uxth	r0, r3
 8009094:	b9a8      	cbnz	r0, 80090c2 <__lo0bits+0x52>
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	2010      	movs	r0, #16
 800909a:	b2da      	uxtb	r2, r3
 800909c:	b90a      	cbnz	r2, 80090a2 <__lo0bits+0x32>
 800909e:	3008      	adds	r0, #8
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	071a      	lsls	r2, r3, #28
 80090a4:	bf04      	itt	eq
 80090a6:	091b      	lsreq	r3, r3, #4
 80090a8:	3004      	addeq	r0, #4
 80090aa:	079a      	lsls	r2, r3, #30
 80090ac:	bf04      	itt	eq
 80090ae:	089b      	lsreq	r3, r3, #2
 80090b0:	3002      	addeq	r0, #2
 80090b2:	07da      	lsls	r2, r3, #31
 80090b4:	d403      	bmi.n	80090be <__lo0bits+0x4e>
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	f100 0001 	add.w	r0, r0, #1
 80090bc:	d005      	beq.n	80090ca <__lo0bits+0x5a>
 80090be:	600b      	str	r3, [r1, #0]
 80090c0:	4770      	bx	lr
 80090c2:	4610      	mov	r0, r2
 80090c4:	e7e9      	b.n	800909a <__lo0bits+0x2a>
 80090c6:	2000      	movs	r0, #0
 80090c8:	4770      	bx	lr
 80090ca:	2020      	movs	r0, #32
 80090cc:	4770      	bx	lr
	...

080090d0 <__i2b>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	460c      	mov	r4, r1
 80090d4:	2101      	movs	r1, #1
 80090d6:	f7ff feb9 	bl	8008e4c <_Balloc>
 80090da:	4602      	mov	r2, r0
 80090dc:	b928      	cbnz	r0, 80090ea <__i2b+0x1a>
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <__i2b+0x24>)
 80090e0:	4805      	ldr	r0, [pc, #20]	; (80090f8 <__i2b+0x28>)
 80090e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090e6:	f000 fe01 	bl	8009cec <__assert_func>
 80090ea:	2301      	movs	r3, #1
 80090ec:	6144      	str	r4, [r0, #20]
 80090ee:	6103      	str	r3, [r0, #16]
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	bf00      	nop
 80090f4:	0800abaf 	.word	0x0800abaf
 80090f8:	0800ac3c 	.word	0x0800ac3c

080090fc <__multiply>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	4691      	mov	r9, r2
 8009102:	690a      	ldr	r2, [r1, #16]
 8009104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009108:	429a      	cmp	r2, r3
 800910a:	bfb8      	it	lt
 800910c:	460b      	movlt	r3, r1
 800910e:	460c      	mov	r4, r1
 8009110:	bfbc      	itt	lt
 8009112:	464c      	movlt	r4, r9
 8009114:	4699      	movlt	r9, r3
 8009116:	6927      	ldr	r7, [r4, #16]
 8009118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800911c:	68a3      	ldr	r3, [r4, #8]
 800911e:	6861      	ldr	r1, [r4, #4]
 8009120:	eb07 060a 	add.w	r6, r7, sl
 8009124:	42b3      	cmp	r3, r6
 8009126:	b085      	sub	sp, #20
 8009128:	bfb8      	it	lt
 800912a:	3101      	addlt	r1, #1
 800912c:	f7ff fe8e 	bl	8008e4c <_Balloc>
 8009130:	b930      	cbnz	r0, 8009140 <__multiply+0x44>
 8009132:	4602      	mov	r2, r0
 8009134:	4b44      	ldr	r3, [pc, #272]	; (8009248 <__multiply+0x14c>)
 8009136:	4845      	ldr	r0, [pc, #276]	; (800924c <__multiply+0x150>)
 8009138:	f240 115d 	movw	r1, #349	; 0x15d
 800913c:	f000 fdd6 	bl	8009cec <__assert_func>
 8009140:	f100 0514 	add.w	r5, r0, #20
 8009144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009148:	462b      	mov	r3, r5
 800914a:	2200      	movs	r2, #0
 800914c:	4543      	cmp	r3, r8
 800914e:	d321      	bcc.n	8009194 <__multiply+0x98>
 8009150:	f104 0314 	add.w	r3, r4, #20
 8009154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009158:	f109 0314 	add.w	r3, r9, #20
 800915c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009160:	9202      	str	r2, [sp, #8]
 8009162:	1b3a      	subs	r2, r7, r4
 8009164:	3a15      	subs	r2, #21
 8009166:	f022 0203 	bic.w	r2, r2, #3
 800916a:	3204      	adds	r2, #4
 800916c:	f104 0115 	add.w	r1, r4, #21
 8009170:	428f      	cmp	r7, r1
 8009172:	bf38      	it	cc
 8009174:	2204      	movcc	r2, #4
 8009176:	9201      	str	r2, [sp, #4]
 8009178:	9a02      	ldr	r2, [sp, #8]
 800917a:	9303      	str	r3, [sp, #12]
 800917c:	429a      	cmp	r2, r3
 800917e:	d80c      	bhi.n	800919a <__multiply+0x9e>
 8009180:	2e00      	cmp	r6, #0
 8009182:	dd03      	ble.n	800918c <__multiply+0x90>
 8009184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009188:	2b00      	cmp	r3, #0
 800918a:	d05a      	beq.n	8009242 <__multiply+0x146>
 800918c:	6106      	str	r6, [r0, #16]
 800918e:	b005      	add	sp, #20
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	f843 2b04 	str.w	r2, [r3], #4
 8009198:	e7d8      	b.n	800914c <__multiply+0x50>
 800919a:	f8b3 a000 	ldrh.w	sl, [r3]
 800919e:	f1ba 0f00 	cmp.w	sl, #0
 80091a2:	d024      	beq.n	80091ee <__multiply+0xf2>
 80091a4:	f104 0e14 	add.w	lr, r4, #20
 80091a8:	46a9      	mov	r9, r5
 80091aa:	f04f 0c00 	mov.w	ip, #0
 80091ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091b2:	f8d9 1000 	ldr.w	r1, [r9]
 80091b6:	fa1f fb82 	uxth.w	fp, r2
 80091ba:	b289      	uxth	r1, r1
 80091bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80091c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091c4:	f8d9 2000 	ldr.w	r2, [r9]
 80091c8:	4461      	add	r1, ip
 80091ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80091d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091d6:	b289      	uxth	r1, r1
 80091d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091dc:	4577      	cmp	r7, lr
 80091de:	f849 1b04 	str.w	r1, [r9], #4
 80091e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091e6:	d8e2      	bhi.n	80091ae <__multiply+0xb2>
 80091e8:	9a01      	ldr	r2, [sp, #4]
 80091ea:	f845 c002 	str.w	ip, [r5, r2]
 80091ee:	9a03      	ldr	r2, [sp, #12]
 80091f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091f4:	3304      	adds	r3, #4
 80091f6:	f1b9 0f00 	cmp.w	r9, #0
 80091fa:	d020      	beq.n	800923e <__multiply+0x142>
 80091fc:	6829      	ldr	r1, [r5, #0]
 80091fe:	f104 0c14 	add.w	ip, r4, #20
 8009202:	46ae      	mov	lr, r5
 8009204:	f04f 0a00 	mov.w	sl, #0
 8009208:	f8bc b000 	ldrh.w	fp, [ip]
 800920c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009210:	fb09 220b 	mla	r2, r9, fp, r2
 8009214:	4492      	add	sl, r2
 8009216:	b289      	uxth	r1, r1
 8009218:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800921c:	f84e 1b04 	str.w	r1, [lr], #4
 8009220:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009224:	f8be 1000 	ldrh.w	r1, [lr]
 8009228:	0c12      	lsrs	r2, r2, #16
 800922a:	fb09 1102 	mla	r1, r9, r2, r1
 800922e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009232:	4567      	cmp	r7, ip
 8009234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009238:	d8e6      	bhi.n	8009208 <__multiply+0x10c>
 800923a:	9a01      	ldr	r2, [sp, #4]
 800923c:	50a9      	str	r1, [r5, r2]
 800923e:	3504      	adds	r5, #4
 8009240:	e79a      	b.n	8009178 <__multiply+0x7c>
 8009242:	3e01      	subs	r6, #1
 8009244:	e79c      	b.n	8009180 <__multiply+0x84>
 8009246:	bf00      	nop
 8009248:	0800abaf 	.word	0x0800abaf
 800924c:	0800ac3c 	.word	0x0800ac3c

08009250 <__pow5mult>:
 8009250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009254:	4615      	mov	r5, r2
 8009256:	f012 0203 	ands.w	r2, r2, #3
 800925a:	4606      	mov	r6, r0
 800925c:	460f      	mov	r7, r1
 800925e:	d007      	beq.n	8009270 <__pow5mult+0x20>
 8009260:	4c25      	ldr	r4, [pc, #148]	; (80092f8 <__pow5mult+0xa8>)
 8009262:	3a01      	subs	r2, #1
 8009264:	2300      	movs	r3, #0
 8009266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800926a:	f7ff fe51 	bl	8008f10 <__multadd>
 800926e:	4607      	mov	r7, r0
 8009270:	10ad      	asrs	r5, r5, #2
 8009272:	d03d      	beq.n	80092f0 <__pow5mult+0xa0>
 8009274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009276:	b97c      	cbnz	r4, 8009298 <__pow5mult+0x48>
 8009278:	2010      	movs	r0, #16
 800927a:	f7ff fdbf 	bl	8008dfc <malloc>
 800927e:	4602      	mov	r2, r0
 8009280:	6270      	str	r0, [r6, #36]	; 0x24
 8009282:	b928      	cbnz	r0, 8009290 <__pow5mult+0x40>
 8009284:	4b1d      	ldr	r3, [pc, #116]	; (80092fc <__pow5mult+0xac>)
 8009286:	481e      	ldr	r0, [pc, #120]	; (8009300 <__pow5mult+0xb0>)
 8009288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800928c:	f000 fd2e 	bl	8009cec <__assert_func>
 8009290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009294:	6004      	str	r4, [r0, #0]
 8009296:	60c4      	str	r4, [r0, #12]
 8009298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800929c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a0:	b94c      	cbnz	r4, 80092b6 <__pow5mult+0x66>
 80092a2:	f240 2171 	movw	r1, #625	; 0x271
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7ff ff12 	bl	80090d0 <__i2b>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80092b2:	4604      	mov	r4, r0
 80092b4:	6003      	str	r3, [r0, #0]
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	07eb      	lsls	r3, r5, #31
 80092bc:	d50a      	bpl.n	80092d4 <__pow5mult+0x84>
 80092be:	4639      	mov	r1, r7
 80092c0:	4622      	mov	r2, r4
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ff1a 	bl	80090fc <__multiply>
 80092c8:	4639      	mov	r1, r7
 80092ca:	4680      	mov	r8, r0
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff fdfd 	bl	8008ecc <_Bfree>
 80092d2:	4647      	mov	r7, r8
 80092d4:	106d      	asrs	r5, r5, #1
 80092d6:	d00b      	beq.n	80092f0 <__pow5mult+0xa0>
 80092d8:	6820      	ldr	r0, [r4, #0]
 80092da:	b938      	cbnz	r0, 80092ec <__pow5mult+0x9c>
 80092dc:	4622      	mov	r2, r4
 80092de:	4621      	mov	r1, r4
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7ff ff0b 	bl	80090fc <__multiply>
 80092e6:	6020      	str	r0, [r4, #0]
 80092e8:	f8c0 9000 	str.w	r9, [r0]
 80092ec:	4604      	mov	r4, r0
 80092ee:	e7e4      	b.n	80092ba <__pow5mult+0x6a>
 80092f0:	4638      	mov	r0, r7
 80092f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f6:	bf00      	nop
 80092f8:	0800ad88 	.word	0x0800ad88
 80092fc:	0800ab3d 	.word	0x0800ab3d
 8009300:	0800ac3c 	.word	0x0800ac3c

08009304 <__lshift>:
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	460c      	mov	r4, r1
 800930a:	6849      	ldr	r1, [r1, #4]
 800930c:	6923      	ldr	r3, [r4, #16]
 800930e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	4607      	mov	r7, r0
 8009316:	4691      	mov	r9, r2
 8009318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800931c:	f108 0601 	add.w	r6, r8, #1
 8009320:	42b3      	cmp	r3, r6
 8009322:	db0b      	blt.n	800933c <__lshift+0x38>
 8009324:	4638      	mov	r0, r7
 8009326:	f7ff fd91 	bl	8008e4c <_Balloc>
 800932a:	4605      	mov	r5, r0
 800932c:	b948      	cbnz	r0, 8009342 <__lshift+0x3e>
 800932e:	4602      	mov	r2, r0
 8009330:	4b2a      	ldr	r3, [pc, #168]	; (80093dc <__lshift+0xd8>)
 8009332:	482b      	ldr	r0, [pc, #172]	; (80093e0 <__lshift+0xdc>)
 8009334:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009338:	f000 fcd8 	bl	8009cec <__assert_func>
 800933c:	3101      	adds	r1, #1
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	e7ee      	b.n	8009320 <__lshift+0x1c>
 8009342:	2300      	movs	r3, #0
 8009344:	f100 0114 	add.w	r1, r0, #20
 8009348:	f100 0210 	add.w	r2, r0, #16
 800934c:	4618      	mov	r0, r3
 800934e:	4553      	cmp	r3, sl
 8009350:	db37      	blt.n	80093c2 <__lshift+0xbe>
 8009352:	6920      	ldr	r0, [r4, #16]
 8009354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009358:	f104 0314 	add.w	r3, r4, #20
 800935c:	f019 091f 	ands.w	r9, r9, #31
 8009360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009368:	d02f      	beq.n	80093ca <__lshift+0xc6>
 800936a:	f1c9 0e20 	rsb	lr, r9, #32
 800936e:	468a      	mov	sl, r1
 8009370:	f04f 0c00 	mov.w	ip, #0
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	fa02 f209 	lsl.w	r2, r2, r9
 800937a:	ea42 020c 	orr.w	r2, r2, ip
 800937e:	f84a 2b04 	str.w	r2, [sl], #4
 8009382:	f853 2b04 	ldr.w	r2, [r3], #4
 8009386:	4298      	cmp	r0, r3
 8009388:	fa22 fc0e 	lsr.w	ip, r2, lr
 800938c:	d8f2      	bhi.n	8009374 <__lshift+0x70>
 800938e:	1b03      	subs	r3, r0, r4
 8009390:	3b15      	subs	r3, #21
 8009392:	f023 0303 	bic.w	r3, r3, #3
 8009396:	3304      	adds	r3, #4
 8009398:	f104 0215 	add.w	r2, r4, #21
 800939c:	4290      	cmp	r0, r2
 800939e:	bf38      	it	cc
 80093a0:	2304      	movcc	r3, #4
 80093a2:	f841 c003 	str.w	ip, [r1, r3]
 80093a6:	f1bc 0f00 	cmp.w	ip, #0
 80093aa:	d001      	beq.n	80093b0 <__lshift+0xac>
 80093ac:	f108 0602 	add.w	r6, r8, #2
 80093b0:	3e01      	subs	r6, #1
 80093b2:	4638      	mov	r0, r7
 80093b4:	612e      	str	r6, [r5, #16]
 80093b6:	4621      	mov	r1, r4
 80093b8:	f7ff fd88 	bl	8008ecc <_Bfree>
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7c1      	b.n	800934e <__lshift+0x4a>
 80093ca:	3904      	subs	r1, #4
 80093cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093d4:	4298      	cmp	r0, r3
 80093d6:	d8f9      	bhi.n	80093cc <__lshift+0xc8>
 80093d8:	e7ea      	b.n	80093b0 <__lshift+0xac>
 80093da:	bf00      	nop
 80093dc:	0800abaf 	.word	0x0800abaf
 80093e0:	0800ac3c 	.word	0x0800ac3c

080093e4 <__mcmp>:
 80093e4:	b530      	push	{r4, r5, lr}
 80093e6:	6902      	ldr	r2, [r0, #16]
 80093e8:	690c      	ldr	r4, [r1, #16]
 80093ea:	1b12      	subs	r2, r2, r4
 80093ec:	d10e      	bne.n	800940c <__mcmp+0x28>
 80093ee:	f100 0314 	add.w	r3, r0, #20
 80093f2:	3114      	adds	r1, #20
 80093f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009404:	42a5      	cmp	r5, r4
 8009406:	d003      	beq.n	8009410 <__mcmp+0x2c>
 8009408:	d305      	bcc.n	8009416 <__mcmp+0x32>
 800940a:	2201      	movs	r2, #1
 800940c:	4610      	mov	r0, r2
 800940e:	bd30      	pop	{r4, r5, pc}
 8009410:	4283      	cmp	r3, r0
 8009412:	d3f3      	bcc.n	80093fc <__mcmp+0x18>
 8009414:	e7fa      	b.n	800940c <__mcmp+0x28>
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	e7f7      	b.n	800940c <__mcmp+0x28>

0800941c <__mdiff>:
 800941c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	460c      	mov	r4, r1
 8009422:	4606      	mov	r6, r0
 8009424:	4611      	mov	r1, r2
 8009426:	4620      	mov	r0, r4
 8009428:	4690      	mov	r8, r2
 800942a:	f7ff ffdb 	bl	80093e4 <__mcmp>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d110      	bne.n	8009454 <__mdiff+0x38>
 8009432:	4629      	mov	r1, r5
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fd09 	bl	8008e4c <_Balloc>
 800943a:	b930      	cbnz	r0, 800944a <__mdiff+0x2e>
 800943c:	4b3a      	ldr	r3, [pc, #232]	; (8009528 <__mdiff+0x10c>)
 800943e:	4602      	mov	r2, r0
 8009440:	f240 2132 	movw	r1, #562	; 0x232
 8009444:	4839      	ldr	r0, [pc, #228]	; (800952c <__mdiff+0x110>)
 8009446:	f000 fc51 	bl	8009cec <__assert_func>
 800944a:	2301      	movs	r3, #1
 800944c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009454:	bfa4      	itt	ge
 8009456:	4643      	movge	r3, r8
 8009458:	46a0      	movge	r8, r4
 800945a:	4630      	mov	r0, r6
 800945c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009460:	bfa6      	itte	ge
 8009462:	461c      	movge	r4, r3
 8009464:	2500      	movge	r5, #0
 8009466:	2501      	movlt	r5, #1
 8009468:	f7ff fcf0 	bl	8008e4c <_Balloc>
 800946c:	b920      	cbnz	r0, 8009478 <__mdiff+0x5c>
 800946e:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <__mdiff+0x10c>)
 8009470:	4602      	mov	r2, r0
 8009472:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009476:	e7e5      	b.n	8009444 <__mdiff+0x28>
 8009478:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800947c:	6926      	ldr	r6, [r4, #16]
 800947e:	60c5      	str	r5, [r0, #12]
 8009480:	f104 0914 	add.w	r9, r4, #20
 8009484:	f108 0514 	add.w	r5, r8, #20
 8009488:	f100 0e14 	add.w	lr, r0, #20
 800948c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009490:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009494:	f108 0210 	add.w	r2, r8, #16
 8009498:	46f2      	mov	sl, lr
 800949a:	2100      	movs	r1, #0
 800949c:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094a4:	fa1f f883 	uxth.w	r8, r3
 80094a8:	fa11 f18b 	uxtah	r1, r1, fp
 80094ac:	0c1b      	lsrs	r3, r3, #16
 80094ae:	eba1 0808 	sub.w	r8, r1, r8
 80094b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094ba:	fa1f f888 	uxth.w	r8, r8
 80094be:	1419      	asrs	r1, r3, #16
 80094c0:	454e      	cmp	r6, r9
 80094c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094c6:	f84a 3b04 	str.w	r3, [sl], #4
 80094ca:	d8e7      	bhi.n	800949c <__mdiff+0x80>
 80094cc:	1b33      	subs	r3, r6, r4
 80094ce:	3b15      	subs	r3, #21
 80094d0:	f023 0303 	bic.w	r3, r3, #3
 80094d4:	3304      	adds	r3, #4
 80094d6:	3415      	adds	r4, #21
 80094d8:	42a6      	cmp	r6, r4
 80094da:	bf38      	it	cc
 80094dc:	2304      	movcc	r3, #4
 80094de:	441d      	add	r5, r3
 80094e0:	4473      	add	r3, lr
 80094e2:	469e      	mov	lr, r3
 80094e4:	462e      	mov	r6, r5
 80094e6:	4566      	cmp	r6, ip
 80094e8:	d30e      	bcc.n	8009508 <__mdiff+0xec>
 80094ea:	f10c 0203 	add.w	r2, ip, #3
 80094ee:	1b52      	subs	r2, r2, r5
 80094f0:	f022 0203 	bic.w	r2, r2, #3
 80094f4:	3d03      	subs	r5, #3
 80094f6:	45ac      	cmp	ip, r5
 80094f8:	bf38      	it	cc
 80094fa:	2200      	movcc	r2, #0
 80094fc:	441a      	add	r2, r3
 80094fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009502:	b17b      	cbz	r3, 8009524 <__mdiff+0x108>
 8009504:	6107      	str	r7, [r0, #16]
 8009506:	e7a3      	b.n	8009450 <__mdiff+0x34>
 8009508:	f856 8b04 	ldr.w	r8, [r6], #4
 800950c:	fa11 f288 	uxtah	r2, r1, r8
 8009510:	1414      	asrs	r4, r2, #16
 8009512:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009516:	b292      	uxth	r2, r2
 8009518:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800951c:	f84e 2b04 	str.w	r2, [lr], #4
 8009520:	1421      	asrs	r1, r4, #16
 8009522:	e7e0      	b.n	80094e6 <__mdiff+0xca>
 8009524:	3f01      	subs	r7, #1
 8009526:	e7ea      	b.n	80094fe <__mdiff+0xe2>
 8009528:	0800abaf 	.word	0x0800abaf
 800952c:	0800ac3c 	.word	0x0800ac3c

08009530 <__ulp>:
 8009530:	b082      	sub	sp, #8
 8009532:	ed8d 0b00 	vstr	d0, [sp]
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	4912      	ldr	r1, [pc, #72]	; (8009584 <__ulp+0x54>)
 800953a:	4019      	ands	r1, r3
 800953c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009540:	2900      	cmp	r1, #0
 8009542:	dd05      	ble.n	8009550 <__ulp+0x20>
 8009544:	2200      	movs	r2, #0
 8009546:	460b      	mov	r3, r1
 8009548:	ec43 2b10 	vmov	d0, r2, r3
 800954c:	b002      	add	sp, #8
 800954e:	4770      	bx	lr
 8009550:	4249      	negs	r1, r1
 8009552:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009556:	ea4f 5021 	mov.w	r0, r1, asr #20
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	da04      	bge.n	800956e <__ulp+0x3e>
 8009564:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009568:	fa41 f300 	asr.w	r3, r1, r0
 800956c:	e7ec      	b.n	8009548 <__ulp+0x18>
 800956e:	f1a0 0114 	sub.w	r1, r0, #20
 8009572:	291e      	cmp	r1, #30
 8009574:	bfda      	itte	le
 8009576:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800957a:	fa20 f101 	lsrle.w	r1, r0, r1
 800957e:	2101      	movgt	r1, #1
 8009580:	460a      	mov	r2, r1
 8009582:	e7e1      	b.n	8009548 <__ulp+0x18>
 8009584:	7ff00000 	.word	0x7ff00000

08009588 <__b2d>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	6905      	ldr	r5, [r0, #16]
 800958c:	f100 0714 	add.w	r7, r0, #20
 8009590:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009594:	1f2e      	subs	r6, r5, #4
 8009596:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff fd48 	bl	8009030 <__hi0bits>
 80095a0:	f1c0 0320 	rsb	r3, r0, #32
 80095a4:	280a      	cmp	r0, #10
 80095a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009624 <__b2d+0x9c>
 80095aa:	600b      	str	r3, [r1, #0]
 80095ac:	dc14      	bgt.n	80095d8 <__b2d+0x50>
 80095ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80095b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80095b6:	42b7      	cmp	r7, r6
 80095b8:	ea41 030c 	orr.w	r3, r1, ip
 80095bc:	bf34      	ite	cc
 80095be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095c2:	2100      	movcs	r1, #0
 80095c4:	3015      	adds	r0, #21
 80095c6:	fa04 f000 	lsl.w	r0, r4, r0
 80095ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80095ce:	ea40 0201 	orr.w	r2, r0, r1
 80095d2:	ec43 2b10 	vmov	d0, r2, r3
 80095d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d8:	42b7      	cmp	r7, r6
 80095da:	bf3a      	itte	cc
 80095dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80095e4:	2100      	movcs	r1, #0
 80095e6:	380b      	subs	r0, #11
 80095e8:	d017      	beq.n	800961a <__b2d+0x92>
 80095ea:	f1c0 0c20 	rsb	ip, r0, #32
 80095ee:	fa04 f500 	lsl.w	r5, r4, r0
 80095f2:	42be      	cmp	r6, r7
 80095f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80095f8:	ea45 0504 	orr.w	r5, r5, r4
 80095fc:	bf8c      	ite	hi
 80095fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009602:	2400      	movls	r4, #0
 8009604:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009608:	fa01 f000 	lsl.w	r0, r1, r0
 800960c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009610:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009614:	ea40 0204 	orr.w	r2, r0, r4
 8009618:	e7db      	b.n	80095d2 <__b2d+0x4a>
 800961a:	ea44 030c 	orr.w	r3, r4, ip
 800961e:	460a      	mov	r2, r1
 8009620:	e7d7      	b.n	80095d2 <__b2d+0x4a>
 8009622:	bf00      	nop
 8009624:	3ff00000 	.word	0x3ff00000

08009628 <__d2b>:
 8009628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800962c:	4689      	mov	r9, r1
 800962e:	2101      	movs	r1, #1
 8009630:	ec57 6b10 	vmov	r6, r7, d0
 8009634:	4690      	mov	r8, r2
 8009636:	f7ff fc09 	bl	8008e4c <_Balloc>
 800963a:	4604      	mov	r4, r0
 800963c:	b930      	cbnz	r0, 800964c <__d2b+0x24>
 800963e:	4602      	mov	r2, r0
 8009640:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <__d2b+0xb0>)
 8009642:	4826      	ldr	r0, [pc, #152]	; (80096dc <__d2b+0xb4>)
 8009644:	f240 310a 	movw	r1, #778	; 0x30a
 8009648:	f000 fb50 	bl	8009cec <__assert_func>
 800964c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009654:	bb35      	cbnz	r5, 80096a4 <__d2b+0x7c>
 8009656:	2e00      	cmp	r6, #0
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	d028      	beq.n	80096ae <__d2b+0x86>
 800965c:	4668      	mov	r0, sp
 800965e:	9600      	str	r6, [sp, #0]
 8009660:	f7ff fd06 	bl	8009070 <__lo0bits>
 8009664:	9900      	ldr	r1, [sp, #0]
 8009666:	b300      	cbz	r0, 80096aa <__d2b+0x82>
 8009668:	9a01      	ldr	r2, [sp, #4]
 800966a:	f1c0 0320 	rsb	r3, r0, #32
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	430b      	orrs	r3, r1
 8009674:	40c2      	lsrs	r2, r0
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	9201      	str	r2, [sp, #4]
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	61a3      	str	r3, [r4, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2202      	movne	r2, #2
 8009684:	2201      	moveq	r2, #1
 8009686:	6122      	str	r2, [r4, #16]
 8009688:	b1d5      	cbz	r5, 80096c0 <__d2b+0x98>
 800968a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800968e:	4405      	add	r5, r0
 8009690:	f8c9 5000 	str.w	r5, [r9]
 8009694:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009698:	f8c8 0000 	str.w	r0, [r8]
 800969c:	4620      	mov	r0, r4
 800969e:	b003      	add	sp, #12
 80096a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096a8:	e7d5      	b.n	8009656 <__d2b+0x2e>
 80096aa:	6161      	str	r1, [r4, #20]
 80096ac:	e7e5      	b.n	800967a <__d2b+0x52>
 80096ae:	a801      	add	r0, sp, #4
 80096b0:	f7ff fcde 	bl	8009070 <__lo0bits>
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	6163      	str	r3, [r4, #20]
 80096b8:	2201      	movs	r2, #1
 80096ba:	6122      	str	r2, [r4, #16]
 80096bc:	3020      	adds	r0, #32
 80096be:	e7e3      	b.n	8009688 <__d2b+0x60>
 80096c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096c8:	f8c9 0000 	str.w	r0, [r9]
 80096cc:	6918      	ldr	r0, [r3, #16]
 80096ce:	f7ff fcaf 	bl	8009030 <__hi0bits>
 80096d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096d6:	e7df      	b.n	8009698 <__d2b+0x70>
 80096d8:	0800abaf 	.word	0x0800abaf
 80096dc:	0800ac3c 	.word	0x0800ac3c

080096e0 <__ratio>:
 80096e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	4688      	mov	r8, r1
 80096e6:	4669      	mov	r1, sp
 80096e8:	4681      	mov	r9, r0
 80096ea:	f7ff ff4d 	bl	8009588 <__b2d>
 80096ee:	a901      	add	r1, sp, #4
 80096f0:	4640      	mov	r0, r8
 80096f2:	ec55 4b10 	vmov	r4, r5, d0
 80096f6:	f7ff ff47 	bl	8009588 <__b2d>
 80096fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009702:	eba3 0c02 	sub.w	ip, r3, r2
 8009706:	e9dd 3200 	ldrd	r3, r2, [sp]
 800970a:	1a9b      	subs	r3, r3, r2
 800970c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009710:	ec51 0b10 	vmov	r0, r1, d0
 8009714:	2b00      	cmp	r3, #0
 8009716:	bfd6      	itet	le
 8009718:	460a      	movle	r2, r1
 800971a:	462a      	movgt	r2, r5
 800971c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009720:	468b      	mov	fp, r1
 8009722:	462f      	mov	r7, r5
 8009724:	bfd4      	ite	le
 8009726:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800972a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800972e:	4620      	mov	r0, r4
 8009730:	ee10 2a10 	vmov	r2, s0
 8009734:	465b      	mov	r3, fp
 8009736:	4639      	mov	r1, r7
 8009738:	f7f7 f888 	bl	800084c <__aeabi_ddiv>
 800973c:	ec41 0b10 	vmov	d0, r0, r1
 8009740:	b003      	add	sp, #12
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009746 <__copybits>:
 8009746:	3901      	subs	r1, #1
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	1149      	asrs	r1, r1, #5
 800974c:	6914      	ldr	r4, [r2, #16]
 800974e:	3101      	adds	r1, #1
 8009750:	f102 0314 	add.w	r3, r2, #20
 8009754:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009758:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800975c:	1f05      	subs	r5, r0, #4
 800975e:	42a3      	cmp	r3, r4
 8009760:	d30c      	bcc.n	800977c <__copybits+0x36>
 8009762:	1aa3      	subs	r3, r4, r2
 8009764:	3b11      	subs	r3, #17
 8009766:	f023 0303 	bic.w	r3, r3, #3
 800976a:	3211      	adds	r2, #17
 800976c:	42a2      	cmp	r2, r4
 800976e:	bf88      	it	hi
 8009770:	2300      	movhi	r3, #0
 8009772:	4418      	add	r0, r3
 8009774:	2300      	movs	r3, #0
 8009776:	4288      	cmp	r0, r1
 8009778:	d305      	bcc.n	8009786 <__copybits+0x40>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009780:	f845 6f04 	str.w	r6, [r5, #4]!
 8009784:	e7eb      	b.n	800975e <__copybits+0x18>
 8009786:	f840 3b04 	str.w	r3, [r0], #4
 800978a:	e7f4      	b.n	8009776 <__copybits+0x30>

0800978c <__any_on>:
 800978c:	f100 0214 	add.w	r2, r0, #20
 8009790:	6900      	ldr	r0, [r0, #16]
 8009792:	114b      	asrs	r3, r1, #5
 8009794:	4298      	cmp	r0, r3
 8009796:	b510      	push	{r4, lr}
 8009798:	db11      	blt.n	80097be <__any_on+0x32>
 800979a:	dd0a      	ble.n	80097b2 <__any_on+0x26>
 800979c:	f011 011f 	ands.w	r1, r1, #31
 80097a0:	d007      	beq.n	80097b2 <__any_on+0x26>
 80097a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097a6:	fa24 f001 	lsr.w	r0, r4, r1
 80097aa:	fa00 f101 	lsl.w	r1, r0, r1
 80097ae:	428c      	cmp	r4, r1
 80097b0:	d10b      	bne.n	80097ca <__any_on+0x3e>
 80097b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d803      	bhi.n	80097c2 <__any_on+0x36>
 80097ba:	2000      	movs	r0, #0
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	4603      	mov	r3, r0
 80097c0:	e7f7      	b.n	80097b2 <__any_on+0x26>
 80097c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d0f5      	beq.n	80097b6 <__any_on+0x2a>
 80097ca:	2001      	movs	r0, #1
 80097cc:	e7f6      	b.n	80097bc <__any_on+0x30>

080097ce <_calloc_r>:
 80097ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d0:	fba1 2402 	umull	r2, r4, r1, r2
 80097d4:	b94c      	cbnz	r4, 80097ea <_calloc_r+0x1c>
 80097d6:	4611      	mov	r1, r2
 80097d8:	9201      	str	r2, [sp, #4]
 80097da:	f000 f87b 	bl	80098d4 <_malloc_r>
 80097de:	9a01      	ldr	r2, [sp, #4]
 80097e0:	4605      	mov	r5, r0
 80097e2:	b930      	cbnz	r0, 80097f2 <_calloc_r+0x24>
 80097e4:	4628      	mov	r0, r5
 80097e6:	b003      	add	sp, #12
 80097e8:	bd30      	pop	{r4, r5, pc}
 80097ea:	220c      	movs	r2, #12
 80097ec:	6002      	str	r2, [r0, #0]
 80097ee:	2500      	movs	r5, #0
 80097f0:	e7f8      	b.n	80097e4 <_calloc_r+0x16>
 80097f2:	4621      	mov	r1, r4
 80097f4:	f7fc fb88 	bl	8005f08 <memset>
 80097f8:	e7f4      	b.n	80097e4 <_calloc_r+0x16>
	...

080097fc <_free_r>:
 80097fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097fe:	2900      	cmp	r1, #0
 8009800:	d044      	beq.n	800988c <_free_r+0x90>
 8009802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009806:	9001      	str	r0, [sp, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f1a1 0404 	sub.w	r4, r1, #4
 800980e:	bfb8      	it	lt
 8009810:	18e4      	addlt	r4, r4, r3
 8009812:	f000 fab5 	bl	8009d80 <__malloc_lock>
 8009816:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <_free_r+0x94>)
 8009818:	9801      	ldr	r0, [sp, #4]
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	b933      	cbnz	r3, 800982c <_free_r+0x30>
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	6014      	str	r4, [r2, #0]
 8009822:	b003      	add	sp, #12
 8009824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009828:	f000 bab0 	b.w	8009d8c <__malloc_unlock>
 800982c:	42a3      	cmp	r3, r4
 800982e:	d908      	bls.n	8009842 <_free_r+0x46>
 8009830:	6825      	ldr	r5, [r4, #0]
 8009832:	1961      	adds	r1, r4, r5
 8009834:	428b      	cmp	r3, r1
 8009836:	bf01      	itttt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	1949      	addeq	r1, r1, r5
 800983e:	6021      	streq	r1, [r4, #0]
 8009840:	e7ed      	b.n	800981e <_free_r+0x22>
 8009842:	461a      	mov	r2, r3
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b10b      	cbz	r3, 800984c <_free_r+0x50>
 8009848:	42a3      	cmp	r3, r4
 800984a:	d9fa      	bls.n	8009842 <_free_r+0x46>
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	1855      	adds	r5, r2, r1
 8009850:	42a5      	cmp	r5, r4
 8009852:	d10b      	bne.n	800986c <_free_r+0x70>
 8009854:	6824      	ldr	r4, [r4, #0]
 8009856:	4421      	add	r1, r4
 8009858:	1854      	adds	r4, r2, r1
 800985a:	42a3      	cmp	r3, r4
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	d1e0      	bne.n	8009822 <_free_r+0x26>
 8009860:	681c      	ldr	r4, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	6053      	str	r3, [r2, #4]
 8009866:	4421      	add	r1, r4
 8009868:	6011      	str	r1, [r2, #0]
 800986a:	e7da      	b.n	8009822 <_free_r+0x26>
 800986c:	d902      	bls.n	8009874 <_free_r+0x78>
 800986e:	230c      	movs	r3, #12
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7d6      	b.n	8009822 <_free_r+0x26>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	1961      	adds	r1, r4, r5
 8009878:	428b      	cmp	r3, r1
 800987a:	bf04      	itt	eq
 800987c:	6819      	ldreq	r1, [r3, #0]
 800987e:	685b      	ldreq	r3, [r3, #4]
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	bf04      	itt	eq
 8009884:	1949      	addeq	r1, r1, r5
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	6054      	str	r4, [r2, #4]
 800988a:	e7ca      	b.n	8009822 <_free_r+0x26>
 800988c:	b003      	add	sp, #12
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	200003e4 	.word	0x200003e4

08009894 <sbrk_aligned>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4e0e      	ldr	r6, [pc, #56]	; (80098d0 <sbrk_aligned+0x3c>)
 8009898:	460c      	mov	r4, r1
 800989a:	6831      	ldr	r1, [r6, #0]
 800989c:	4605      	mov	r5, r0
 800989e:	b911      	cbnz	r1, 80098a6 <sbrk_aligned+0x12>
 80098a0:	f000 f9f2 	bl	8009c88 <_sbrk_r>
 80098a4:	6030      	str	r0, [r6, #0]
 80098a6:	4621      	mov	r1, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 f9ed 	bl	8009c88 <_sbrk_r>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d00a      	beq.n	80098c8 <sbrk_aligned+0x34>
 80098b2:	1cc4      	adds	r4, r0, #3
 80098b4:	f024 0403 	bic.w	r4, r4, #3
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d007      	beq.n	80098cc <sbrk_aligned+0x38>
 80098bc:	1a21      	subs	r1, r4, r0
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f9e2 	bl	8009c88 <_sbrk_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d101      	bne.n	80098cc <sbrk_aligned+0x38>
 80098c8:	f04f 34ff 	mov.w	r4, #4294967295
 80098cc:	4620      	mov	r0, r4
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	200003e8 	.word	0x200003e8

080098d4 <_malloc_r>:
 80098d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d8:	1ccd      	adds	r5, r1, #3
 80098da:	f025 0503 	bic.w	r5, r5, #3
 80098de:	3508      	adds	r5, #8
 80098e0:	2d0c      	cmp	r5, #12
 80098e2:	bf38      	it	cc
 80098e4:	250c      	movcc	r5, #12
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	4607      	mov	r7, r0
 80098ea:	db01      	blt.n	80098f0 <_malloc_r+0x1c>
 80098ec:	42a9      	cmp	r1, r5
 80098ee:	d905      	bls.n	80098fc <_malloc_r+0x28>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	2600      	movs	r6, #0
 80098f6:	4630      	mov	r0, r6
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	4e2e      	ldr	r6, [pc, #184]	; (80099b8 <_malloc_r+0xe4>)
 80098fe:	f000 fa3f 	bl	8009d80 <__malloc_lock>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	461c      	mov	r4, r3
 8009906:	bb34      	cbnz	r4, 8009956 <_malloc_r+0x82>
 8009908:	4629      	mov	r1, r5
 800990a:	4638      	mov	r0, r7
 800990c:	f7ff ffc2 	bl	8009894 <sbrk_aligned>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	4604      	mov	r4, r0
 8009914:	d14d      	bne.n	80099b2 <_malloc_r+0xde>
 8009916:	6834      	ldr	r4, [r6, #0]
 8009918:	4626      	mov	r6, r4
 800991a:	2e00      	cmp	r6, #0
 800991c:	d140      	bne.n	80099a0 <_malloc_r+0xcc>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	4631      	mov	r1, r6
 8009922:	4638      	mov	r0, r7
 8009924:	eb04 0803 	add.w	r8, r4, r3
 8009928:	f000 f9ae 	bl	8009c88 <_sbrk_r>
 800992c:	4580      	cmp	r8, r0
 800992e:	d13a      	bne.n	80099a6 <_malloc_r+0xd2>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	3503      	adds	r5, #3
 8009934:	1a6d      	subs	r5, r5, r1
 8009936:	f025 0503 	bic.w	r5, r5, #3
 800993a:	3508      	adds	r5, #8
 800993c:	2d0c      	cmp	r5, #12
 800993e:	bf38      	it	cc
 8009940:	250c      	movcc	r5, #12
 8009942:	4629      	mov	r1, r5
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ffa5 	bl	8009894 <sbrk_aligned>
 800994a:	3001      	adds	r0, #1
 800994c:	d02b      	beq.n	80099a6 <_malloc_r+0xd2>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	442b      	add	r3, r5
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	e00e      	b.n	8009974 <_malloc_r+0xa0>
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	1b52      	subs	r2, r2, r5
 800995a:	d41e      	bmi.n	800999a <_malloc_r+0xc6>
 800995c:	2a0b      	cmp	r2, #11
 800995e:	d916      	bls.n	800998e <_malloc_r+0xba>
 8009960:	1961      	adds	r1, r4, r5
 8009962:	42a3      	cmp	r3, r4
 8009964:	6025      	str	r5, [r4, #0]
 8009966:	bf18      	it	ne
 8009968:	6059      	strne	r1, [r3, #4]
 800996a:	6863      	ldr	r3, [r4, #4]
 800996c:	bf08      	it	eq
 800996e:	6031      	streq	r1, [r6, #0]
 8009970:	5162      	str	r2, [r4, r5]
 8009972:	604b      	str	r3, [r1, #4]
 8009974:	4638      	mov	r0, r7
 8009976:	f104 060b 	add.w	r6, r4, #11
 800997a:	f000 fa07 	bl	8009d8c <__malloc_unlock>
 800997e:	f026 0607 	bic.w	r6, r6, #7
 8009982:	1d23      	adds	r3, r4, #4
 8009984:	1af2      	subs	r2, r6, r3
 8009986:	d0b6      	beq.n	80098f6 <_malloc_r+0x22>
 8009988:	1b9b      	subs	r3, r3, r6
 800998a:	50a3      	str	r3, [r4, r2]
 800998c:	e7b3      	b.n	80098f6 <_malloc_r+0x22>
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	42a3      	cmp	r3, r4
 8009992:	bf0c      	ite	eq
 8009994:	6032      	streq	r2, [r6, #0]
 8009996:	605a      	strne	r2, [r3, #4]
 8009998:	e7ec      	b.n	8009974 <_malloc_r+0xa0>
 800999a:	4623      	mov	r3, r4
 800999c:	6864      	ldr	r4, [r4, #4]
 800999e:	e7b2      	b.n	8009906 <_malloc_r+0x32>
 80099a0:	4634      	mov	r4, r6
 80099a2:	6876      	ldr	r6, [r6, #4]
 80099a4:	e7b9      	b.n	800991a <_malloc_r+0x46>
 80099a6:	230c      	movs	r3, #12
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	4638      	mov	r0, r7
 80099ac:	f000 f9ee 	bl	8009d8c <__malloc_unlock>
 80099b0:	e7a1      	b.n	80098f6 <_malloc_r+0x22>
 80099b2:	6025      	str	r5, [r4, #0]
 80099b4:	e7de      	b.n	8009974 <_malloc_r+0xa0>
 80099b6:	bf00      	nop
 80099b8:	200003e4 	.word	0x200003e4

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	688e      	ldr	r6, [r1, #8]
 80099c2:	429e      	cmp	r6, r3
 80099c4:	4682      	mov	sl, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	4690      	mov	r8, r2
 80099ca:	461f      	mov	r7, r3
 80099cc:	d838      	bhi.n	8009a40 <__ssputs_r+0x84>
 80099ce:	898a      	ldrh	r2, [r1, #12]
 80099d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099d4:	d032      	beq.n	8009a3c <__ssputs_r+0x80>
 80099d6:	6825      	ldr	r5, [r4, #0]
 80099d8:	6909      	ldr	r1, [r1, #16]
 80099da:	eba5 0901 	sub.w	r9, r5, r1
 80099de:	6965      	ldr	r5, [r4, #20]
 80099e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e8:	3301      	adds	r3, #1
 80099ea:	444b      	add	r3, r9
 80099ec:	106d      	asrs	r5, r5, #1
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf38      	it	cc
 80099f2:	461d      	movcc	r5, r3
 80099f4:	0553      	lsls	r3, r2, #21
 80099f6:	d531      	bpl.n	8009a5c <__ssputs_r+0xa0>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7ff ff6b 	bl	80098d4 <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b950      	cbnz	r0, 8009a18 <__ssputs_r+0x5c>
 8009a02:	230c      	movs	r3, #12
 8009a04:	f8ca 3000 	str.w	r3, [sl]
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	6921      	ldr	r1, [r4, #16]
 8009a1a:	464a      	mov	r2, r9
 8009a1c:	f7ff fa08 	bl	8008e30 <memcpy>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	6126      	str	r6, [r4, #16]
 8009a2e:	6165      	str	r5, [r4, #20]
 8009a30:	444e      	add	r6, r9
 8009a32:	eba5 0509 	sub.w	r5, r5, r9
 8009a36:	6026      	str	r6, [r4, #0]
 8009a38:	60a5      	str	r5, [r4, #8]
 8009a3a:	463e      	mov	r6, r7
 8009a3c:	42be      	cmp	r6, r7
 8009a3e:	d900      	bls.n	8009a42 <__ssputs_r+0x86>
 8009a40:	463e      	mov	r6, r7
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	4632      	mov	r2, r6
 8009a46:	4641      	mov	r1, r8
 8009a48:	f000 f980 	bl	8009d4c <memmove>
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	1b9b      	subs	r3, r3, r6
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	4433      	add	r3, r6
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7db      	b.n	8009a14 <__ssputs_r+0x58>
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	f000 f99b 	bl	8009d98 <_realloc_r>
 8009a62:	4606      	mov	r6, r0
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d1e1      	bne.n	8009a2c <__ssputs_r+0x70>
 8009a68:	6921      	ldr	r1, [r4, #16]
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	f7ff fec6 	bl	80097fc <_free_r>
 8009a70:	e7c7      	b.n	8009a02 <__ssputs_r+0x46>
	...

08009a74 <_svfiprintf_r>:
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4698      	mov	r8, r3
 8009a7a:	898b      	ldrh	r3, [r1, #12]
 8009a7c:	061b      	lsls	r3, r3, #24
 8009a7e:	b09d      	sub	sp, #116	; 0x74
 8009a80:	4607      	mov	r7, r0
 8009a82:	460d      	mov	r5, r1
 8009a84:	4614      	mov	r4, r2
 8009a86:	d50e      	bpl.n	8009aa6 <_svfiprintf_r+0x32>
 8009a88:	690b      	ldr	r3, [r1, #16]
 8009a8a:	b963      	cbnz	r3, 8009aa6 <_svfiprintf_r+0x32>
 8009a8c:	2140      	movs	r1, #64	; 0x40
 8009a8e:	f7ff ff21 	bl	80098d4 <_malloc_r>
 8009a92:	6028      	str	r0, [r5, #0]
 8009a94:	6128      	str	r0, [r5, #16]
 8009a96:	b920      	cbnz	r0, 8009aa2 <_svfiprintf_r+0x2e>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e0d1      	b.n	8009c46 <_svfiprintf_r+0x1d2>
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	616b      	str	r3, [r5, #20]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aaa:	2320      	movs	r3, #32
 8009aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab4:	2330      	movs	r3, #48	; 0x30
 8009ab6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c60 <_svfiprintf_r+0x1ec>
 8009aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009abe:	f04f 0901 	mov.w	r9, #1
 8009ac2:	4623      	mov	r3, r4
 8009ac4:	469a      	mov	sl, r3
 8009ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aca:	b10a      	cbz	r2, 8009ad0 <_svfiprintf_r+0x5c>
 8009acc:	2a25      	cmp	r2, #37	; 0x25
 8009ace:	d1f9      	bne.n	8009ac4 <_svfiprintf_r+0x50>
 8009ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad4:	d00b      	beq.n	8009aee <_svfiprintf_r+0x7a>
 8009ad6:	465b      	mov	r3, fp
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	4638      	mov	r0, r7
 8009ade:	f7ff ff6d 	bl	80099bc <__ssputs_r>
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f000 80aa 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aea:	445a      	add	r2, fp
 8009aec:	9209      	str	r2, [sp, #36]	; 0x24
 8009aee:	f89a 3000 	ldrb.w	r3, [sl]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80a2 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009af8:	2300      	movs	r3, #0
 8009afa:	f04f 32ff 	mov.w	r2, #4294967295
 8009afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b02:	f10a 0a01 	add.w	sl, sl, #1
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b10:	4654      	mov	r4, sl
 8009b12:	2205      	movs	r2, #5
 8009b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b18:	4851      	ldr	r0, [pc, #324]	; (8009c60 <_svfiprintf_r+0x1ec>)
 8009b1a:	f7f6 fb61 	bl	80001e0 <memchr>
 8009b1e:	9a04      	ldr	r2, [sp, #16]
 8009b20:	b9d8      	cbnz	r0, 8009b5a <_svfiprintf_r+0xe6>
 8009b22:	06d0      	lsls	r0, r2, #27
 8009b24:	bf44      	itt	mi
 8009b26:	2320      	movmi	r3, #32
 8009b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2c:	0711      	lsls	r1, r2, #28
 8009b2e:	bf44      	itt	mi
 8009b30:	232b      	movmi	r3, #43	; 0x2b
 8009b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b36:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3c:	d015      	beq.n	8009b6a <_svfiprintf_r+0xf6>
 8009b3e:	9a07      	ldr	r2, [sp, #28]
 8009b40:	4654      	mov	r4, sl
 8009b42:	2000      	movs	r0, #0
 8009b44:	f04f 0c0a 	mov.w	ip, #10
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4e:	3b30      	subs	r3, #48	; 0x30
 8009b50:	2b09      	cmp	r3, #9
 8009b52:	d94e      	bls.n	8009bf2 <_svfiprintf_r+0x17e>
 8009b54:	b1b0      	cbz	r0, 8009b84 <_svfiprintf_r+0x110>
 8009b56:	9207      	str	r2, [sp, #28]
 8009b58:	e014      	b.n	8009b84 <_svfiprintf_r+0x110>
 8009b5a:	eba0 0308 	sub.w	r3, r0, r8
 8009b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b62:	4313      	orrs	r3, r2
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	46a2      	mov	sl, r4
 8009b68:	e7d2      	b.n	8009b10 <_svfiprintf_r+0x9c>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	1d19      	adds	r1, r3, #4
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	9103      	str	r1, [sp, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bfbb      	ittet	lt
 8009b76:	425b      	neglt	r3, r3
 8009b78:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7c:	9307      	strge	r3, [sp, #28]
 8009b7e:	9307      	strlt	r3, [sp, #28]
 8009b80:	bfb8      	it	lt
 8009b82:	9204      	strlt	r2, [sp, #16]
 8009b84:	7823      	ldrb	r3, [r4, #0]
 8009b86:	2b2e      	cmp	r3, #46	; 0x2e
 8009b88:	d10c      	bne.n	8009ba4 <_svfiprintf_r+0x130>
 8009b8a:	7863      	ldrb	r3, [r4, #1]
 8009b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8e:	d135      	bne.n	8009bfc <_svfiprintf_r+0x188>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1d1a      	adds	r2, r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	9203      	str	r2, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfb8      	it	lt
 8009b9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba0:	3402      	adds	r4, #2
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c70 <_svfiprintf_r+0x1fc>
 8009ba8:	7821      	ldrb	r1, [r4, #0]
 8009baa:	2203      	movs	r2, #3
 8009bac:	4650      	mov	r0, sl
 8009bae:	f7f6 fb17 	bl	80001e0 <memchr>
 8009bb2:	b140      	cbz	r0, 8009bc6 <_svfiprintf_r+0x152>
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	eba0 000a 	sub.w	r0, r0, sl
 8009bba:	fa03 f000 	lsl.w	r0, r3, r0
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	4303      	orrs	r3, r0
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bca:	4826      	ldr	r0, [pc, #152]	; (8009c64 <_svfiprintf_r+0x1f0>)
 8009bcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd0:	2206      	movs	r2, #6
 8009bd2:	f7f6 fb05 	bl	80001e0 <memchr>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d038      	beq.n	8009c4c <_svfiprintf_r+0x1d8>
 8009bda:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <_svfiprintf_r+0x1f4>)
 8009bdc:	bb1b      	cbnz	r3, 8009c26 <_svfiprintf_r+0x1b2>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	3307      	adds	r3, #7
 8009be2:	f023 0307 	bic.w	r3, r3, #7
 8009be6:	3308      	adds	r3, #8
 8009be8:	9303      	str	r3, [sp, #12]
 8009bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bec:	4433      	add	r3, r6
 8009bee:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf0:	e767      	b.n	8009ac2 <_svfiprintf_r+0x4e>
 8009bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	e7a5      	b.n	8009b48 <_svfiprintf_r+0xd4>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	3401      	adds	r4, #1
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	4619      	mov	r1, r3
 8009c04:	f04f 0c0a 	mov.w	ip, #10
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c0e:	3a30      	subs	r2, #48	; 0x30
 8009c10:	2a09      	cmp	r2, #9
 8009c12:	d903      	bls.n	8009c1c <_svfiprintf_r+0x1a8>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0c5      	beq.n	8009ba4 <_svfiprintf_r+0x130>
 8009c18:	9105      	str	r1, [sp, #20]
 8009c1a:	e7c3      	b.n	8009ba4 <_svfiprintf_r+0x130>
 8009c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c20:	4604      	mov	r4, r0
 8009c22:	2301      	movs	r3, #1
 8009c24:	e7f0      	b.n	8009c08 <_svfiprintf_r+0x194>
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7fc fa11 	bl	8006058 <_printf_float>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	4606      	mov	r6, r0
 8009c3a:	d1d6      	bne.n	8009bea <_svfiprintf_r+0x176>
 8009c3c:	89ab      	ldrh	r3, [r5, #12]
 8009c3e:	065b      	lsls	r3, r3, #25
 8009c40:	f53f af2c 	bmi.w	8009a9c <_svfiprintf_r+0x28>
 8009c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c46:	b01d      	add	sp, #116	; 0x74
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4638      	mov	r0, r7
 8009c58:	f7fc fca2 	bl	80065a0 <_printf_i>
 8009c5c:	e7eb      	b.n	8009c36 <_svfiprintf_r+0x1c2>
 8009c5e:	bf00      	nop
 8009c60:	0800ad94 	.word	0x0800ad94
 8009c64:	0800ad9e 	.word	0x0800ad9e
 8009c68:	08006059 	.word	0x08006059
 8009c6c:	080099bd 	.word	0x080099bd
 8009c70:	0800ad9a 	.word	0x0800ad9a
 8009c74:	00000000 	.word	0x00000000

08009c78 <nan>:
 8009c78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c80 <nan+0x8>
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	00000000 	.word	0x00000000
 8009c84:	7ff80000 	.word	0x7ff80000

08009c88 <_sbrk_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d06      	ldr	r5, [pc, #24]	; (8009ca4 <_sbrk_r+0x1c>)
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	602b      	str	r3, [r5, #0]
 8009c94:	f7f8 fafa 	bl	800228c <_sbrk>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_sbrk_r+0x1a>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_sbrk_r+0x1a>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	200003ec 	.word	0x200003ec

08009ca8 <strncmp>:
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	b17a      	cbz	r2, 8009ccc <strncmp+0x24>
 8009cac:	4603      	mov	r3, r0
 8009cae:	3901      	subs	r1, #1
 8009cb0:	1884      	adds	r4, r0, r2
 8009cb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009cba:	4290      	cmp	r0, r2
 8009cbc:	d101      	bne.n	8009cc2 <strncmp+0x1a>
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	d101      	bne.n	8009cc6 <strncmp+0x1e>
 8009cc2:	1a80      	subs	r0, r0, r2
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1f3      	bne.n	8009cb2 <strncmp+0xa>
 8009cca:	e7fa      	b.n	8009cc2 <strncmp+0x1a>
 8009ccc:	4610      	mov	r0, r2
 8009cce:	e7f9      	b.n	8009cc4 <strncmp+0x1c>

08009cd0 <__ascii_wctomb>:
 8009cd0:	b149      	cbz	r1, 8009ce6 <__ascii_wctomb+0x16>
 8009cd2:	2aff      	cmp	r2, #255	; 0xff
 8009cd4:	bf85      	ittet	hi
 8009cd6:	238a      	movhi	r3, #138	; 0x8a
 8009cd8:	6003      	strhi	r3, [r0, #0]
 8009cda:	700a      	strbls	r2, [r1, #0]
 8009cdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ce0:	bf98      	it	ls
 8009ce2:	2001      	movls	r0, #1
 8009ce4:	4770      	bx	lr
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4770      	bx	lr
	...

08009cec <__assert_func>:
 8009cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cee:	4614      	mov	r4, r2
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <__assert_func+0x2c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	68d8      	ldr	r0, [r3, #12]
 8009cfa:	b14c      	cbz	r4, 8009d10 <__assert_func+0x24>
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <__assert_func+0x30>)
 8009cfe:	9100      	str	r1, [sp, #0]
 8009d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d04:	4906      	ldr	r1, [pc, #24]	; (8009d20 <__assert_func+0x34>)
 8009d06:	462b      	mov	r3, r5
 8009d08:	f000 f80e 	bl	8009d28 <fiprintf>
 8009d0c:	f000 fa8c 	bl	800a228 <abort>
 8009d10:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <__assert_func+0x38>)
 8009d12:	461c      	mov	r4, r3
 8009d14:	e7f3      	b.n	8009cfe <__assert_func+0x12>
 8009d16:	bf00      	nop
 8009d18:	20000024 	.word	0x20000024
 8009d1c:	0800ada5 	.word	0x0800ada5
 8009d20:	0800adb2 	.word	0x0800adb2
 8009d24:	0800ade0 	.word	0x0800ade0

08009d28 <fiprintf>:
 8009d28:	b40e      	push	{r1, r2, r3}
 8009d2a:	b503      	push	{r0, r1, lr}
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	ab03      	add	r3, sp, #12
 8009d30:	4805      	ldr	r0, [pc, #20]	; (8009d48 <fiprintf+0x20>)
 8009d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d36:	6800      	ldr	r0, [r0, #0]
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	f000 f885 	bl	8009e48 <_vfiprintf_r>
 8009d3e:	b002      	add	sp, #8
 8009d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d44:	b003      	add	sp, #12
 8009d46:	4770      	bx	lr
 8009d48:	20000024 	.word	0x20000024

08009d4c <memmove>:
 8009d4c:	4288      	cmp	r0, r1
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	eb01 0402 	add.w	r4, r1, r2
 8009d54:	d902      	bls.n	8009d5c <memmove+0x10>
 8009d56:	4284      	cmp	r4, r0
 8009d58:	4623      	mov	r3, r4
 8009d5a:	d807      	bhi.n	8009d6c <memmove+0x20>
 8009d5c:	1e43      	subs	r3, r0, #1
 8009d5e:	42a1      	cmp	r1, r4
 8009d60:	d008      	beq.n	8009d74 <memmove+0x28>
 8009d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6a:	e7f8      	b.n	8009d5e <memmove+0x12>
 8009d6c:	4402      	add	r2, r0
 8009d6e:	4601      	mov	r1, r0
 8009d70:	428a      	cmp	r2, r1
 8009d72:	d100      	bne.n	8009d76 <memmove+0x2a>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d7e:	e7f7      	b.n	8009d70 <memmove+0x24>

08009d80 <__malloc_lock>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__malloc_lock+0x8>)
 8009d82:	f000 bc11 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 8009d86:	bf00      	nop
 8009d88:	200003f0 	.word	0x200003f0

08009d8c <__malloc_unlock>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__malloc_unlock+0x8>)
 8009d8e:	f000 bc0c 	b.w	800a5aa <__retarget_lock_release_recursive>
 8009d92:	bf00      	nop
 8009d94:	200003f0 	.word	0x200003f0

08009d98 <_realloc_r>:
 8009d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4614      	mov	r4, r2
 8009da0:	460e      	mov	r6, r1
 8009da2:	b921      	cbnz	r1, 8009dae <_realloc_r+0x16>
 8009da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da8:	4611      	mov	r1, r2
 8009daa:	f7ff bd93 	b.w	80098d4 <_malloc_r>
 8009dae:	b92a      	cbnz	r2, 8009dbc <_realloc_r+0x24>
 8009db0:	f7ff fd24 	bl	80097fc <_free_r>
 8009db4:	4625      	mov	r5, r4
 8009db6:	4628      	mov	r0, r5
 8009db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dbc:	f000 fc5c 	bl	800a678 <_malloc_usable_size_r>
 8009dc0:	4284      	cmp	r4, r0
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	d802      	bhi.n	8009dcc <_realloc_r+0x34>
 8009dc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dca:	d812      	bhi.n	8009df2 <_realloc_r+0x5a>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4640      	mov	r0, r8
 8009dd0:	f7ff fd80 	bl	80098d4 <_malloc_r>
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d0ed      	beq.n	8009db6 <_realloc_r+0x1e>
 8009dda:	42bc      	cmp	r4, r7
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4631      	mov	r1, r6
 8009de0:	bf28      	it	cs
 8009de2:	463a      	movcs	r2, r7
 8009de4:	f7ff f824 	bl	8008e30 <memcpy>
 8009de8:	4631      	mov	r1, r6
 8009dea:	4640      	mov	r0, r8
 8009dec:	f7ff fd06 	bl	80097fc <_free_r>
 8009df0:	e7e1      	b.n	8009db6 <_realloc_r+0x1e>
 8009df2:	4635      	mov	r5, r6
 8009df4:	e7df      	b.n	8009db6 <_realloc_r+0x1e>

08009df6 <__sfputc_r>:
 8009df6:	6893      	ldr	r3, [r2, #8]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	b410      	push	{r4}
 8009dfe:	6093      	str	r3, [r2, #8]
 8009e00:	da08      	bge.n	8009e14 <__sfputc_r+0x1e>
 8009e02:	6994      	ldr	r4, [r2, #24]
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	db01      	blt.n	8009e0c <__sfputc_r+0x16>
 8009e08:	290a      	cmp	r1, #10
 8009e0a:	d103      	bne.n	8009e14 <__sfputc_r+0x1e>
 8009e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e10:	f000 b94a 	b.w	800a0a8 <__swbuf_r>
 8009e14:	6813      	ldr	r3, [r2, #0]
 8009e16:	1c58      	adds	r0, r3, #1
 8009e18:	6010      	str	r0, [r2, #0]
 8009e1a:	7019      	strb	r1, [r3, #0]
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <__sfputs_r>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	4606      	mov	r6, r0
 8009e28:	460f      	mov	r7, r1
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	18d5      	adds	r5, r2, r3
 8009e2e:	42ac      	cmp	r4, r5
 8009e30:	d101      	bne.n	8009e36 <__sfputs_r+0x12>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e007      	b.n	8009e46 <__sfputs_r+0x22>
 8009e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3a:	463a      	mov	r2, r7
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7ff ffda 	bl	8009df6 <__sfputc_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d1f3      	bne.n	8009e2e <__sfputs_r+0xa>
 8009e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e48 <_vfiprintf_r>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	b09d      	sub	sp, #116	; 0x74
 8009e50:	4614      	mov	r4, r2
 8009e52:	4698      	mov	r8, r3
 8009e54:	4606      	mov	r6, r0
 8009e56:	b118      	cbz	r0, 8009e60 <_vfiprintf_r+0x18>
 8009e58:	6983      	ldr	r3, [r0, #24]
 8009e5a:	b90b      	cbnz	r3, 8009e60 <_vfiprintf_r+0x18>
 8009e5c:	f000 fb06 	bl	800a46c <__sinit>
 8009e60:	4b89      	ldr	r3, [pc, #548]	; (800a088 <_vfiprintf_r+0x240>)
 8009e62:	429d      	cmp	r5, r3
 8009e64:	d11b      	bne.n	8009e9e <_vfiprintf_r+0x56>
 8009e66:	6875      	ldr	r5, [r6, #4]
 8009e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6a:	07d9      	lsls	r1, r3, #31
 8009e6c:	d405      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	059a      	lsls	r2, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e76:	f000 fb97 	bl	800a5a8 <__retarget_lock_acquire_recursive>
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	071b      	lsls	r3, r3, #28
 8009e7e:	d501      	bpl.n	8009e84 <_vfiprintf_r+0x3c>
 8009e80:	692b      	ldr	r3, [r5, #16]
 8009e82:	b9eb      	cbnz	r3, 8009ec0 <_vfiprintf_r+0x78>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4630      	mov	r0, r6
 8009e88:	f000 f960 	bl	800a14c <__swsetup_r>
 8009e8c:	b1c0      	cbz	r0, 8009ec0 <_vfiprintf_r+0x78>
 8009e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e90:	07dc      	lsls	r4, r3, #31
 8009e92:	d50e      	bpl.n	8009eb2 <_vfiprintf_r+0x6a>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	b01d      	add	sp, #116	; 0x74
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	4b7b      	ldr	r3, [pc, #492]	; (800a08c <_vfiprintf_r+0x244>)
 8009ea0:	429d      	cmp	r5, r3
 8009ea2:	d101      	bne.n	8009ea8 <_vfiprintf_r+0x60>
 8009ea4:	68b5      	ldr	r5, [r6, #8]
 8009ea6:	e7df      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009ea8:	4b79      	ldr	r3, [pc, #484]	; (800a090 <_vfiprintf_r+0x248>)
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	bf08      	it	eq
 8009eae:	68f5      	ldreq	r5, [r6, #12]
 8009eb0:	e7da      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	0598      	lsls	r0, r3, #22
 8009eb6:	d4ed      	bmi.n	8009e94 <_vfiprintf_r+0x4c>
 8009eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eba:	f000 fb76 	bl	800a5aa <__retarget_lock_release_recursive>
 8009ebe:	e7e9      	b.n	8009e94 <_vfiprintf_r+0x4c>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ece:	2330      	movs	r3, #48	; 0x30
 8009ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a094 <_vfiprintf_r+0x24c>
 8009ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed8:	f04f 0901 	mov.w	r9, #1
 8009edc:	4623      	mov	r3, r4
 8009ede:	469a      	mov	sl, r3
 8009ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee4:	b10a      	cbz	r2, 8009eea <_vfiprintf_r+0xa2>
 8009ee6:	2a25      	cmp	r2, #37	; 0x25
 8009ee8:	d1f9      	bne.n	8009ede <_vfiprintf_r+0x96>
 8009eea:	ebba 0b04 	subs.w	fp, sl, r4
 8009eee:	d00b      	beq.n	8009f08 <_vfiprintf_r+0xc0>
 8009ef0:	465b      	mov	r3, fp
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ff94 	bl	8009e24 <__sfputs_r>
 8009efc:	3001      	adds	r0, #1
 8009efe:	f000 80aa 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f04:	445a      	add	r2, fp
 8009f06:	9209      	str	r2, [sp, #36]	; 0x24
 8009f08:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80a2 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f1c:	f10a 0a01 	add.w	sl, sl, #1
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	9307      	str	r3, [sp, #28]
 8009f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f28:	931a      	str	r3, [sp, #104]	; 0x68
 8009f2a:	4654      	mov	r4, sl
 8009f2c:	2205      	movs	r2, #5
 8009f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f32:	4858      	ldr	r0, [pc, #352]	; (800a094 <_vfiprintf_r+0x24c>)
 8009f34:	f7f6 f954 	bl	80001e0 <memchr>
 8009f38:	9a04      	ldr	r2, [sp, #16]
 8009f3a:	b9d8      	cbnz	r0, 8009f74 <_vfiprintf_r+0x12c>
 8009f3c:	06d1      	lsls	r1, r2, #27
 8009f3e:	bf44      	itt	mi
 8009f40:	2320      	movmi	r3, #32
 8009f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f46:	0713      	lsls	r3, r2, #28
 8009f48:	bf44      	itt	mi
 8009f4a:	232b      	movmi	r3, #43	; 0x2b
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	f89a 3000 	ldrb.w	r3, [sl]
 8009f54:	2b2a      	cmp	r3, #42	; 0x2a
 8009f56:	d015      	beq.n	8009f84 <_vfiprintf_r+0x13c>
 8009f58:	9a07      	ldr	r2, [sp, #28]
 8009f5a:	4654      	mov	r4, sl
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f04f 0c0a 	mov.w	ip, #10
 8009f62:	4621      	mov	r1, r4
 8009f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f68:	3b30      	subs	r3, #48	; 0x30
 8009f6a:	2b09      	cmp	r3, #9
 8009f6c:	d94e      	bls.n	800a00c <_vfiprintf_r+0x1c4>
 8009f6e:	b1b0      	cbz	r0, 8009f9e <_vfiprintf_r+0x156>
 8009f70:	9207      	str	r2, [sp, #28]
 8009f72:	e014      	b.n	8009f9e <_vfiprintf_r+0x156>
 8009f74:	eba0 0308 	sub.w	r3, r0, r8
 8009f78:	fa09 f303 	lsl.w	r3, r9, r3
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	46a2      	mov	sl, r4
 8009f82:	e7d2      	b.n	8009f2a <_vfiprintf_r+0xe2>
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	1d19      	adds	r1, r3, #4
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	9103      	str	r1, [sp, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	bfbb      	ittet	lt
 8009f90:	425b      	neglt	r3, r3
 8009f92:	f042 0202 	orrlt.w	r2, r2, #2
 8009f96:	9307      	strge	r3, [sp, #28]
 8009f98:	9307      	strlt	r3, [sp, #28]
 8009f9a:	bfb8      	it	lt
 8009f9c:	9204      	strlt	r2, [sp, #16]
 8009f9e:	7823      	ldrb	r3, [r4, #0]
 8009fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8009fa2:	d10c      	bne.n	8009fbe <_vfiprintf_r+0x176>
 8009fa4:	7863      	ldrb	r3, [r4, #1]
 8009fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa8:	d135      	bne.n	800a016 <_vfiprintf_r+0x1ce>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	1d1a      	adds	r2, r3, #4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	9203      	str	r2, [sp, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfb8      	it	lt
 8009fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fba:	3402      	adds	r4, #2
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0a4 <_vfiprintf_r+0x25c>
 8009fc2:	7821      	ldrb	r1, [r4, #0]
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	f7f6 f90a 	bl	80001e0 <memchr>
 8009fcc:	b140      	cbz	r0, 8009fe0 <_vfiprintf_r+0x198>
 8009fce:	2340      	movs	r3, #64	; 0x40
 8009fd0:	eba0 000a 	sub.w	r0, r0, sl
 8009fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fd8:	9b04      	ldr	r3, [sp, #16]
 8009fda:	4303      	orrs	r3, r0
 8009fdc:	3401      	adds	r4, #1
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe4:	482c      	ldr	r0, [pc, #176]	; (800a098 <_vfiprintf_r+0x250>)
 8009fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fea:	2206      	movs	r2, #6
 8009fec:	f7f6 f8f8 	bl	80001e0 <memchr>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d03f      	beq.n	800a074 <_vfiprintf_r+0x22c>
 8009ff4:	4b29      	ldr	r3, [pc, #164]	; (800a09c <_vfiprintf_r+0x254>)
 8009ff6:	bb1b      	cbnz	r3, 800a040 <_vfiprintf_r+0x1f8>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	3307      	adds	r3, #7
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a006:	443b      	add	r3, r7
 800a008:	9309      	str	r3, [sp, #36]	; 0x24
 800a00a:	e767      	b.n	8009edc <_vfiprintf_r+0x94>
 800a00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a010:	460c      	mov	r4, r1
 800a012:	2001      	movs	r0, #1
 800a014:	e7a5      	b.n	8009f62 <_vfiprintf_r+0x11a>
 800a016:	2300      	movs	r3, #0
 800a018:	3401      	adds	r4, #1
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	4619      	mov	r1, r3
 800a01e:	f04f 0c0a 	mov.w	ip, #10
 800a022:	4620      	mov	r0, r4
 800a024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a028:	3a30      	subs	r2, #48	; 0x30
 800a02a:	2a09      	cmp	r2, #9
 800a02c:	d903      	bls.n	800a036 <_vfiprintf_r+0x1ee>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0c5      	beq.n	8009fbe <_vfiprintf_r+0x176>
 800a032:	9105      	str	r1, [sp, #20]
 800a034:	e7c3      	b.n	8009fbe <_vfiprintf_r+0x176>
 800a036:	fb0c 2101 	mla	r1, ip, r1, r2
 800a03a:	4604      	mov	r4, r0
 800a03c:	2301      	movs	r3, #1
 800a03e:	e7f0      	b.n	800a022 <_vfiprintf_r+0x1da>
 800a040:	ab03      	add	r3, sp, #12
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	462a      	mov	r2, r5
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a048:	a904      	add	r1, sp, #16
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7fc f804 	bl	8006058 <_printf_float>
 800a050:	4607      	mov	r7, r0
 800a052:	1c78      	adds	r0, r7, #1
 800a054:	d1d6      	bne.n	800a004 <_vfiprintf_r+0x1bc>
 800a056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a058:	07d9      	lsls	r1, r3, #31
 800a05a:	d405      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	059a      	lsls	r2, r3, #22
 800a060:	d402      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a064:	f000 faa1 	bl	800a5aa <__retarget_lock_release_recursive>
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	065b      	lsls	r3, r3, #25
 800a06c:	f53f af12 	bmi.w	8009e94 <_vfiprintf_r+0x4c>
 800a070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a072:	e711      	b.n	8009e98 <_vfiprintf_r+0x50>
 800a074:	ab03      	add	r3, sp, #12
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	462a      	mov	r2, r5
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a07c:	a904      	add	r1, sp, #16
 800a07e:	4630      	mov	r0, r6
 800a080:	f7fc fa8e 	bl	80065a0 <_printf_i>
 800a084:	e7e4      	b.n	800a050 <_vfiprintf_r+0x208>
 800a086:	bf00      	nop
 800a088:	0800ae04 	.word	0x0800ae04
 800a08c:	0800ae24 	.word	0x0800ae24
 800a090:	0800ade4 	.word	0x0800ade4
 800a094:	0800ad94 	.word	0x0800ad94
 800a098:	0800ad9e 	.word	0x0800ad9e
 800a09c:	08006059 	.word	0x08006059
 800a0a0:	08009e25 	.word	0x08009e25
 800a0a4:	0800ad9a 	.word	0x0800ad9a

0800a0a8 <__swbuf_r>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	460e      	mov	r6, r1
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	b118      	cbz	r0, 800a0ba <__swbuf_r+0x12>
 800a0b2:	6983      	ldr	r3, [r0, #24]
 800a0b4:	b90b      	cbnz	r3, 800a0ba <__swbuf_r+0x12>
 800a0b6:	f000 f9d9 	bl	800a46c <__sinit>
 800a0ba:	4b21      	ldr	r3, [pc, #132]	; (800a140 <__swbuf_r+0x98>)
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	d12b      	bne.n	800a118 <__swbuf_r+0x70>
 800a0c0:	686c      	ldr	r4, [r5, #4]
 800a0c2:	69a3      	ldr	r3, [r4, #24]
 800a0c4:	60a3      	str	r3, [r4, #8]
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	071a      	lsls	r2, r3, #28
 800a0ca:	d52f      	bpl.n	800a12c <__swbuf_r+0x84>
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	b36b      	cbz	r3, 800a12c <__swbuf_r+0x84>
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	6820      	ldr	r0, [r4, #0]
 800a0d4:	1ac0      	subs	r0, r0, r3
 800a0d6:	6963      	ldr	r3, [r4, #20]
 800a0d8:	b2f6      	uxtb	r6, r6
 800a0da:	4283      	cmp	r3, r0
 800a0dc:	4637      	mov	r7, r6
 800a0de:	dc04      	bgt.n	800a0ea <__swbuf_r+0x42>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f92e 	bl	800a344 <_fflush_r>
 800a0e8:	bb30      	cbnz	r0, 800a138 <__swbuf_r+0x90>
 800a0ea:	68a3      	ldr	r3, [r4, #8]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	60a3      	str	r3, [r4, #8]
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	6022      	str	r2, [r4, #0]
 800a0f6:	701e      	strb	r6, [r3, #0]
 800a0f8:	6963      	ldr	r3, [r4, #20]
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	4283      	cmp	r3, r0
 800a0fe:	d004      	beq.n	800a10a <__swbuf_r+0x62>
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	07db      	lsls	r3, r3, #31
 800a104:	d506      	bpl.n	800a114 <__swbuf_r+0x6c>
 800a106:	2e0a      	cmp	r6, #10
 800a108:	d104      	bne.n	800a114 <__swbuf_r+0x6c>
 800a10a:	4621      	mov	r1, r4
 800a10c:	4628      	mov	r0, r5
 800a10e:	f000 f919 	bl	800a344 <_fflush_r>
 800a112:	b988      	cbnz	r0, 800a138 <__swbuf_r+0x90>
 800a114:	4638      	mov	r0, r7
 800a116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a118:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <__swbuf_r+0x9c>)
 800a11a:	429c      	cmp	r4, r3
 800a11c:	d101      	bne.n	800a122 <__swbuf_r+0x7a>
 800a11e:	68ac      	ldr	r4, [r5, #8]
 800a120:	e7cf      	b.n	800a0c2 <__swbuf_r+0x1a>
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <__swbuf_r+0xa0>)
 800a124:	429c      	cmp	r4, r3
 800a126:	bf08      	it	eq
 800a128:	68ec      	ldreq	r4, [r5, #12]
 800a12a:	e7ca      	b.n	800a0c2 <__swbuf_r+0x1a>
 800a12c:	4621      	mov	r1, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f80c 	bl	800a14c <__swsetup_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	d0cb      	beq.n	800a0d0 <__swbuf_r+0x28>
 800a138:	f04f 37ff 	mov.w	r7, #4294967295
 800a13c:	e7ea      	b.n	800a114 <__swbuf_r+0x6c>
 800a13e:	bf00      	nop
 800a140:	0800ae04 	.word	0x0800ae04
 800a144:	0800ae24 	.word	0x0800ae24
 800a148:	0800ade4 	.word	0x0800ade4

0800a14c <__swsetup_r>:
 800a14c:	4b32      	ldr	r3, [pc, #200]	; (800a218 <__swsetup_r+0xcc>)
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	681d      	ldr	r5, [r3, #0]
 800a152:	4606      	mov	r6, r0
 800a154:	460c      	mov	r4, r1
 800a156:	b125      	cbz	r5, 800a162 <__swsetup_r+0x16>
 800a158:	69ab      	ldr	r3, [r5, #24]
 800a15a:	b913      	cbnz	r3, 800a162 <__swsetup_r+0x16>
 800a15c:	4628      	mov	r0, r5
 800a15e:	f000 f985 	bl	800a46c <__sinit>
 800a162:	4b2e      	ldr	r3, [pc, #184]	; (800a21c <__swsetup_r+0xd0>)
 800a164:	429c      	cmp	r4, r3
 800a166:	d10f      	bne.n	800a188 <__swsetup_r+0x3c>
 800a168:	686c      	ldr	r4, [r5, #4]
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a170:	0719      	lsls	r1, r3, #28
 800a172:	d42c      	bmi.n	800a1ce <__swsetup_r+0x82>
 800a174:	06dd      	lsls	r5, r3, #27
 800a176:	d411      	bmi.n	800a19c <__swsetup_r+0x50>
 800a178:	2309      	movs	r3, #9
 800a17a:	6033      	str	r3, [r6, #0]
 800a17c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	e03e      	b.n	800a206 <__swsetup_r+0xba>
 800a188:	4b25      	ldr	r3, [pc, #148]	; (800a220 <__swsetup_r+0xd4>)
 800a18a:	429c      	cmp	r4, r3
 800a18c:	d101      	bne.n	800a192 <__swsetup_r+0x46>
 800a18e:	68ac      	ldr	r4, [r5, #8]
 800a190:	e7eb      	b.n	800a16a <__swsetup_r+0x1e>
 800a192:	4b24      	ldr	r3, [pc, #144]	; (800a224 <__swsetup_r+0xd8>)
 800a194:	429c      	cmp	r4, r3
 800a196:	bf08      	it	eq
 800a198:	68ec      	ldreq	r4, [r5, #12]
 800a19a:	e7e6      	b.n	800a16a <__swsetup_r+0x1e>
 800a19c:	0758      	lsls	r0, r3, #29
 800a19e:	d512      	bpl.n	800a1c6 <__swsetup_r+0x7a>
 800a1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1a2:	b141      	cbz	r1, 800a1b6 <__swsetup_r+0x6a>
 800a1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a8:	4299      	cmp	r1, r3
 800a1aa:	d002      	beq.n	800a1b2 <__swsetup_r+0x66>
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fb25 	bl	80097fc <_free_r>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6363      	str	r3, [r4, #52]	; 0x34
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f043 0308 	orr.w	r3, r3, #8
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	b94b      	cbnz	r3, 800a1e6 <__swsetup_r+0x9a>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1dc:	d003      	beq.n	800a1e6 <__swsetup_r+0x9a>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 fa09 	bl	800a5f8 <__smakebuf_r>
 800a1e6:	89a0      	ldrh	r0, [r4, #12]
 800a1e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ec:	f010 0301 	ands.w	r3, r0, #1
 800a1f0:	d00a      	beq.n	800a208 <__swsetup_r+0xbc>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	6963      	ldr	r3, [r4, #20]
 800a1f8:	425b      	negs	r3, r3
 800a1fa:	61a3      	str	r3, [r4, #24]
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	b943      	cbnz	r3, 800a212 <__swsetup_r+0xc6>
 800a200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a204:	d1ba      	bne.n	800a17c <__swsetup_r+0x30>
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	0781      	lsls	r1, r0, #30
 800a20a:	bf58      	it	pl
 800a20c:	6963      	ldrpl	r3, [r4, #20]
 800a20e:	60a3      	str	r3, [r4, #8]
 800a210:	e7f4      	b.n	800a1fc <__swsetup_r+0xb0>
 800a212:	2000      	movs	r0, #0
 800a214:	e7f7      	b.n	800a206 <__swsetup_r+0xba>
 800a216:	bf00      	nop
 800a218:	20000024 	.word	0x20000024
 800a21c:	0800ae04 	.word	0x0800ae04
 800a220:	0800ae24 	.word	0x0800ae24
 800a224:	0800ade4 	.word	0x0800ade4

0800a228 <abort>:
 800a228:	b508      	push	{r3, lr}
 800a22a:	2006      	movs	r0, #6
 800a22c:	f000 fa54 	bl	800a6d8 <raise>
 800a230:	2001      	movs	r0, #1
 800a232:	f7f7 ffb3 	bl	800219c <_exit>
	...

0800a238 <__sflush_r>:
 800a238:	898a      	ldrh	r2, [r1, #12]
 800a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23e:	4605      	mov	r5, r0
 800a240:	0710      	lsls	r0, r2, #28
 800a242:	460c      	mov	r4, r1
 800a244:	d458      	bmi.n	800a2f8 <__sflush_r+0xc0>
 800a246:	684b      	ldr	r3, [r1, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dc05      	bgt.n	800a258 <__sflush_r+0x20>
 800a24c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dc02      	bgt.n	800a258 <__sflush_r+0x20>
 800a252:	2000      	movs	r0, #0
 800a254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a25a:	2e00      	cmp	r6, #0
 800a25c:	d0f9      	beq.n	800a252 <__sflush_r+0x1a>
 800a25e:	2300      	movs	r3, #0
 800a260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a264:	682f      	ldr	r7, [r5, #0]
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	d032      	beq.n	800a2d0 <__sflush_r+0x98>
 800a26a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	075a      	lsls	r2, r3, #29
 800a270:	d505      	bpl.n	800a27e <__sflush_r+0x46>
 800a272:	6863      	ldr	r3, [r4, #4]
 800a274:	1ac0      	subs	r0, r0, r3
 800a276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a278:	b10b      	cbz	r3, 800a27e <__sflush_r+0x46>
 800a27a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a27c:	1ac0      	subs	r0, r0, r3
 800a27e:	2300      	movs	r3, #0
 800a280:	4602      	mov	r2, r0
 800a282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a284:	6a21      	ldr	r1, [r4, #32]
 800a286:	4628      	mov	r0, r5
 800a288:	47b0      	blx	r6
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	d106      	bne.n	800a29e <__sflush_r+0x66>
 800a290:	6829      	ldr	r1, [r5, #0]
 800a292:	291d      	cmp	r1, #29
 800a294:	d82c      	bhi.n	800a2f0 <__sflush_r+0xb8>
 800a296:	4a2a      	ldr	r2, [pc, #168]	; (800a340 <__sflush_r+0x108>)
 800a298:	40ca      	lsrs	r2, r1
 800a29a:	07d6      	lsls	r6, r2, #31
 800a29c:	d528      	bpl.n	800a2f0 <__sflush_r+0xb8>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	6062      	str	r2, [r4, #4]
 800a2a2:	04d9      	lsls	r1, r3, #19
 800a2a4:	6922      	ldr	r2, [r4, #16]
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	d504      	bpl.n	800a2b4 <__sflush_r+0x7c>
 800a2aa:	1c42      	adds	r2, r0, #1
 800a2ac:	d101      	bne.n	800a2b2 <__sflush_r+0x7a>
 800a2ae:	682b      	ldr	r3, [r5, #0]
 800a2b0:	b903      	cbnz	r3, 800a2b4 <__sflush_r+0x7c>
 800a2b2:	6560      	str	r0, [r4, #84]	; 0x54
 800a2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b6:	602f      	str	r7, [r5, #0]
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	d0ca      	beq.n	800a252 <__sflush_r+0x1a>
 800a2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	d002      	beq.n	800a2ca <__sflush_r+0x92>
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f7ff fa99 	bl	80097fc <_free_r>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a2ce:	e7c1      	b.n	800a254 <__sflush_r+0x1c>
 800a2d0:	6a21      	ldr	r1, [r4, #32]
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b0      	blx	r6
 800a2d8:	1c41      	adds	r1, r0, #1
 800a2da:	d1c7      	bne.n	800a26c <__sflush_r+0x34>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0c4      	beq.n	800a26c <__sflush_r+0x34>
 800a2e2:	2b1d      	cmp	r3, #29
 800a2e4:	d001      	beq.n	800a2ea <__sflush_r+0xb2>
 800a2e6:	2b16      	cmp	r3, #22
 800a2e8:	d101      	bne.n	800a2ee <__sflush_r+0xb6>
 800a2ea:	602f      	str	r7, [r5, #0]
 800a2ec:	e7b1      	b.n	800a252 <__sflush_r+0x1a>
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	e7ad      	b.n	800a254 <__sflush_r+0x1c>
 800a2f8:	690f      	ldr	r7, [r1, #16]
 800a2fa:	2f00      	cmp	r7, #0
 800a2fc:	d0a9      	beq.n	800a252 <__sflush_r+0x1a>
 800a2fe:	0793      	lsls	r3, r2, #30
 800a300:	680e      	ldr	r6, [r1, #0]
 800a302:	bf08      	it	eq
 800a304:	694b      	ldreq	r3, [r1, #20]
 800a306:	600f      	str	r7, [r1, #0]
 800a308:	bf18      	it	ne
 800a30a:	2300      	movne	r3, #0
 800a30c:	eba6 0807 	sub.w	r8, r6, r7
 800a310:	608b      	str	r3, [r1, #8]
 800a312:	f1b8 0f00 	cmp.w	r8, #0
 800a316:	dd9c      	ble.n	800a252 <__sflush_r+0x1a>
 800a318:	6a21      	ldr	r1, [r4, #32]
 800a31a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a31c:	4643      	mov	r3, r8
 800a31e:	463a      	mov	r2, r7
 800a320:	4628      	mov	r0, r5
 800a322:	47b0      	blx	r6
 800a324:	2800      	cmp	r0, #0
 800a326:	dc06      	bgt.n	800a336 <__sflush_r+0xfe>
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	f04f 30ff 	mov.w	r0, #4294967295
 800a334:	e78e      	b.n	800a254 <__sflush_r+0x1c>
 800a336:	4407      	add	r7, r0
 800a338:	eba8 0800 	sub.w	r8, r8, r0
 800a33c:	e7e9      	b.n	800a312 <__sflush_r+0xda>
 800a33e:	bf00      	nop
 800a340:	20400001 	.word	0x20400001

0800a344 <_fflush_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	4605      	mov	r5, r0
 800a34a:	460c      	mov	r4, r1
 800a34c:	b913      	cbnz	r3, 800a354 <_fflush_r+0x10>
 800a34e:	2500      	movs	r5, #0
 800a350:	4628      	mov	r0, r5
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	b118      	cbz	r0, 800a35e <_fflush_r+0x1a>
 800a356:	6983      	ldr	r3, [r0, #24]
 800a358:	b90b      	cbnz	r3, 800a35e <_fflush_r+0x1a>
 800a35a:	f000 f887 	bl	800a46c <__sinit>
 800a35e:	4b14      	ldr	r3, [pc, #80]	; (800a3b0 <_fflush_r+0x6c>)
 800a360:	429c      	cmp	r4, r3
 800a362:	d11b      	bne.n	800a39c <_fflush_r+0x58>
 800a364:	686c      	ldr	r4, [r5, #4]
 800a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0ef      	beq.n	800a34e <_fflush_r+0xa>
 800a36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a370:	07d0      	lsls	r0, r2, #31
 800a372:	d404      	bmi.n	800a37e <_fflush_r+0x3a>
 800a374:	0599      	lsls	r1, r3, #22
 800a376:	d402      	bmi.n	800a37e <_fflush_r+0x3a>
 800a378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37a:	f000 f915 	bl	800a5a8 <__retarget_lock_acquire_recursive>
 800a37e:	4628      	mov	r0, r5
 800a380:	4621      	mov	r1, r4
 800a382:	f7ff ff59 	bl	800a238 <__sflush_r>
 800a386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a388:	07da      	lsls	r2, r3, #31
 800a38a:	4605      	mov	r5, r0
 800a38c:	d4e0      	bmi.n	800a350 <_fflush_r+0xc>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	059b      	lsls	r3, r3, #22
 800a392:	d4dd      	bmi.n	800a350 <_fflush_r+0xc>
 800a394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a396:	f000 f908 	bl	800a5aa <__retarget_lock_release_recursive>
 800a39a:	e7d9      	b.n	800a350 <_fflush_r+0xc>
 800a39c:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <_fflush_r+0x70>)
 800a39e:	429c      	cmp	r4, r3
 800a3a0:	d101      	bne.n	800a3a6 <_fflush_r+0x62>
 800a3a2:	68ac      	ldr	r4, [r5, #8]
 800a3a4:	e7df      	b.n	800a366 <_fflush_r+0x22>
 800a3a6:	4b04      	ldr	r3, [pc, #16]	; (800a3b8 <_fflush_r+0x74>)
 800a3a8:	429c      	cmp	r4, r3
 800a3aa:	bf08      	it	eq
 800a3ac:	68ec      	ldreq	r4, [r5, #12]
 800a3ae:	e7da      	b.n	800a366 <_fflush_r+0x22>
 800a3b0:	0800ae04 	.word	0x0800ae04
 800a3b4:	0800ae24 	.word	0x0800ae24
 800a3b8:	0800ade4 	.word	0x0800ade4

0800a3bc <std>:
 800a3bc:	2300      	movs	r3, #0
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ca:	6083      	str	r3, [r0, #8]
 800a3cc:	8181      	strh	r1, [r0, #12]
 800a3ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a3d0:	81c2      	strh	r2, [r0, #14]
 800a3d2:	6183      	str	r3, [r0, #24]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	2208      	movs	r2, #8
 800a3d8:	305c      	adds	r0, #92	; 0x5c
 800a3da:	f7fb fd95 	bl	8005f08 <memset>
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <std+0x38>)
 800a3e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <std+0x3c>)
 800a3e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <std+0x40>)
 800a3e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <std+0x44>)
 800a3ec:	6224      	str	r4, [r4, #32]
 800a3ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a3f0:	bd10      	pop	{r4, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800a711 	.word	0x0800a711
 800a3f8:	0800a733 	.word	0x0800a733
 800a3fc:	0800a76b 	.word	0x0800a76b
 800a400:	0800a78f 	.word	0x0800a78f

0800a404 <_cleanup_r>:
 800a404:	4901      	ldr	r1, [pc, #4]	; (800a40c <_cleanup_r+0x8>)
 800a406:	f000 b8af 	b.w	800a568 <_fwalk_reent>
 800a40a:	bf00      	nop
 800a40c:	0800a345 	.word	0x0800a345

0800a410 <__sfmoreglue>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	2268      	movs	r2, #104	; 0x68
 800a414:	1e4d      	subs	r5, r1, #1
 800a416:	4355      	muls	r5, r2
 800a418:	460e      	mov	r6, r1
 800a41a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a41e:	f7ff fa59 	bl	80098d4 <_malloc_r>
 800a422:	4604      	mov	r4, r0
 800a424:	b140      	cbz	r0, 800a438 <__sfmoreglue+0x28>
 800a426:	2100      	movs	r1, #0
 800a428:	e9c0 1600 	strd	r1, r6, [r0]
 800a42c:	300c      	adds	r0, #12
 800a42e:	60a0      	str	r0, [r4, #8]
 800a430:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a434:	f7fb fd68 	bl	8005f08 <memset>
 800a438:	4620      	mov	r0, r4
 800a43a:	bd70      	pop	{r4, r5, r6, pc}

0800a43c <__sfp_lock_acquire>:
 800a43c:	4801      	ldr	r0, [pc, #4]	; (800a444 <__sfp_lock_acquire+0x8>)
 800a43e:	f000 b8b3 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 800a442:	bf00      	nop
 800a444:	200003f1 	.word	0x200003f1

0800a448 <__sfp_lock_release>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__sfp_lock_release+0x8>)
 800a44a:	f000 b8ae 	b.w	800a5aa <__retarget_lock_release_recursive>
 800a44e:	bf00      	nop
 800a450:	200003f1 	.word	0x200003f1

0800a454 <__sinit_lock_acquire>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__sinit_lock_acquire+0x8>)
 800a456:	f000 b8a7 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 800a45a:	bf00      	nop
 800a45c:	200003f2 	.word	0x200003f2

0800a460 <__sinit_lock_release>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__sinit_lock_release+0x8>)
 800a462:	f000 b8a2 	b.w	800a5aa <__retarget_lock_release_recursive>
 800a466:	bf00      	nop
 800a468:	200003f2 	.word	0x200003f2

0800a46c <__sinit>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	4604      	mov	r4, r0
 800a470:	f7ff fff0 	bl	800a454 <__sinit_lock_acquire>
 800a474:	69a3      	ldr	r3, [r4, #24]
 800a476:	b11b      	cbz	r3, 800a480 <__sinit+0x14>
 800a478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a47c:	f7ff bff0 	b.w	800a460 <__sinit_lock_release>
 800a480:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a484:	6523      	str	r3, [r4, #80]	; 0x50
 800a486:	4b13      	ldr	r3, [pc, #76]	; (800a4d4 <__sinit+0x68>)
 800a488:	4a13      	ldr	r2, [pc, #76]	; (800a4d8 <__sinit+0x6c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a48e:	42a3      	cmp	r3, r4
 800a490:	bf04      	itt	eq
 800a492:	2301      	moveq	r3, #1
 800a494:	61a3      	streq	r3, [r4, #24]
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f820 	bl	800a4dc <__sfp>
 800a49c:	6060      	str	r0, [r4, #4]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 f81c 	bl	800a4dc <__sfp>
 800a4a4:	60a0      	str	r0, [r4, #8]
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 f818 	bl	800a4dc <__sfp>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	60e0      	str	r0, [r4, #12]
 800a4b0:	2104      	movs	r1, #4
 800a4b2:	6860      	ldr	r0, [r4, #4]
 800a4b4:	f7ff ff82 	bl	800a3bc <std>
 800a4b8:	68a0      	ldr	r0, [r4, #8]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	2109      	movs	r1, #9
 800a4be:	f7ff ff7d 	bl	800a3bc <std>
 800a4c2:	68e0      	ldr	r0, [r4, #12]
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	2112      	movs	r1, #18
 800a4c8:	f7ff ff78 	bl	800a3bc <std>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	61a3      	str	r3, [r4, #24]
 800a4d0:	e7d2      	b.n	800a478 <__sinit+0xc>
 800a4d2:	bf00      	nop
 800a4d4:	0800aa9c 	.word	0x0800aa9c
 800a4d8:	0800a405 	.word	0x0800a405

0800a4dc <__sfp>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	4607      	mov	r7, r0
 800a4e0:	f7ff ffac 	bl	800a43c <__sfp_lock_acquire>
 800a4e4:	4b1e      	ldr	r3, [pc, #120]	; (800a560 <__sfp+0x84>)
 800a4e6:	681e      	ldr	r6, [r3, #0]
 800a4e8:	69b3      	ldr	r3, [r6, #24]
 800a4ea:	b913      	cbnz	r3, 800a4f2 <__sfp+0x16>
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff ffbd 	bl	800a46c <__sinit>
 800a4f2:	3648      	adds	r6, #72	; 0x48
 800a4f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	d503      	bpl.n	800a504 <__sfp+0x28>
 800a4fc:	6833      	ldr	r3, [r6, #0]
 800a4fe:	b30b      	cbz	r3, 800a544 <__sfp+0x68>
 800a500:	6836      	ldr	r6, [r6, #0]
 800a502:	e7f7      	b.n	800a4f4 <__sfp+0x18>
 800a504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a508:	b9d5      	cbnz	r5, 800a540 <__sfp+0x64>
 800a50a:	4b16      	ldr	r3, [pc, #88]	; (800a564 <__sfp+0x88>)
 800a50c:	60e3      	str	r3, [r4, #12]
 800a50e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a512:	6665      	str	r5, [r4, #100]	; 0x64
 800a514:	f000 f847 	bl	800a5a6 <__retarget_lock_init_recursive>
 800a518:	f7ff ff96 	bl	800a448 <__sfp_lock_release>
 800a51c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a520:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a524:	6025      	str	r5, [r4, #0]
 800a526:	61a5      	str	r5, [r4, #24]
 800a528:	2208      	movs	r2, #8
 800a52a:	4629      	mov	r1, r5
 800a52c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a530:	f7fb fcea 	bl	8005f08 <memset>
 800a534:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a538:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a53c:	4620      	mov	r0, r4
 800a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a540:	3468      	adds	r4, #104	; 0x68
 800a542:	e7d9      	b.n	800a4f8 <__sfp+0x1c>
 800a544:	2104      	movs	r1, #4
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ff62 	bl	800a410 <__sfmoreglue>
 800a54c:	4604      	mov	r4, r0
 800a54e:	6030      	str	r0, [r6, #0]
 800a550:	2800      	cmp	r0, #0
 800a552:	d1d5      	bne.n	800a500 <__sfp+0x24>
 800a554:	f7ff ff78 	bl	800a448 <__sfp_lock_release>
 800a558:	230c      	movs	r3, #12
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	e7ee      	b.n	800a53c <__sfp+0x60>
 800a55e:	bf00      	nop
 800a560:	0800aa9c 	.word	0x0800aa9c
 800a564:	ffff0001 	.word	0xffff0001

0800a568 <_fwalk_reent>:
 800a568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a56c:	4606      	mov	r6, r0
 800a56e:	4688      	mov	r8, r1
 800a570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a574:	2700      	movs	r7, #0
 800a576:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a57a:	f1b9 0901 	subs.w	r9, r9, #1
 800a57e:	d505      	bpl.n	800a58c <_fwalk_reent+0x24>
 800a580:	6824      	ldr	r4, [r4, #0]
 800a582:	2c00      	cmp	r4, #0
 800a584:	d1f7      	bne.n	800a576 <_fwalk_reent+0xe>
 800a586:	4638      	mov	r0, r7
 800a588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58c:	89ab      	ldrh	r3, [r5, #12]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d907      	bls.n	800a5a2 <_fwalk_reent+0x3a>
 800a592:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a596:	3301      	adds	r3, #1
 800a598:	d003      	beq.n	800a5a2 <_fwalk_reent+0x3a>
 800a59a:	4629      	mov	r1, r5
 800a59c:	4630      	mov	r0, r6
 800a59e:	47c0      	blx	r8
 800a5a0:	4307      	orrs	r7, r0
 800a5a2:	3568      	adds	r5, #104	; 0x68
 800a5a4:	e7e9      	b.n	800a57a <_fwalk_reent+0x12>

0800a5a6 <__retarget_lock_init_recursive>:
 800a5a6:	4770      	bx	lr

0800a5a8 <__retarget_lock_acquire_recursive>:
 800a5a8:	4770      	bx	lr

0800a5aa <__retarget_lock_release_recursive>:
 800a5aa:	4770      	bx	lr

0800a5ac <__swhatbuf_r>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	460e      	mov	r6, r1
 800a5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	b096      	sub	sp, #88	; 0x58
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	461d      	mov	r5, r3
 800a5bc:	da08      	bge.n	800a5d0 <__swhatbuf_r+0x24>
 800a5be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	602a      	str	r2, [r5, #0]
 800a5c6:	061a      	lsls	r2, r3, #24
 800a5c8:	d410      	bmi.n	800a5ec <__swhatbuf_r+0x40>
 800a5ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ce:	e00e      	b.n	800a5ee <__swhatbuf_r+0x42>
 800a5d0:	466a      	mov	r2, sp
 800a5d2:	f000 f903 	bl	800a7dc <_fstat_r>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	dbf1      	blt.n	800a5be <__swhatbuf_r+0x12>
 800a5da:	9a01      	ldr	r2, [sp, #4]
 800a5dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5e4:	425a      	negs	r2, r3
 800a5e6:	415a      	adcs	r2, r3
 800a5e8:	602a      	str	r2, [r5, #0]
 800a5ea:	e7ee      	b.n	800a5ca <__swhatbuf_r+0x1e>
 800a5ec:	2340      	movs	r3, #64	; 0x40
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	b016      	add	sp, #88	; 0x58
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5f8 <__smakebuf_r>:
 800a5f8:	898b      	ldrh	r3, [r1, #12]
 800a5fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5fc:	079d      	lsls	r5, r3, #30
 800a5fe:	4606      	mov	r6, r0
 800a600:	460c      	mov	r4, r1
 800a602:	d507      	bpl.n	800a614 <__smakebuf_r+0x1c>
 800a604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	6123      	str	r3, [r4, #16]
 800a60c:	2301      	movs	r3, #1
 800a60e:	6163      	str	r3, [r4, #20]
 800a610:	b002      	add	sp, #8
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	ab01      	add	r3, sp, #4
 800a616:	466a      	mov	r2, sp
 800a618:	f7ff ffc8 	bl	800a5ac <__swhatbuf_r>
 800a61c:	9900      	ldr	r1, [sp, #0]
 800a61e:	4605      	mov	r5, r0
 800a620:	4630      	mov	r0, r6
 800a622:	f7ff f957 	bl	80098d4 <_malloc_r>
 800a626:	b948      	cbnz	r0, 800a63c <__smakebuf_r+0x44>
 800a628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62c:	059a      	lsls	r2, r3, #22
 800a62e:	d4ef      	bmi.n	800a610 <__smakebuf_r+0x18>
 800a630:	f023 0303 	bic.w	r3, r3, #3
 800a634:	f043 0302 	orr.w	r3, r3, #2
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	e7e3      	b.n	800a604 <__smakebuf_r+0xc>
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <__smakebuf_r+0x7c>)
 800a63e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	6020      	str	r0, [r4, #0]
 800a644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	9b00      	ldr	r3, [sp, #0]
 800a64c:	6163      	str	r3, [r4, #20]
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	6120      	str	r0, [r4, #16]
 800a652:	b15b      	cbz	r3, 800a66c <__smakebuf_r+0x74>
 800a654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f8d1 	bl	800a800 <_isatty_r>
 800a65e:	b128      	cbz	r0, 800a66c <__smakebuf_r+0x74>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	89a0      	ldrh	r0, [r4, #12]
 800a66e:	4305      	orrs	r5, r0
 800a670:	81a5      	strh	r5, [r4, #12]
 800a672:	e7cd      	b.n	800a610 <__smakebuf_r+0x18>
 800a674:	0800a405 	.word	0x0800a405

0800a678 <_malloc_usable_size_r>:
 800a678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67c:	1f18      	subs	r0, r3, #4
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfbc      	itt	lt
 800a682:	580b      	ldrlt	r3, [r1, r0]
 800a684:	18c0      	addlt	r0, r0, r3
 800a686:	4770      	bx	lr

0800a688 <_raise_r>:
 800a688:	291f      	cmp	r1, #31
 800a68a:	b538      	push	{r3, r4, r5, lr}
 800a68c:	4604      	mov	r4, r0
 800a68e:	460d      	mov	r5, r1
 800a690:	d904      	bls.n	800a69c <_raise_r+0x14>
 800a692:	2316      	movs	r3, #22
 800a694:	6003      	str	r3, [r0, #0]
 800a696:	f04f 30ff 	mov.w	r0, #4294967295
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a69e:	b112      	cbz	r2, 800a6a6 <_raise_r+0x1e>
 800a6a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6a4:	b94b      	cbnz	r3, 800a6ba <_raise_r+0x32>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f830 	bl	800a70c <_getpid_r>
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b6:	f000 b817 	b.w	800a6e8 <_kill_r>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d00a      	beq.n	800a6d4 <_raise_r+0x4c>
 800a6be:	1c59      	adds	r1, r3, #1
 800a6c0:	d103      	bne.n	800a6ca <_raise_r+0x42>
 800a6c2:	2316      	movs	r3, #22
 800a6c4:	6003      	str	r3, [r0, #0]
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	e7e7      	b.n	800a69a <_raise_r+0x12>
 800a6ca:	2400      	movs	r4, #0
 800a6cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	4798      	blx	r3
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7e0      	b.n	800a69a <_raise_r+0x12>

0800a6d8 <raise>:
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <raise+0xc>)
 800a6da:	4601      	mov	r1, r0
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	f7ff bfd3 	b.w	800a688 <_raise_r>
 800a6e2:	bf00      	nop
 800a6e4:	20000024 	.word	0x20000024

0800a6e8 <_kill_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	; (800a708 <_kill_r+0x20>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	f7f7 fd41 	bl	800217c <_kill>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	d102      	bne.n	800a704 <_kill_r+0x1c>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b103      	cbz	r3, 800a704 <_kill_r+0x1c>
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	bf00      	nop
 800a708:	200003ec 	.word	0x200003ec

0800a70c <_getpid_r>:
 800a70c:	f7f7 bd2e 	b.w	800216c <_getpid>

0800a710 <__sread>:
 800a710:	b510      	push	{r4, lr}
 800a712:	460c      	mov	r4, r1
 800a714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a718:	f000 f894 	bl	800a844 <_read_r>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	bfab      	itete	ge
 800a720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a722:	89a3      	ldrhlt	r3, [r4, #12]
 800a724:	181b      	addge	r3, r3, r0
 800a726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a72a:	bfac      	ite	ge
 800a72c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a72e:	81a3      	strhlt	r3, [r4, #12]
 800a730:	bd10      	pop	{r4, pc}

0800a732 <__swrite>:
 800a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a736:	461f      	mov	r7, r3
 800a738:	898b      	ldrh	r3, [r1, #12]
 800a73a:	05db      	lsls	r3, r3, #23
 800a73c:	4605      	mov	r5, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	4616      	mov	r6, r2
 800a742:	d505      	bpl.n	800a750 <__swrite+0x1e>
 800a744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a748:	2302      	movs	r3, #2
 800a74a:	2200      	movs	r2, #0
 800a74c:	f000 f868 	bl	800a820 <_lseek_r>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	4632      	mov	r2, r6
 800a75e:	463b      	mov	r3, r7
 800a760:	4628      	mov	r0, r5
 800a762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	f000 b817 	b.w	800a798 <_write_r>

0800a76a <__sseek>:
 800a76a:	b510      	push	{r4, lr}
 800a76c:	460c      	mov	r4, r1
 800a76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a772:	f000 f855 	bl	800a820 <_lseek_r>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	bf15      	itete	ne
 800a77c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a77e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a786:	81a3      	strheq	r3, [r4, #12]
 800a788:	bf18      	it	ne
 800a78a:	81a3      	strhne	r3, [r4, #12]
 800a78c:	bd10      	pop	{r4, pc}

0800a78e <__sclose>:
 800a78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a792:	f000 b813 	b.w	800a7bc <_close_r>
	...

0800a798 <_write_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	; (800a7b8 <_write_r+0x20>)
 800a79c:	4604      	mov	r4, r0
 800a79e:	4608      	mov	r0, r1
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f7f7 fd1f 	bl	80021ea <_write>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_write_r+0x1e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_write_r+0x1e>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	200003ec 	.word	0x200003ec

0800a7bc <_close_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	; (800a7d8 <_close_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f7 fd2b 	bl	8002222 <_close>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_close_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_close_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	200003ec 	.word	0x200003ec

0800a7dc <_fstat_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d07      	ldr	r5, [pc, #28]	; (800a7fc <_fstat_r+0x20>)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	f7f7 fd26 	bl	800223a <_fstat>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	d102      	bne.n	800a7f8 <_fstat_r+0x1c>
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	b103      	cbz	r3, 800a7f8 <_fstat_r+0x1c>
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
 800a7fa:	bf00      	nop
 800a7fc:	200003ec 	.word	0x200003ec

0800a800 <_isatty_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d06      	ldr	r5, [pc, #24]	; (800a81c <_isatty_r+0x1c>)
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	602b      	str	r3, [r5, #0]
 800a80c:	f7f7 fd25 	bl	800225a <_isatty>
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	d102      	bne.n	800a81a <_isatty_r+0x1a>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	b103      	cbz	r3, 800a81a <_isatty_r+0x1a>
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	200003ec 	.word	0x200003ec

0800a820 <_lseek_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4d07      	ldr	r5, [pc, #28]	; (800a840 <_lseek_r+0x20>)
 800a824:	4604      	mov	r4, r0
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	602a      	str	r2, [r5, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	f7f7 fd1e 	bl	8002270 <_lseek>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_lseek_r+0x1e>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_lseek_r+0x1e>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	200003ec 	.word	0x200003ec

0800a844 <_read_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d07      	ldr	r5, [pc, #28]	; (800a864 <_read_r+0x20>)
 800a848:	4604      	mov	r4, r0
 800a84a:	4608      	mov	r0, r1
 800a84c:	4611      	mov	r1, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	602a      	str	r2, [r5, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f7f7 fcac 	bl	80021b0 <_read>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_read_r+0x1e>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_read_r+0x1e>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	200003ec 	.word	0x200003ec

0800a868 <_init>:
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86a:	bf00      	nop
 800a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86e:	bc08      	pop	{r3}
 800a870:	469e      	mov	lr, r3
 800a872:	4770      	bx	lr

0800a874 <_fini>:
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a876:	bf00      	nop
 800a878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87a:	bc08      	pop	{r3}
 800a87c:	469e      	mov	lr, r3
 800a87e:	4770      	bx	lr
